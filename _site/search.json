[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "#Packages\nlibrary(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\n\nWarning: pacote 'purrr' foi compilado no R versão 4.4.2\n\nlibrary(gsheet)\n\nWarning: pacote 'gsheet' foi compilado no R versão 4.4.2\n\nlibrary(raster)\n\nWarning: pacote 'raster' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: sp\n\n\nWarning: pacote 'sp' foi compilado no R versão 4.4.2\n\n\n\nAnexando pacote: 'raster'\n\n\nO seguinte objeto é mascarado por 'package:dplyr':\n\n    select\n\nlibrary(ncdf4)\nlibrary(lubridate)\n\nWarning: pacote 'lubridate' foi compilado no R versão 4.4.2\n\n\n\nAnexando pacote: 'lubridate'\n\n\nOs seguintes objetos são mascarados por 'package:raster':\n\n    intersect, union\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ stringr 1.5.1\n✔ ggplot2 3.5.1     ✔ tibble  3.2.1\n✔ readr   2.1.5     ✔ tidyr   1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks raster::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ raster::select() masks dplyr::select()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(INLA)\n\nWarning: pacote 'INLA' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: Matrix\n\nAnexando pacote: 'Matrix'\n\nOs seguintes objetos são mascarados por 'package:tidyr':\n\n    expand, pack, unpack\n\nThis is INLA_24.12.11 built 2024-12-11 19:58:26 UTC.\n - See www.r-inla.org/contact-us for how to get help.\n - List available models/likelihoods/etc with inla.list.models()\n - Use inla.doc(&lt;NAME&gt;) to access documentation\n\nlibrary(caret)\n\nWarning: pacote 'caret' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: lattice\n\nAnexando pacote: 'caret'\n\nO seguinte objeto é mascarado por 'package:purrr':\n\n    lift\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")"
  },
  {
    "objectID": "about.html#framework-modeling",
    "href": "about.html#framework-modeling",
    "title": "About",
    "section": "Framework modeling",
    "text": "Framework modeling\n\nSelecting of models\n\nwd_0_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 60)\n\n\nwd_0_60 = wd_0_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_60)\n\nTime used:\n    Pre = 0.259, Running = 0.555, Post = 0.316, Total = 1.13 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.331 0.952     -6.147   -4.356     -2.362 -4.352   0\nT2M          0.184 0.013      0.158    0.184      0.211  0.184   0\nPRECTOTCORR  0.000 0.003     -0.007    0.000      0.006  0.000   0\nRH2M         0.030 0.003      0.024    0.030      0.035  0.030   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.162 0.088      0.043    0.146      0.379 0.113\n\nDeviance Information Criterion (DIC) ...............: 9456.67\nDeviance Information Criterion (DIC, saturated) ....: 9437.87\nEffective number of parameters .....................: 14.65\n\nWatanabe-Akaike information criterion (WAIC) ...: 9454.87\nEffective number of parameters .................: 12.83\n\nMarginal log-Likelihood:  -4786.44 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\nwd_0_60 %&gt;%\n  dplyr::group_by(epidemic) %&gt;% \n  summarise(\n    n = n()/61\n  )\n\n# A tibble: 2 × 2\n  epidemic     n\n     &lt;dbl&gt; &lt;dbl&gt;\n1        0    36\n2        1   177\n\n\n\nmodel_full &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nmodel_reduced &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M,\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(model_reduced)\n\nTime used:\n    Pre = 0.126, Running = 0.2, Post = 0.0661, Total = 0.393 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.614 0.378     -4.355   -3.614     -2.873 -3.614   0\nT2M          0.139 0.011      0.116    0.139      0.161  0.139   0\nPRECTOTCORR  0.002 0.003     -0.004    0.002      0.008  0.002   0\nRH2M         0.021 0.003      0.016    0.021      0.026  0.021   0\n\nDeviance Information Criterion (DIC) ...............: 11629.46\nDeviance Information Criterion (DIC, saturated) ....: 11610.66\nEffective number of parameters .....................: 4.00\n\nWatanabe-Akaike information criterion (WAIC) ...: 11629.48\nEffective number of parameters .................: 4.01\n\nMarginal log-Likelihood:  -5840.33 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\nloglik_full = model_full$mlik\nloglik_reduced = model_reduced$mlik\nln_bf &lt;- loglik_full - loglik_reduced\nln_bf\n\n                                          [,1]\nlog marginal-likelihood (integration) 1054.270\nlog marginal-likelihood (Gaussian)    1053.888\n\n\n\n\nBy windows\n\n0 to 20\n\nwd_0_20 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 20)\n\n\nwd_0_20 = wd_0_20 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_20 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_0_20 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n# A tibble: 1 × 4\n  RAIN_mean RAIN_sd RAIN_max RAIN_min\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1      6.06    8.71     73.6        0\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n# A tibble: 1 × 4\n  HUMIDITY_mean HUMIDITY_sd HUMIDITY_max HUMIDITY_min\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          72.2        10.7         95.3         31.9\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n# A tibble: 1 × 4\n  TEMPERATURE_mean TEMPERATURE_sd TEMPERATURE_max TEMPERATURE_min\n             &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1             26.3           2.37            32.7            14.1\n\n\n\nsummary(inla_0_20)\n\nTime used:\n    Pre = 0.13, Running = 0.278, Post = 0.053, Total = 0.461 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.390 0.974     -6.269   -4.405     -2.424 -4.402   0\nT2M          0.171 0.020      0.132    0.171      0.211  0.171   0\nPRECTOTCORR -0.007 0.006     -0.018   -0.007      0.004 -0.007   0\nRH2M         0.034 0.005      0.025    0.034      0.043  0.034   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.237 0.129      0.061    0.212      0.557 0.164\n\nDeviance Information Criterion (DIC) ...............: 3257.90\nDeviance Information Criterion (DIC, saturated) ....: 3251.43\nEffective number of parameters .....................: 14.59\n\nWatanabe-Akaike information criterion (WAIC) ...: 3256.29\nEffective number of parameters .................: 12.93\n\nMarginal log-Likelihood:  -1678.39 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_0_20$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant  0.975quant       mode\n1   1  3.3857414 1.4104490  0.9691892  3.2553456  6.58167385  3.0584727\n2   2 -1.8049506 0.7115337 -3.3211586 -1.7754030 -0.46526359 -1.7796873\n3   3 -1.9029895 0.7100123 -3.4168186 -1.8732919 -0.56638752 -1.8775751\n4   4 -2.3630548 0.7124729 -3.8820244 -2.3330722 -1.02298765 -2.3373231\n5   5 -1.0321779 0.7126945 -2.5496579 -1.0029705  0.31052091 -1.0072717\n6   6  4.2341328 1.3237746  1.9850067  4.1057502  7.24853904  3.9212008\n7   7  0.4925629 0.7313647 -1.0515180  0.5188704  1.87689504  0.5145987\n8   8 -1.5477562 0.7113389 -3.0638183 -1.5181268 -0.20864691 -1.5224088\n9   9  0.6058843 0.7317307 -0.9381590  0.6319135  1.99169215  0.6276391\n10 10  0.2839308 0.7319503 -1.2618765  0.3105035  1.66852506  0.3062427\n11 11  0.9360969 0.7332249 -0.6084865  0.9612734  2.32709588  0.9570014\n12 12 -1.2852277 0.7142957 -2.8061982 -1.2557779  0.05957537 -1.2600553\n            kld\n1  1.227521e-04\n2  4.527055e-05\n3  4.631033e-05\n4  4.498348e-05\n5  4.435683e-05\n6  1.364481e-04\n7  3.300908e-05\n8  4.544899e-05\n9  3.270643e-05\n10 3.287958e-05\n11 3.162338e-05\n12 4.356393e-05\n\n\n\nMarginal effects\n\nmarg_0_20_1 &lt;- inla_0_20$marginals.fixed[[1]] # Intercept\n\n\nmarg_0_20_1 = as.data.frame(marg_0_20_1)\nmarg_0_20_1$windows = c(\"Survival\")\nmarg_0_20_1$parameter = c(\"Intercept\")\n\nggplot(marg_0_20_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_2 &lt;- inla_0_20$marginals.fixed[[2]] # T2M\n\nmarg_0_20_2 = as.data.frame(marg_0_20_2)\nmarg_0_20_2$windows = c(\"Survival\")\nmarg_0_20_2$parameter = c(\"Temperature\")\n\nggplot(marg_0_20_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_3 &lt;- inla_0_20$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_0_20_3 = as.data.frame(marg_0_20_3)\nmarg_0_20_3$windows = c(\"Survival\")\nmarg_0_20_3$parameter = c(\"Rain\")\n\nggplot(marg_0_20_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_4 &lt;- inla_0_20$marginals.fixed[[4]] # RH2M\n\nmarg_0_20_4 = as.data.frame(marg_0_20_4)\nmarg_0_20_4$windows = c(\"Survival\")\nmarg_0_20_4$parameter = c(\"Humidity\")\n\nggplot(marg_0_20_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_0_20$summary.fitted.values\n\npredictions &lt;- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\n\npred_results &lt;- data.frame(\n  RH2M = wd_0_20$RH2M, \n  PRECTOTCORR= wd_0_20$PRECTOTCORR,\n  T2M = wd_0_20$T2M,\n  predicted = inla_0_20$summary.fitted.values$mean,  \n  lower = inla_0_20$summary.fitted.values$`0.025quant`,  \n  upper = inla_0_20$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n#b4e4c0 #ca5858#6280bc ##c20f0f\nplot_0_20 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n\n  labs(x = \"\", y = \"Target spot outbreak (%)\",title = \"Survival\")+\n  ggthemes::theme_few()+\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n  theme(\n    axis.title.y = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_0_20\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n20 to 40\n\nwd_20_40 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 20 & days &lt;= 40)\n\n\nwd_20_40 = wd_20_40 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_20_40 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_20_40,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_20_40 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n# A tibble: 1 × 4\n  RAIN_mean RAIN_sd RAIN_max RAIN_min\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1      6.85    8.82     86.7        0\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n# A tibble: 1 × 4\n  HUMIDITY_mean HUMIDITY_sd HUMIDITY_max HUMIDITY_min\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          75.1        10.0         95.3         35.8\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n# A tibble: 1 × 4\n  TEMPERATURE_mean TEMPERATURE_sd TEMPERATURE_max TEMPERATURE_min\n             &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1             26.2           1.99            32.5            13.5\n\n\n\nsummary(inla_20_40)\n\nTime used:\n    Pre = 0.157, Running = 0.282, Post = 0.0492, Total = 0.488 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.213 1.071     -6.285   -4.226     -2.065 -4.224   0\nT2M              0.186 0.024      0.139    0.186      0.233  0.186   0\nPRECTOTCORR     -0.011 0.006     -0.022   -0.011      0.000 -0.011   0\nRH2M             0.025 0.005      0.014    0.025      0.035  0.025   0\ndays_difference  0.002 0.002     -0.002    0.002      0.006  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.234 0.128       0.06    0.209      0.551 0.161\n\nDeviance Information Criterion (DIC) ...............: 3282.40\nDeviance Information Criterion (DIC, saturated) ....: 3275.93\nEffective number of parameters .....................: 15.60\n\nWatanabe-Akaike information criterion (WAIC) ...: 3280.99\nEffective number of parameters .................: 14.13\n\nMarginal log-Likelihood:  -1699.24 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_20_40$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant  0.975quant       mode\n1   1  3.4841427 1.4091450  1.0732497  3.3527208  6.68021552  3.1561176\n2   2 -1.8328219 0.7160197 -3.3589643 -1.8029950 -0.48474161 -1.8073007\n3   3 -1.8488350 0.7144924 -3.3723597 -1.8189522 -0.50357487 -1.8232629\n4   4 -2.3506429 0.7169627 -3.8793653 -2.3204588 -1.00195205 -2.3247369\n5   5 -1.0694973 0.7168651 -2.5962241 -1.0400583  0.28117822 -1.0443861\n6   6  4.2924308 1.3285123  2.0372633  4.1628960  7.31964723  3.9777720\n7   7  0.5902255 0.7352815 -0.9622392  0.6166024  1.98250363  0.6122913\n8   8 -1.5141552 0.7156263 -3.0394440 -1.4843896 -0.16658472 -1.4887036\n9   9  0.5688288 0.7360509 -0.9848905  0.5951505  1.96264692  0.5908450\n10 10  0.3378783 0.7362997 -1.2170897  0.3645206  1.73119131  0.3602255\n11 11  0.6540748 0.7355736 -0.8984518  0.6802672  2.04741679  0.6759552\n12 12 -1.3094017 0.7177657 -2.8383116 -1.2797393  0.04220061 -1.2840507\n            kld\n1  1.258931e-04\n2  4.594233e-05\n3  4.693171e-05\n4  4.560222e-05\n5  4.518204e-05\n6  1.399458e-04\n7  3.374621e-05\n8  4.615167e-05\n9  3.336985e-05\n10 3.341365e-05\n11 3.351845e-05\n12 4.479235e-05\n\n\n\nMarginal effects\n\nmarg_20_40_1 &lt;- inla_20_40$marginals.fixed[[1]] # Intercept\n\n\nmarg_20_40_1 = as.data.frame(marg_20_40_1)\nmarg_20_40_1$windows = c(\"Sporulation\")\nmarg_20_40_1$parameter = c(\"Intercept\")\n\nggplot(marg_20_40_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_2 &lt;- inla_20_40$marginals.fixed[[2]] # T2M\n\nmarg_20_40_2 = as.data.frame(marg_20_40_2)\nmarg_20_40_2$windows = c(\"Sporulation\")\nmarg_20_40_2$parameter = c(\"Temperature\")\n\nggplot(marg_20_40_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_3 &lt;- inla_20_40$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_20_40_3 = as.data.frame(marg_20_40_3)\nmarg_20_40_3$windows = c(\"Sporulation\")\nmarg_20_40_3$parameter = c(\"Rain\")\n\nggplot(marg_20_40_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_4 &lt;- inla_20_40$marginals.fixed[[4]] # RH2M\n\nmarg_20_40_4 = as.data.frame(marg_20_40_4)\nmarg_20_40_4$windows = c(\"Sporulation\")\nmarg_20_40_4$parameter = c(\"Humidity\")\n\nggplot(marg_20_40_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_20_40$summary.fitted.values\n\npredictions &lt;- inla_20_40$summary.fitted.values\n\nwd_20_40$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_20_40$RH2M, \n  PRECTOTCORR= wd_20_40$PRECTOTCORR,\n  T2M = wd_20_40$T2M,\n  predicted = inla_20_40$summary.fitted.values$mean,  \n  lower = inla_20_40$summary.fitted.values$`0.025quant`,  \n  upper = inla_20_40$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_20_40 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",,title = \"Sporulation\") +\n  ggthemes::theme_few()+\n     facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_20_40\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n40 to 60\n\nwd_40_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 40 & days &lt;= 60)\n\n\nwd_40_60 = wd_40_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_40_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_40_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_40_60 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n# A tibble: 1 × 4\n  RAIN_mean RAIN_sd RAIN_max RAIN_min\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1      7.70    9.01     67.0        0\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n# A tibble: 1 × 4\n  HUMIDITY_mean HUMIDITY_sd HUMIDITY_max HUMIDITY_min\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          78.2        8.81         96.1         39.0\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n# A tibble: 1 × 4\n  TEMPERATURE_mean TEMPERATURE_sd TEMPERATURE_max TEMPERATURE_min\n             &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1             26.0           1.81            31.5            15.6\n\n\n\nsummary(inla_40_60)\n\nTime used:\n    Pre = 0.137, Running = 0.28, Post = 0.0545, Total = 0.472 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -6.374 1.161     -8.626   -6.384     -4.057 -6.383   0\nT2M              0.224 0.028      0.170    0.224      0.278  0.224   0\nPRECTOTCORR      0.015 0.006      0.003    0.015      0.026  0.015   0\nRH2M             0.037 0.006      0.026    0.037      0.048  0.037   0\ndays_difference  0.002 0.002     -0.002    0.002      0.005  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant mode\nPrecision for year1 0.232 0.127       0.06    0.207      0.546 0.16\n\nDeviance Information Criterion (DIC) ...............: 3253.00\nDeviance Information Criterion (DIC, saturated) ....: 3246.52\nEffective number of parameters .....................: 15.61\n\nWatanabe-Akaike information criterion (WAIC) ...: 3251.56\nEffective number of parameters .................: 14.11\n\nMarginal log-Likelihood:  -1684.25 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_40_60$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.6006429 1.4061756  1.1975872  3.4686040  6.7920354  3.2723912\n2   2 -1.8279088 0.7204838 -3.3635869 -1.7979010 -0.4711794 -1.8022079\n3   3 -1.8598468 0.7193665 -3.3936081 -1.8297989 -0.5051756 -1.8341092\n4   4 -2.3376697 0.7216068 -3.8762423 -2.3073092 -0.9800037 -2.3115880\n5   5 -1.0744828 0.7215334 -2.6111211 -1.0448616  0.2851920 -1.0491905\n6   6  4.2780421 1.3390985  2.0047047  4.1474916  7.3293015  3.9608659\n7   7  0.6251712 0.7399127 -0.9368863  0.6516257  2.0266557  0.6473046\n8   8 -1.5716780 0.7204119 -3.1071993 -1.5416860 -0.2150289 -1.5459977\n9   9  0.6072474 0.7401801 -0.9552340  0.6336794  2.0092744  0.6293607\n10 10  0.2774010 0.7408229 -1.2875129  0.3043373  1.6790895  0.3000350\n11 11  0.5418856 0.7400895 -1.0208319  0.5684752  1.9432885  0.5641585\n12 12 -1.2565720 0.7228610 -2.7958969 -1.2268351  0.1050871 -1.2311507\n            kld\n1  1.263673e-04\n2  4.584258e-05\n3  4.655823e-05\n4  4.539446e-05\n5  4.496907e-05\n6  1.399532e-04\n7  3.360806e-05\n8  4.588774e-05\n9  3.347384e-05\n10 3.343960e-05\n11 3.359659e-05\n12 4.425884e-05\n\n\n\nMarginal effects\n\nmarg_40_60_1 &lt;- inla_40_60$marginals.fixed[[1]] # Intercept\n\n\nmarg_40_60_1 = as.data.frame(marg_40_60_1)\nmarg_40_60_1$windows = c(\"Infection\")\nmarg_40_60_1$parameter = c(\"Intercept\")\n\nggplot(marg_40_60_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_2 &lt;- inla_40_60$marginals.fixed[[2]] # T2M\n\nmarg_40_60_2 = as.data.frame(marg_40_60_2)\nmarg_40_60_2$windows = c(\"Infection\")\nmarg_40_60_2$parameter = c(\"Temperature\")\n\nggplot(marg_40_60_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_3 &lt;- inla_40_60$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_40_60_3 = as.data.frame(marg_40_60_3)\nmarg_40_60_3$windows = c(\"Infection\")\nmarg_40_60_3$parameter = c(\"Rain\")\n\nmarg_40_60_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_4 &lt;- inla_40_60$marginals.fixed[[4]] # RH2M\n\nmarg_40_60_4 = as.data.frame(marg_40_60_4)\nmarg_40_60_4$windows = c(\"Infection\")\nmarg_40_60_4$parameter = c(\"Humidity\")\n\nggplot(marg_40_60_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_40_60$summary.fitted.values\n\npredictions &lt;- inla_40_60$summary.fitted.values\n\nwd_40_60$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_40_60$RH2M, \n  PRECTOTCORR= wd_40_60$PRECTOTCORR,\n  T2M = wd_40_60$T2M,\n  predicted = inla_40_60$summary.fitted.values$mean,  \n  lower = inla_40_60$summary.fitted.values$`0.025quant`,  \n  upper = inla_40_60$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_40_60 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",title = \"Infection\") +\n  ggthemes::theme_few()+\n   facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_40_60\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n60 to 80\n\nwd_60_80 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 60 & days &lt;= 80)\n\nwd_60_80 = wd_60_80 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_60_80 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_80,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_60_80 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n# A tibble: 1 × 4\n  RAIN_mean RAIN_sd RAIN_max RAIN_min\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1      8.03    9.35     102.        0\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n# A tibble: 1 × 4\n  HUMIDITY_mean HUMIDITY_sd HUMIDITY_max HUMIDITY_min\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1          79.7        7.77         94.1         42.1\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n# A tibble: 1 × 4\n  TEMPERATURE_mean TEMPERATURE_sd TEMPERATURE_max TEMPERATURE_min\n             &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1             25.8           1.78            32.7            15.3\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    DAYS_mean = mean(days_difference),\n    DAYS_sd = sd(days_difference),\n    DAYS_max = max(days_difference),\n    DAYS_min = min(days_difference),\n  )\n\n# A tibble: 1 × 4\n  DAYS_mean DAYS_sd DAYS_max DAYS_min\n      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1      40.8    20.4      138      -22\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LAT_mean = mean(lat),\n    LAT_sd = sd(lat),\n    LAT_max = max(lat),\n    LAT_min = min(lat),\n  )\n\n# A tibble: 1 × 4\n  LAT_mean LAT_sd LAT_max LAT_min\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1    -15.7   3.38   -10.7   -25.4\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LON_mean = mean(lon),\n    LON_sd = sd(lon),\n    LON_max = max(lon),\n    LON_min = min(lon),\n  )\n\n# A tibble: 1 × 4\n  LON_mean LON_sd LON_max LON_min\n     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1    -53.5   3.32   -45.0   -58.8\n\n\n\nsummary(inla_60_80)\n\nTime used:\n    Pre = 0.141, Running = 0.283, Post = 0.0536, Total = 0.477 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.127 1.156     -6.368   -4.138     -1.821 -4.136   0\nT2M              0.137 0.026      0.087    0.137      0.188  0.137   0\nPRECTOTCORR      0.004 0.006     -0.008    0.004      0.015  0.004   0\nRH2M             0.036 0.006      0.024    0.036      0.049  0.036   0\ndays_difference  0.003 0.002      0.000    0.003      0.007  0.003   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.241 0.132      0.062    0.215      0.567 0.166\n\nDeviance Information Criterion (DIC) ...............: 3300.87\nDeviance Information Criterion (DIC, saturated) ....: 3294.40\nEffective number of parameters .....................: 15.61\n\nWatanabe-Akaike information criterion (WAIC) ...: 3299.58\nEffective number of parameters .................: 14.25\n\nMarginal log-Likelihood:  -1708.07 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_60_80$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.4320953 1.3974885  1.0408063  3.3018927  6.6007651  3.1067686\n2   2 -1.8640870 0.7077901 -3.3729400 -1.8344711 -0.5319120 -1.8387112\n3   3 -1.8888361 0.7060945 -3.3949759 -1.8590811 -0.5600137 -1.8633229\n4   4 -2.3188428 0.7085575 -3.8300005 -2.2888542 -0.9864102 -2.2930674\n5   5 -1.1128568 0.7084109 -2.6220914 -1.0835491  0.2212908 -1.0878097\n6   6  4.2100101 1.3190652  1.9707167  4.0814669  7.2150118  3.8975409\n7   7  0.6493260 0.7275736 -0.8865718  0.6753881  2.0269609  0.6711371\n8   8 -1.4763195 0.7071920 -2.9839557 -1.4467641 -0.1450131 -1.4510148\n9   9  0.5866506 0.7275363 -0.9492281  0.6127352  1.9641457  0.6084856\n10 10  0.4223012 0.7278913 -1.1147107  0.4485825  1.7998471  0.4443407\n11 11  0.5299460 0.7276131 -1.0061387  0.5560621  1.9074816  0.5518161\n12 12 -1.1671529 0.7088575 -2.6774855 -1.1377297  0.1674413 -1.1419829\n            kld\n1  1.235970e-04\n2  4.564184e-05\n3  4.680561e-05\n4  4.542337e-05\n5  4.507118e-05\n6  1.376624e-04\n7  3.311845e-05\n8  4.598425e-05\n9  3.314132e-05\n10 3.307796e-05\n11 3.311404e-05\n12 4.488288e-05\n\n\n\nMarginal effects\n\nmarg_60_80_1 &lt;- inla_60_80$marginals.fixed[[1]] # Intercept\n\n\nmarg_60_80_1 = as.data.frame(marg_60_80_1)\nmarg_60_80_1$windows = c(\"Colonization\")\nmarg_60_80_1$parameter = c(\"Intercept\")\n\nggplot(marg_60_80_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_2 &lt;- inla_60_80$marginals.fixed[[2]] # T2M\n\nmarg_60_80_2 = as.data.frame(marg_60_80_2)\nmarg_60_80_2$windows = c(\"Colonization\")\nmarg_60_80_2$parameter = c(\"Temperature\")\n\nggplot(marg_60_80_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_3 &lt;- inla_60_80$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_60_80_3 = as.data.frame(marg_60_80_3)\nmarg_60_80_3$windows = c(\"Colonization\")\nmarg_60_80_3$parameter = c(\"Rain\")\n\nmarg_60_80_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_4 &lt;- inla_60_80$marginals.fixed[[4]] # RH2M\n\nmarg_60_80_4 = as.data.frame(marg_60_80_4)\nmarg_60_80_4$windows = c(\"Colonization\")\nmarg_60_80_4$parameter = c(\"Humidity\")\n\nggplot(marg_60_80_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_60_80$summary.fitted.values\n\npredictions &lt;- inla_60_80$summary.fitted.values\n\nwd_60_80$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_60_80$RH2M, \n  PRECTOTCORR= wd_60_80$PRECTOTCORR,\n  T2M = wd_60_80$T2M,\n  predicted = inla_60_80$summary.fitted.values$mean,  \n  lower = inla_60_80$summary.fitted.values$`0.025quant`,  \n  upper = inla_60_80$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_60_80 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"Colonization\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_60_80\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\nJoining\n\nplot_grid(plot_0_20,plot_20_40,plot_40_60,plot_60_80, ncol = 4)\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nggsave(\"fig/INLA_prediction.png\", dpi = 600, bg = \"white\",\n        height = 6, width = 10)"
  },
  {
    "objectID": "about.html#marginal-plotting",
    "href": "about.html#marginal-plotting",
    "title": "About",
    "section": "Marginal plotting",
    "text": "Marginal plotting\n\nall_marginal = rbind(marg_0_20_1,marg_0_20_2,marg_0_20_3,marg_0_20_4,\n                     marg_20_40_1,marg_20_40_2,marg_20_40_3,marg_20_40_4,\n                     marg_40_60_1,marg_40_60_2,marg_40_60_3,marg_40_60_4,\n                     marg_60_80_1,marg_60_80_2,marg_60_80_3,marg_60_80_4)\n\nall_marginal %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_colour_manual(values = c(\"darkred\",\"#002f61\", \"darkgreen\",\"darkorange\"))+\n  #scale_color_viridis_d(option = \"D\")+\n  facet_wrap(~parameter, scale = \"free\")+\n  labs(x = \"Marginal effect\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        strip.text = element_text(face = \"bold\"))\n\n\n\n\n\n\n\nggsave(\"fig/marginal_effects.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 8)"
  },
  {
    "objectID": "about.html#random-year",
    "href": "about.html#random-year",
    "title": "About",
    "section": "Random (Year)",
    "text": "Random (Year)\n\nyear_0_20 = inla_0_20$summary.random\nyear_0_20 = as.data.frame(year_0_20)\n\nyear_0_20 %&gt;% \nggplot(aes(x = as.factor(year1.ID), y = year1.mean)) +\n  geom_segment(aes(xend = as.factor(year1.ID), y = 0, yend = year1.mean, \n                   color = year1.mean &gt; 0), size = 1, linetype = \"dashed\") +\n  geom_point(aes(color = year1.mean &gt; 0), size = 4) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"solid\") +  \n  scale_color_manual(values = c(\"TRUE\" = \"darkred\", \"FALSE\" = \"#002f61\")) +\n  scale_y_continuous(breaks = seq(-2.5, 4.5, 0.5)) +\n  ggthemes::theme_few() +\n  labs(x = \"Year\",\n       y = \"Marginal effect\") +\n  theme(text = element_text(size = 12),\n       axis.title = element_text(face = \"bold\", size = 12),\n        strip.text = element_text(face = \"bold\", size = 12),\n        legend.position = \"none\")\n\n\n\n\n\n\n\nggsave(\"fig/marginal_effects_year.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 10)"
  },
  {
    "objectID": "about.html#scenarios",
    "href": "about.html#scenarios",
    "title": "About",
    "section": "Scenarios",
    "text": "Scenarios\n\nmedian(pred_results$PRECTOTCORR)\nmedian(pred_results$RH2M)\n\npred_results2 = pred_results %&gt;% \n  dplyr::mutate(scenarios = ifelse(RH2M&gt;= 79, 1,0))\n\n\n\npred_results2 &lt;- pred_results2 %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper, scenarios),  \n    names_to = \"variables\")\n\npred_results2$scenarios = as.factor(pred_results2$scenarios)\n\nplot_60_80 = pred_results2 %&gt;% \n  filter(variables == \"T2M\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = scenarios), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  #scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n   #                               \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  #facet_wrap(~scenarios, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"right\"\n  )\nplot_60_80\n\n\nplot_60_80 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "about.html#loocv",
    "href": "about.html#loocv",
    "title": "About",
    "section": "LOOCV",
    "text": "LOOCV\n\nset.seed(123)\n\n\nacc &lt;- NULL\nfor(i in 1:nrow(wd_60_8022))\n{\n    # Train-test splitting\n    # 499 samples -&gt; fitting\n    # 1 sample -&gt; testing\n    train &lt;- wd_60_8022[-i,]\n    test &lt;- wd_60_8022[i,]\n    \n    # Fitting\n\n    modelt &lt;- inla(epidemic ~T2M + RH2M,\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      #f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob &lt;- modelt$summary.fitted.values\n    \n    # If prob &gt; 0.5 then 1, else 0\n    results &lt;- ifelse(results_prob$mean &gt; 0.75,1,0)\n    \n    # Actual answers\n    answers &lt;- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError &lt;- mean(answers != results)\n    \n    # Collecting results\n    acc[i] &lt;- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)"
  },
  {
    "objectID": "about.html#loocv-1",
    "href": "about.html#loocv-1",
    "title": "About",
    "section": "LOOCV",
    "text": "LOOCV\nLOOCV com dados diários\n\nset.seed(123)\n\n\nacc &lt;- NULL\nfor(i in 1:nrow(wd_0_20))\n{\n    # Train-test splitting\n    # 499 samples -&gt; fitting\n    # 1 sample -&gt; testing\n    train &lt;- wd_0_20[-i,]\n    test &lt;- wd_0_20[i,]\n    \n    # Fitting\n\n    modelt &lt;- inla(epidemic ~T2M + RH2M+\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob &lt;- modelt$summary.fitted.values\n    \n    # If prob &gt; 0.5 then 1, else 0\n    results &lt;- ifelse(results_prob$mean &gt; 0.75,1,0)\n    \n    # Actual answers\n    answers &lt;- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError &lt;- mean(answers != results)\n    \n    # Collecting results\n    acc[i] &lt;- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)"
  }
]