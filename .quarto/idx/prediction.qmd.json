{"title":"prediction","markdown":{"yaml":{"title":"prediction","format":"html","editor":"visual"},"headingText":"GAM","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n```\n\n```{r}\nweather_data = read_xlsx(\"data/weather_data.xlsx\")\nweather_data$mean_sev = weather_data$mean_sev/100\n```\n\n\n```{r}\nweather_data = weather_data %>% \n  mutate(T2M = (T2M_MAX+T2M_MIN)/2) #%>% \n  #mutate(DPD = T2M - ((112 + 0.9*T2M)*RH2M^0.125 - 112 + 0.1*T2M))\n\n\n# Parâmetros da equação de Magnus-Tetens\na <- 17.27\nb <- 237.7\n\n# Cálculo do ponto de orvalho (Td)\nalpha <- (a * weather_data$T2M) / (b + weather_data$T2M) + log(weather_data$RH2M / 100)\nweather_data$Td <- (b * alpha) / (a - alpha)\n\n# Cálculo do DPD\nweather_data$DPD <- weather_data$T2M - weather_data$Td\n\n```\n\n```{r}\nweather_data$planting_date = as.Date(weather_data$planting_date)\n\nweather_data <- weather_data %>%\n  mutate(\n    # Criando a data permitida diretamente com base no estado\n    allowed_date = case_when(\n      state == \"MT\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")), \n      state == \"MS\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")),\n      state == \"GO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-25\")),\n      state == \"PR\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-11\")),\n      state == \"TO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"DF\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"BA\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"MG\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")) \n    ),\n    # Ajustando o ano da allowed_date para casos de janeiro e fevereiro\n    allowed_date = if_else(\n      format(planting_date, \"%m\") %in% c(\"01\", \"02\"), \n      as.Date(paste0(as.numeric(format(planting_date, \"%Y\")) - 1, \"-\", format(allowed_date, \"%m-%d\"))),\n      allowed_date\n    ),\n    # Calculando a diferença em dias\n    days_difference = as.numeric(planting_date - allowed_date)\n  )\n\n\n# Visualizar resultado\nprint(weather_data)\n\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nweather_data$state1 <- as.numeric(factor(weather_data$state))\nweather_data$location1 <- as.numeric(factor(weather_data$location))\nweather_data$level1 <- as.numeric(factor(weather_data$level))\n\nweather_data %>% \n  filter(days_difference < 0)\n\nunique(weather_data$level1)\n\nweather_data %>% \n  ggplot(aes(days_difference))+\n  geom_histogram()\n```\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days -10 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.30, 1, 0))\n\ntraint = wd_60_802 %>% \n  filter(!id == 4)\n\n\ntestt = wd_60_802 %>% \n  filter(id == 4)\n\n#wd_60_80$level1 = as.factor(wd_60_80$level1)\n\n  modelt <- gam(\n    mean_sev ~ s(T2M_MIN, by = level1, bs = 'fs') +\n      s(days_difference, by = level1, bs = \"fs\")+\n      #s(RH2M, by = level1, bs = 'fs') +\n      #s(T2M, by = level1, bs = 'fs') +\n      s(T2M_MAX, by = level1, bs = \"fs\") +\n      s(PRECTOTCORR, by = level1, bs = \"fs\") +\n      s(DPD, by = level1, bs = \"fs\")+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\")+\n      s(lat, lon, by = level1, bs = \"tp\"),\n    family = betar(),\n    data = traint,\n    method = \"REML\")\n  \n  \nmodelt = betareg(\n  mean_sev ~ T2M_MIN + T2M_MAX + RH2M + PRECTOTCORR + lat + level1+ days_difference,\n  data = traint,\n  link = \"logit\"\n)\n  \nsummary(modelt)\npredt= predict.gam(modelt, newdata= testt, type = \"response\")\npredt = as.data.frame(predt)\npredt$T2M = wd_60_80$T2M\npredt$PRECTOTCORR = wd_60_80$PRECTOTCORR\n\n\n\npredt %>% \n  ggplot(aes(T2M, predt))+\n  geom_smooth(se = F)\n\nphi <- summary(modelt)$scale  # Dispersão estimada pelo modelo\n\n# Calcular os parâmetros da Beta\nalpha <- predt$fit * phi\nbeta <- (1 - predt$fit) * phi\n\nnsim <- 60000\nsimulated_values <- replicate(nsim, rnorm(length(predt$predt), mean = predt$fit, sd = predt$se.fit))\nsimulated_values <- replicate(nsim, rbeta(length(predt$fit), shape1 = alpha, shape2 = beta))\n\nsimulated_values = as.data.frame(simulated_values)\nmean(simulated_values$simulated_values)\n\nsimulated_values <- stats::simulate(modelt, nsim = 100, newdata = testt)\n\n```\n\n```{r}\nlibrary(gamclass)\n\n  cv_results <- CVgam(\n  formula = mean_sev ~ s(T2M_MIN, by = level1, bs = 'cr', k = 60) +\n  s(days_difference, by = level1, bs = \"cr\", k = 30) +\n      s(RH2M, by = level1, bs = 'cr', k = 60) +\n      s(T2M, by = level1, bs = 'cr', k = 60) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 60) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 60) +\n      s(DPD, by = level1, bs = \"cr\", k = 60)+\n      s(lat, by = level1, bs = \"cr\", k = 30)+\n      s(lon, by = level1, bs = \"cr\", k = 30),\n      #s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n  data = wd_60_802,\n  nfold = 3\n)\n\nlibrary(nlraa)\n  \nsimulated_values <- simulate_gam(modelt, nsim = 10000)\nsimulated_values = as.data.frame(simulated_values)\nsimulated_values$T2M = wd_60_80$T2M\nt = predict.gam(modelt, type = \"response\")\n\nt = as.data.frame(t)\ntestt = as.data.frame(testt)\n\n```\n\n# LOOCV FS\n\n## Confusion matrix\n\n```{r}\n\nlibrary(mgcv)\nlibrary(betareg)\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.25, 1, 0))\n\n#wd_60_802$level1 = as.factor(wd_60_802$level1)\n\n# Lista para armazenar os resultados\nresults <- list()\n\n# Loop sobre cada id\nunique_ids <- unique(wd_60_802$id)  # Identificar todos os ids únicos\nfor (i in unique_ids) {\n  \n  # Separar treino e teste\n  traint <- wd_60_802 %>% filter(id != i)  # Todos os outros ids\n  testt <- wd_60_802 %>% filter(id == i)  # Apenas o id atual\n  \n  # Ajustar o modelo\n  modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 40) +\n      s(days_difference, by = level1, bs = \"fs\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 40) +\n      s(DPD, by = level1, bs = \"fs\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = traint,\n    method = \"REML\")\n  \n  \n  # Fazer predição para o conjunto de teste\n  predt <- predict.gam(modelt, newdata = testt, type = \"response\")\n  \n  # Compilar os resultados (observado vs. predito)\n  results[[as.character(i)]] <- data.frame(\n    id = testt$id,\n    observed = testt$epidemic,\n    predicted = predt\n  )\n}\n\n# Combinar todos os resultados em um único dataframe\nfinal_results <- do.call(rbind, results)\n\n# Visualizar os primeiros resultados\nhead(final_results)\n\n\n\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$predicted            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$predicted  > 0.59)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n```\n\n## Without confusion matrix\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 40) +\n      s(days_difference, by = level1, bs = \"fs\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 40) +\n      s(DPD, by = level1, bs = \"fs\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60)+\n      s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = train,\n    method = \"REML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n## Total\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = sum(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.25, 1, 0))\n\n\nmodelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'cr', k = 40) +\n      s(days_difference, by = level1, bs = \"cr\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 40) +\n      s(DPD, by = level1, bs = \"cr\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = wd_60_802,\n    method = \"REML\")\n\nfinal_results = predict_gam(modelt, type = \"response\")\nfinal_results = as.data.frame(final_results)\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$final_results\n            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$final_results  > 0.61)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n\n```\n\n# LOOCV CR\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 25) +\n      s(days_difference, by = level1, bs = \"fs\", k = 25)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 25) +\n      s(T2M, PRECTOTCORR, by = level1, bs = \"tp\", k = 30)+\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 25) +\n      s(DPD, by = level1, bs = \"fs\", k = 25)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 30),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 30),\n    family = binomial(link = \"logit\"),\n    data = train,\n    method = \"REML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# Random forest\n\n```{r}\nlibrary(randomForest)\n\nrf<- randomForest(as.factor(epidemic) ~ T2M + T2M_MAX + T2M_MIN + RH2M + days_difference + lat + lon + DPD + PRECTOTCORR, data = wd_60_802, importance = TRUE, ntree = 100)\n\nrf<- randomForest(mean_sev~ T2M + T2M_MAX + T2M_MIN + RH2M + days_difference + lat + lon + DPD + PRECTOTCORR, data = wd_60_802, importance = TRUE, ntree = 100)\n\nvarImpPlot(rf)\nimportance(rf)\n\n# Plotar a importância com customizações\nvarImpPlot(rf, \n           type = 1,         # Use '1' para Mean Decrease Accuracy ou '2' para Mean Decrease Gini\n           main = \"Importância das Variáveis - Random Forest\",\n           col = \"blue\",     # Cor das barras\n           cex = 0.8)        # Tamanho do texto\n\n```\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- randomForest(epidemic ~ T2M + T2M_MAX + T2M_MIN + \n                             RH2M + days_difference + lat + lon + DPD +\n                             PRECTOTCORR, data = train, importance = TRUE, ntree = 100)\n\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# LOOCV Mean sev\n\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days -10 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\n\n# Lista para armazenar os resultados\nresults <- list()\n\n# Loop sobre cada id\nunique_ids <- unique(wd_60_802$id)  # Identificar todos os ids únicos\nfor (i in unique_ids) {\n  \n  # Separar treino e teste\n  traint <- wd_60_802 %>% filter(id != i)  # Todos os outros ids\n  testt <- wd_60_802 %>% filter(id == i)  # Apenas o id atual\n  \n  # Ajustar o modelo\n  modelt <- gam(\n    mean_sev ~ s(T2M_MIN, by = level1, bs = 'cr', k = 40) +\n      s(days_difference, by = level1, bs = \"cr\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 40) +\n      s(DPD, by = level1, bs = \"cr\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60)+\n      s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = betar(),\n    data = traint,\n    method = \"REML\")\n  \n  \n  # Fazer predição para o conjunto de teste\n  predt <- predict.gam(modelt, newdata = testt, type = \"response\")\n  \n  # Compilar os resultados (observado vs. predito)\n  results[[as.character(i)]] <- data.frame(\n    id = testt$id,\n    observed = testt$mean_sev,\n    predicted = predt\n  )\n}\n\n# Combinar todos os resultados em um único dataframe\nfinal_results <- do.call(rbind, results)\n\n# Visualizar os primeiros resultados\nhead(final_results)\n\n\n\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$mean_sev,   # Valores observados (0 ou 1)\n  Predicted = final_results$predicted            # Probabilidades preditas pelo modelo\n)\n\ndat_rf_05 %>% \n  ggplot(aes(Observed, Predicted))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)\n```\n\n```{r}\nlibrary(mgcv)\nlibrary(MuMIn)\ninstall.packages(\"MuMIn\")\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nmodelo <- gam( mean_sev  ~s(RH2M, k = 10) + s(T2M_MAX, k = 10) +s(T2M_MIN, k = 10) + s(DPD, k = 10) + s(lat, k = 10) + s(lon, k = 10) + s(year1, k = 10), family = betar(), data = weather_data ) \n\n\nmodelo <- gam(\n  mean_sev  ~s(days, k = 10,bs='ad') + s(RH2M, k = 10,bs='ad') + s(T2M_MAX, k = 10,bs='ad') +s(T2M_MIN, k = 10,bs='ad') + s(PRECTOTCORR, k = 10,bs='ad')+ s(DPD, k = 10,bs='ad') + s(lat, k = 10,bs='ad') + s(lon, k = 10,bs='ad') + s(year1, k = 10,bs='ad'),\n  family = betar(),\n  data = weather_data\n)\n\nsummary(modelo)\nk.check(modelo)\ngam.check(modelo)\nplot(modelo, select = 7)\nvis.gam(modelo, view = c(\"DPD\",\"T2M_MIN\"), plot.type = \"contour\")\nplot(modelo, residuals = TRUE)\n```\n\n```{r}\nmodelo2 <- gam(\n  mean_sev~s(RH2M, k = 9,bs='fs', m = 1) + s(T2M_MAX, k = 9,bs='fs', m = 1) +s(T2M_MIN, k = 9,bs='fs', m = 1) + s(lat, k = 9,bs='fs', m = 1) + s(lon, k = 9,bs='fs', m = 1) + s(year1, k = 9,bs='fs', m = 1) + s(PRECTOTCORR, k = 9, bs = \"fs\", m = 1),\n  family = betar(),\n  data = weather_data,\n  method = \"REML\")\n\n# Crie a grade de valores para interpolação\nnew_data <- expand.grid(\n  RH2M = seq(min(weather_data$RH2M, na.rm = TRUE), max(weather_data$RH2M, na.rm = TRUE), length.out = 10),\n  T2M_MAX = seq(min(weather_data$T2M_MAX, na.rm = TRUE), max(weather_data$T2M_MAX, na.rm = TRUE), length.out = 10),\n  T2M_MIN = seq(min(weather_data$T2M_MIN, na.rm = TRUE), max(weather_data$T2M_MIN, na.rm = TRUE), length.out = 10),\n  lat = seq(min(weather_data$lat, na.rm = TRUE), max(weather_data$lat, na.rm = TRUE), length.out = 10),\n  lon = seq(min(weather_data$lon, na.rm = TRUE), max(weather_data$lon, na.rm = TRUE), length.out = 10),\n  year1 = seq(min(weather_data$year1, na.rm = TRUE), max(weather_data$year1, na.rm = TRUE), length.out = 10),\n  PRECTOTCORR = seq(min(weather_data$PRECTOTCORR, na.rm = TRUE), max(weather_data$PRECTOTCORR, na.rm = TRUE), length.out = 10)\n)\n\ngc()\n\nnew_data$predicted <- predict(modelo2, newdata = new_data, type = \"response\")\n\ngc()\n\nnew_data2 = new_data %>% \n  group_by(year1) %>% \n  summarise(\n    \n    RH2M = mean(RH2M),\n    T2M_MAX = mean(T2M_MAX),\n    predicted = mean(predicted)\n  )\n\n\nggplot(new_data, aes(x = year1, y = T2M_MIN, fill = predicted)) +\n  geom_tile() +\n  scale_fill_viridis_d(option = \"C\") + # Mapa de cores (ou escolha outra paleta)\n  labs(\n    title = \"Efeito Conjunto: RH2M e days_difference\",\n    x = \"RH2M\",\n    y = \"days_difference\",\n    fill = \"Severidade\"\n  ) +\n  theme_minimal()\n```\n","srcMarkdownNoYaml":"\n\n```{r}\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n```\n\n```{r}\nweather_data = read_xlsx(\"data/weather_data.xlsx\")\nweather_data$mean_sev = weather_data$mean_sev/100\n```\n\n# GAM\n\n```{r}\nweather_data = weather_data %>% \n  mutate(T2M = (T2M_MAX+T2M_MIN)/2) #%>% \n  #mutate(DPD = T2M - ((112 + 0.9*T2M)*RH2M^0.125 - 112 + 0.1*T2M))\n\n\n# Parâmetros da equação de Magnus-Tetens\na <- 17.27\nb <- 237.7\n\n# Cálculo do ponto de orvalho (Td)\nalpha <- (a * weather_data$T2M) / (b + weather_data$T2M) + log(weather_data$RH2M / 100)\nweather_data$Td <- (b * alpha) / (a - alpha)\n\n# Cálculo do DPD\nweather_data$DPD <- weather_data$T2M - weather_data$Td\n\n```\n\n```{r}\nweather_data$planting_date = as.Date(weather_data$planting_date)\n\nweather_data <- weather_data %>%\n  mutate(\n    # Criando a data permitida diretamente com base no estado\n    allowed_date = case_when(\n      state == \"MT\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")), \n      state == \"MS\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")),\n      state == \"GO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-25\")),\n      state == \"PR\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-11\")),\n      state == \"TO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"DF\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"BA\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"MG\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")) \n    ),\n    # Ajustando o ano da allowed_date para casos de janeiro e fevereiro\n    allowed_date = if_else(\n      format(planting_date, \"%m\") %in% c(\"01\", \"02\"), \n      as.Date(paste0(as.numeric(format(planting_date, \"%Y\")) - 1, \"-\", format(allowed_date, \"%m-%d\"))),\n      allowed_date\n    ),\n    # Calculando a diferença em dias\n    days_difference = as.numeric(planting_date - allowed_date)\n  )\n\n\n# Visualizar resultado\nprint(weather_data)\n\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nweather_data$state1 <- as.numeric(factor(weather_data$state))\nweather_data$location1 <- as.numeric(factor(weather_data$location))\nweather_data$level1 <- as.numeric(factor(weather_data$level))\n\nweather_data %>% \n  filter(days_difference < 0)\n\nunique(weather_data$level1)\n\nweather_data %>% \n  ggplot(aes(days_difference))+\n  geom_histogram()\n```\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days -10 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.30, 1, 0))\n\ntraint = wd_60_802 %>% \n  filter(!id == 4)\n\n\ntestt = wd_60_802 %>% \n  filter(id == 4)\n\n#wd_60_80$level1 = as.factor(wd_60_80$level1)\n\n  modelt <- gam(\n    mean_sev ~ s(T2M_MIN, by = level1, bs = 'fs') +\n      s(days_difference, by = level1, bs = \"fs\")+\n      #s(RH2M, by = level1, bs = 'fs') +\n      #s(T2M, by = level1, bs = 'fs') +\n      s(T2M_MAX, by = level1, bs = \"fs\") +\n      s(PRECTOTCORR, by = level1, bs = \"fs\") +\n      s(DPD, by = level1, bs = \"fs\")+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\")+\n      s(lat, lon, by = level1, bs = \"tp\"),\n    family = betar(),\n    data = traint,\n    method = \"REML\")\n  \n  \nmodelt = betareg(\n  mean_sev ~ T2M_MIN + T2M_MAX + RH2M + PRECTOTCORR + lat + level1+ days_difference,\n  data = traint,\n  link = \"logit\"\n)\n  \nsummary(modelt)\npredt= predict.gam(modelt, newdata= testt, type = \"response\")\npredt = as.data.frame(predt)\npredt$T2M = wd_60_80$T2M\npredt$PRECTOTCORR = wd_60_80$PRECTOTCORR\n\n\n\npredt %>% \n  ggplot(aes(T2M, predt))+\n  geom_smooth(se = F)\n\nphi <- summary(modelt)$scale  # Dispersão estimada pelo modelo\n\n# Calcular os parâmetros da Beta\nalpha <- predt$fit * phi\nbeta <- (1 - predt$fit) * phi\n\nnsim <- 60000\nsimulated_values <- replicate(nsim, rnorm(length(predt$predt), mean = predt$fit, sd = predt$se.fit))\nsimulated_values <- replicate(nsim, rbeta(length(predt$fit), shape1 = alpha, shape2 = beta))\n\nsimulated_values = as.data.frame(simulated_values)\nmean(simulated_values$simulated_values)\n\nsimulated_values <- stats::simulate(modelt, nsim = 100, newdata = testt)\n\n```\n\n```{r}\nlibrary(gamclass)\n\n  cv_results <- CVgam(\n  formula = mean_sev ~ s(T2M_MIN, by = level1, bs = 'cr', k = 60) +\n  s(days_difference, by = level1, bs = \"cr\", k = 30) +\n      s(RH2M, by = level1, bs = 'cr', k = 60) +\n      s(T2M, by = level1, bs = 'cr', k = 60) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 60) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 60) +\n      s(DPD, by = level1, bs = \"cr\", k = 60)+\n      s(lat, by = level1, bs = \"cr\", k = 30)+\n      s(lon, by = level1, bs = \"cr\", k = 30),\n      #s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n  data = wd_60_802,\n  nfold = 3\n)\n\nlibrary(nlraa)\n  \nsimulated_values <- simulate_gam(modelt, nsim = 10000)\nsimulated_values = as.data.frame(simulated_values)\nsimulated_values$T2M = wd_60_80$T2M\nt = predict.gam(modelt, type = \"response\")\n\nt = as.data.frame(t)\ntestt = as.data.frame(testt)\n\n```\n\n# LOOCV FS\n\n## Confusion matrix\n\n```{r}\n\nlibrary(mgcv)\nlibrary(betareg)\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.25, 1, 0))\n\n#wd_60_802$level1 = as.factor(wd_60_802$level1)\n\n# Lista para armazenar os resultados\nresults <- list()\n\n# Loop sobre cada id\nunique_ids <- unique(wd_60_802$id)  # Identificar todos os ids únicos\nfor (i in unique_ids) {\n  \n  # Separar treino e teste\n  traint <- wd_60_802 %>% filter(id != i)  # Todos os outros ids\n  testt <- wd_60_802 %>% filter(id == i)  # Apenas o id atual\n  \n  # Ajustar o modelo\n  modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 40) +\n      s(days_difference, by = level1, bs = \"fs\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 40) +\n      s(DPD, by = level1, bs = \"fs\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = traint,\n    method = \"REML\")\n  \n  \n  # Fazer predição para o conjunto de teste\n  predt <- predict.gam(modelt, newdata = testt, type = \"response\")\n  \n  # Compilar os resultados (observado vs. predito)\n  results[[as.character(i)]] <- data.frame(\n    id = testt$id,\n    observed = testt$epidemic,\n    predicted = predt\n  )\n}\n\n# Combinar todos os resultados em um único dataframe\nfinal_results <- do.call(rbind, results)\n\n# Visualizar os primeiros resultados\nhead(final_results)\n\n\n\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$predicted            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$predicted  > 0.59)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n```\n\n## Without confusion matrix\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 40) +\n      s(days_difference, by = level1, bs = \"fs\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 40) +\n      s(DPD, by = level1, bs = \"fs\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60)+\n      s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = train,\n    method = \"REML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n## Total\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = sum(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.25, 1, 0))\n\n\nmodelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'cr', k = 40) +\n      s(days_difference, by = level1, bs = \"cr\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 40) +\n      s(DPD, by = level1, bs = \"cr\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = binomial(link = \"logit\"),\n    data = wd_60_802,\n    method = \"REML\")\n\nfinal_results = predict_gam(modelt, type = \"response\")\nfinal_results = as.data.frame(final_results)\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$final_results\n            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$final_results  > 0.61)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n\n```\n\n# LOOCV CR\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- gam(\n    epidemic ~ s(T2M_MIN, by = level1, bs = 'fs', k = 25) +\n      s(days_difference, by = level1, bs = \"fs\", k = 25)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"fs\", k = 25) +\n      s(T2M, PRECTOTCORR, by = level1, bs = \"tp\", k = 30)+\n      s(PRECTOTCORR, by = level1, bs = \"fs\", k = 25) +\n      s(DPD, by = level1, bs = \"fs\", k = 25)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 30),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 30),\n    family = binomial(link = \"logit\"),\n    data = train,\n    method = \"REML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# Random forest\n\n```{r}\nlibrary(randomForest)\n\nrf<- randomForest(as.factor(epidemic) ~ T2M + T2M_MAX + T2M_MIN + RH2M + days_difference + lat + lon + DPD + PRECTOTCORR, data = wd_60_802, importance = TRUE, ntree = 100)\n\nrf<- randomForest(mean_sev~ T2M + T2M_MAX + T2M_MIN + RH2M + days_difference + lat + lon + DPD + PRECTOTCORR, data = wd_60_802, importance = TRUE, ntree = 100)\n\nvarImpPlot(rf)\nimportance(rf)\n\n# Plotar a importância com customizações\nvarImpPlot(rf, \n           type = 1,         # Use '1' para Mean Decrease Accuracy ou '2' para Mean Decrease Gini\n           main = \"Importância das Variáveis - Random Forest\",\n           col = \"blue\",     # Cor das barras\n           cex = 0.8)        # Tamanho do texto\n\n```\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- randomForest(epidemic ~ T2M + T2M_MAX + T2M_MIN + \n                             RH2M + days_difference + lat + lon + DPD +\n                             PRECTOTCORR, data = train, importance = TRUE, ntree = 100)\n\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# LOOCV Mean sev\n\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days -10 & days <= 60)\n\n\nset.seed(123)\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1)\n    )\n\n\n\n# Lista para armazenar os resultados\nresults <- list()\n\n# Loop sobre cada id\nunique_ids <- unique(wd_60_802$id)  # Identificar todos os ids únicos\nfor (i in unique_ids) {\n  \n  # Separar treino e teste\n  traint <- wd_60_802 %>% filter(id != i)  # Todos os outros ids\n  testt <- wd_60_802 %>% filter(id == i)  # Apenas o id atual\n  \n  # Ajustar o modelo\n  modelt <- gam(\n    mean_sev ~ s(T2M_MIN, by = level1, bs = 'cr', k = 40) +\n      s(days_difference, by = level1, bs = \"cr\", k = 40)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX, by = level1, bs = \"cr\", k = 40) +\n      s(PRECTOTCORR, by = level1, bs = \"cr\", k = 40) +\n      s(DPD, by = level1, bs = \"cr\", k = 40)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M, by = level1, bs = \"tp\", k = 60)+\n      s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = betar(),\n    data = traint,\n    method = \"REML\")\n  \n  \n  # Fazer predição para o conjunto de teste\n  predt <- predict.gam(modelt, newdata = testt, type = \"response\")\n  \n  # Compilar os resultados (observado vs. predito)\n  results[[as.character(i)]] <- data.frame(\n    id = testt$id,\n    observed = testt$mean_sev,\n    predicted = predt\n  )\n}\n\n# Combinar todos os resultados em um único dataframe\nfinal_results <- do.call(rbind, results)\n\n# Visualizar os primeiros resultados\nhead(final_results)\n\n\n\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$mean_sev,   # Valores observados (0 ou 1)\n  Predicted = final_results$predicted            # Probabilidades preditas pelo modelo\n)\n\ndat_rf_05 %>% \n  ggplot(aes(Observed, Predicted))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)\n```\n\n```{r}\nlibrary(mgcv)\nlibrary(MuMIn)\ninstall.packages(\"MuMIn\")\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nmodelo <- gam( mean_sev  ~s(RH2M, k = 10) + s(T2M_MAX, k = 10) +s(T2M_MIN, k = 10) + s(DPD, k = 10) + s(lat, k = 10) + s(lon, k = 10) + s(year1, k = 10), family = betar(), data = weather_data ) \n\n\nmodelo <- gam(\n  mean_sev  ~s(days, k = 10,bs='ad') + s(RH2M, k = 10,bs='ad') + s(T2M_MAX, k = 10,bs='ad') +s(T2M_MIN, k = 10,bs='ad') + s(PRECTOTCORR, k = 10,bs='ad')+ s(DPD, k = 10,bs='ad') + s(lat, k = 10,bs='ad') + s(lon, k = 10,bs='ad') + s(year1, k = 10,bs='ad'),\n  family = betar(),\n  data = weather_data\n)\n\nsummary(modelo)\nk.check(modelo)\ngam.check(modelo)\nplot(modelo, select = 7)\nvis.gam(modelo, view = c(\"DPD\",\"T2M_MIN\"), plot.type = \"contour\")\nplot(modelo, residuals = TRUE)\n```\n\n```{r}\nmodelo2 <- gam(\n  mean_sev~s(RH2M, k = 9,bs='fs', m = 1) + s(T2M_MAX, k = 9,bs='fs', m = 1) +s(T2M_MIN, k = 9,bs='fs', m = 1) + s(lat, k = 9,bs='fs', m = 1) + s(lon, k = 9,bs='fs', m = 1) + s(year1, k = 9,bs='fs', m = 1) + s(PRECTOTCORR, k = 9, bs = \"fs\", m = 1),\n  family = betar(),\n  data = weather_data,\n  method = \"REML\")\n\n# Crie a grade de valores para interpolação\nnew_data <- expand.grid(\n  RH2M = seq(min(weather_data$RH2M, na.rm = TRUE), max(weather_data$RH2M, na.rm = TRUE), length.out = 10),\n  T2M_MAX = seq(min(weather_data$T2M_MAX, na.rm = TRUE), max(weather_data$T2M_MAX, na.rm = TRUE), length.out = 10),\n  T2M_MIN = seq(min(weather_data$T2M_MIN, na.rm = TRUE), max(weather_data$T2M_MIN, na.rm = TRUE), length.out = 10),\n  lat = seq(min(weather_data$lat, na.rm = TRUE), max(weather_data$lat, na.rm = TRUE), length.out = 10),\n  lon = seq(min(weather_data$lon, na.rm = TRUE), max(weather_data$lon, na.rm = TRUE), length.out = 10),\n  year1 = seq(min(weather_data$year1, na.rm = TRUE), max(weather_data$year1, na.rm = TRUE), length.out = 10),\n  PRECTOTCORR = seq(min(weather_data$PRECTOTCORR, na.rm = TRUE), max(weather_data$PRECTOTCORR, na.rm = TRUE), length.out = 10)\n)\n\ngc()\n\nnew_data$predicted <- predict(modelo2, newdata = new_data, type = \"response\")\n\ngc()\n\nnew_data2 = new_data %>% \n  group_by(year1) %>% \n  summarise(\n    \n    RH2M = mean(RH2M),\n    T2M_MAX = mean(T2M_MAX),\n    predicted = mean(predicted)\n  )\n\n\nggplot(new_data, aes(x = year1, y = T2M_MIN, fill = predicted)) +\n  geom_tile() +\n  scale_fill_viridis_d(option = \"C\") + # Mapa de cores (ou escolha outra paleta)\n  labs(\n    title = \"Efeito Conjunto: RH2M e days_difference\",\n    x = \"RH2M\",\n    y = \"days_difference\",\n    fill = \"Severidade\"\n  ) +\n  theme_minimal()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"prediction.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title":"prediction"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}