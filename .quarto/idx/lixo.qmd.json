{"title":"Untitled","markdown":{"yaml":{"title":"Untitled","format":"html","editor":"visual"},"headingText":"PREDICTION","containsRefs":false,"markdown":"\n\n\n## 0 to 60\n\n```{r}\n\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\ntrain_0_60 <- sample(1:nrow(wd_0_60), 0.95 * nrow(wd_0_60)) \n\n\ntrain_data_0_60 <- wd_0_60[train_0_60, ]\ntest_data_0_60 <- wd_0_60[-train_0_60, ]\n```\n\n```{r}\nmodel_0_60 = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = wd_0_60,\n  method = \"REML\")\n\ngc()\n```\n\n```{r}\nsummary(model_0_60)\ngam.check(model_0_60)\nAIC(model_0_60)\nBIC(model_0_60)\n```\n\n```{r}\nmodel_0_60_pf = gam(\n  mean_sev~s(T2M_MIN,by = level1, bs='cr', k =100) +\n    s(lat, bs = \"cr\", k = 30)+\n    s(days_difference,by = level1, bs = \"cr\", k =60)+\n    s(T2M,RH2M,by = level1,bs = 'tp', k =100)+\n    s(T2M_MAX,by = level1,bs = \"cr\", k = 100)+\n    s(PRECTOTCORR,by = level1,bs = \"cr\", k = 100)+\n    s(DPD,by = level1,bs = \"cr\", k = 100),\n  family = betar(),\n  data = train_data_0_60,\n  method = \"REML\")\n\ngc()\n\n\npred_0_60 = predict.gam(model_0_60_pf, newdata = test_data_0_60, type = \"response\")\npred_0_60 = as.data.frame(pred_0_60)\ntest_data_0_60 = as.data.frame(test_data_0_60)\nCCC_0_60 <- epi.ccc(test_data_0_60$mean_sev, pred_0_60$pred_0_60)\nprint(CCC_0_60$rho.c) \n\n\nrhoc_0_60 <- CCC_0_60$rho.c   \nCb_0_60  <- CCC_0_60$C.b     \n\n\nrho_0_60 <- rhoc_0_60 / Cb_0_60\nrho_0_60\n\n# Extraindo os valores observados e preditos\nobserved <- test_data_0_60$mean_sev  # Substitua pelo nome da sua variável resposta\npredicted <- pred_0_60$pred_0_60     # Ou o nome correto da coluna dos valores preditos\n\n# Calculando o RMSE\nrmse <- sqrt(mean((observed - predicted)^2))\n\n# Exibindo o RMSE\nprint(rmse)\n\n\n\ntest_data_0_60$pred = pred_0_60$pred_0_60\n\ntest_data_0_60 %>% \n  filter(!mean_sev >= 0.7) %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)+\n  scale_x_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  scale_y_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))+\n  labs(x = \"Observed (%)\",\n       y = \"Predicted (%)\")\n```\n\n```{r}\n\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\ntrain_0_60 <- sample(1:nrow(wd_0_60), 0.95 * nrow(wd_0_60)) \n\n\ntrain_data_0_60 <- wd_0_60[train_0_60, ]\ntest_data_0_60 <- wd_0_60[-train_0_60, ]\n\n\ngbm.fit = gbm(mean_sev ~ (T2M_MAX + T2M_MIN + T2M:RH2M + days_difference):level1,\n              data = train_data_0_60,\n              distribution = \"gaussian\",\n              n.trees = 783,\n              interaction.depth = 10,\n              shrinkage = 0.1,\n              cv.folds = 10,\n              n.cores = NULL, # will use all cores by default\n              verbose = FALSE)\nprint(gbm.fit)\n\nbest_trees_interaction <- gbm.perf(gbm.fit, method = \"cv\")\n\n\npred = predict(gbm.fit, newdata = test_data_0_60, ntrees = 5000 )\npred = as.data.frame(pred)\n\nCCC_0_60 <- epi.ccc(test_data_0_60$mean_sev, pred$pred)\n\nprint(CCC_0_60$rho.c) \n\n\nrhoc_0_60 <- CCC_0_60$rho.c   \nCb_0_60  <- CCC_0_60$C.b     \n\n\nrho_0_60 <- rhoc_0_60 / Cb_0_60\nrho_0_60\n\n\nobserved <- test_data_0_60$mean_sev  # Substitua pelo nome da sua variável resposta\npredicted <- pred$pred     # Ou o nome correto da coluna dos valores preditos\n\n# Calculando o RMSE\nrmse <- sqrt(mean((observed - predicted)^2))\n\n# Exibindo o RMSE\nprint(rmse)\n\ntest_data_0_60$pred = pred$pred\n\n\ntest_data_0_60 %>% \n  filter(!mean_sev >= 0.7) %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)+\n  scale_x_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  scale_y_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))+\n  labs(x = \"Observed (%)\",\n       y = \"Predicted (%)\")\n\n\nsummary(\n  gbm.fit, \n  #cBars = 10,\n  method = relative.influence\n)\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_60 <- smooth_estimates(model_0_60, smooth = \"s(days_difference)\")\neffects_t2m_max_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_60 <- smooth_estimates(model_0_60, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_60 <- smooth_estimates(model_0_60, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_60 <- smooth_estimates(model_0_60, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_60$upper <- effects_t2m_rh2m_0_60$.estimate + 1.96 * effects_t2m_rh2m_0_60$.se  \neffects_t2m_rh2m_0_60$lower <- effects_t2m_rh2m_0_60$.estimate - 1.96 * effects_t2m_rh2m_0_60$.se \n\n# T2M MAX\n\neffects_t2m_max_0_60$upper <- effects_t2m_max_0_60$.estimate + 1.96 * effects_t2m_max_0_60$.se \neffects_t2m_max_0_60$lower <- effects_t2m_max_0_60$.estimate - 1.96 * effects_t2m_max_0_60$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_60$upper <- effects_t2m_min_0_60$.estimate + 1.96 * effects_t2m_min_0_60$.se \neffects_t2m_min_0_60$lower <- effects_t2m_min_0_60$.estimate - 1.96 * effects_t2m_min_0_60$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_60$upper <- effects_PRECTOTCORR_0_60$.estimate + 1.96 * effects_PRECTOTCORR_0_60$.se \neffects_PRECTOTCORR_0_60$lower <- effects_PRECTOTCORR_0_60$.estimate - 1.96 * effects_PRECTOTCORR_0_60$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_60$upper <- effects_latlon_0_60$.estimate + 1.96 * effects_latlon_0_60$.se \neffects_latlon_0_60$lower <- effects_latlon_0_60$.estimate - 1.96 * effects_latlon_0_60$.se\n\n\n# Windown\n\n\neffects_days_0_60$upper <- effects_days_0_60$.estimate + 1.96 * effects_days_0_60$.se\neffects_days_0_60$lower <- effects_days_0_60$.estimate - 1.96 * effects_days_0_60$.se\n\n# DPD\n\n\neffects_dpd_0_60$upper <- effects_dpd_0_60$.estimate + 1.96 * effects_dpd_0_60$.se\neffects_dpd_0_60$lower <- effects_dpd_0_60$.estimate - 1.96 * effects_dpd_0_60$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_60$estimate2 = (exp(effects_t2m_rh2m_0_60$.estimate) / (1 + exp(effects_t2m_rh2m_0_60$.estimate)))\neffects_t2m_max_0_60$estimate2 = (exp(effects_t2m_max_0_60$.estimate) / (1 + exp(effects_t2m_max_0_60$.estimate)))\neffects_t2m_min_0_60$estimate2 = (exp(effects_t2m_min_0_60$.estimate) / (1 + exp(effects_t2m_min_0_60$.estimate)))\neffects_latlon_0_60$estimate2 = (exp(effects_latlon_0_60$.estimate) / (1 + exp(effects_latlon_0_60$.estimate)))\neffects_days_0_60$estimate2 = (exp(effects_days_0_60$.estimate) / (1 + exp(effects_days_0_60$.estimate)))\neffects_PRECTOTCORR_0_60$estimate2 = (exp(effects_PRECTOTCORR_0_60$.estimate) / (1 + exp(effects_PRECTOTCORR_0_60$.estimate)))\neffects_dpd_0_60$estimate2 = (exp(effects_dpd_0_60$.estimate) / (1 + exp(effects_dpd_0_60$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_60$upper = (exp(effects_t2m_rh2m_0_60$upper) / (1 + exp(effects_t2m_rh2m_0_60$upper)))\neffects_t2m_rh2m_0_60$lower = (exp(effects_t2m_rh2m_0_60$lower) / (1 + exp(effects_t2m_rh2m_0_60$lower)))\neffects_t2m_rh2m_0_60$.se = (exp(effects_t2m_rh2m_0_60$.se) / (1 + exp(effects_t2m_rh2m_0_60$.se)))\n\neffects_t2m_rh2m_0_60$.by = NULL\neffects_t2m_rh2m_0_60$.type = NULL\neffects_t2m_rh2m_0_60$.estimate = NULL\neffects_t2m_0_60 = effects_t2m_rh2m_0_60\neffects_rh2m_0_60 = effects_t2m_rh2m_0_60\neffects_t2m_0_60$.smooth = NULL\neffects_rh2m_0_60$.smooth = NULL\n\neffects_t2m_0_60$RH2M = NULL\neffects_t2m_0_60$variable = \"T2M\"\n\neffects_rh2m_0_60$T2M = NULL\neffects_rh2m_0_60$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_60$upper = (exp(effects_t2m_max_0_60$upper) / (1 + exp(effects_t2m_max_0_60$upper)))\neffects_t2m_max_0_60$lower = (exp(effects_t2m_max_0_60$lower) / (1 + exp(effects_t2m_max_0_60$lower)))\neffects_t2m_max_0_60$.se = (exp(effects_t2m_max_0_60$.se) / (1 + exp(effects_t2m_max_0_60$.se)))\n\neffects_t2m_max_0_60$.by = NULL\neffects_t2m_max_0_60$.type = NULL\neffects_t2m_max_0_60$.estimate = NULL\neffects_t2m_max_0_60$.smooth = NULL\neffects_t2m_max_0_60$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_60$upper = (exp(effects_t2m_min_0_60$upper) / (1 + exp(effects_t2m_min_0_60$upper)))\neffects_t2m_min_0_60$lower = (exp(effects_t2m_min_0_60$lower) / (1 + exp(effects_t2m_min_0_60$lower)))\neffects_t2m_min_0_60$.se = (exp(effects_t2m_min_0_60$.se) / (1 + exp(effects_t2m_min_0_60$.se)))\n\neffects_t2m_min_0_60$.by = NULL\neffects_t2m_min_0_60$.type = NULL\neffects_t2m_min_0_60$.estimate = NULL\neffects_t2m_min_0_60$.smooth = NULL\neffects_t2m_min_0_60$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_60$upper = (exp(effects_latlon_0_60$upper) / (1 + exp(effects_latlon_0_60$upper)))\neffects_latlon_0_60$lower = (exp(effects_latlon_0_60$lower) / (1 + exp(effects_latlon_0_60$lower)))\neffects_latlon_0_60$.se = (exp(effects_latlon_0_60$.se) / (1 + exp(effects_latlon_0_60$.se)))\n\neffects_latlon_0_60$.by = NULL\neffects_latlon_0_60$.type = NULL\neffects_latlon_0_60$.estimate = NULL\neffects_lat_0_60 = effects_latlon_0_60\neffects_lon_0_60 = effects_latlon_0_60\neffects_lat_0_60$.smooth = NULL\neffects_lon_0_60$.smooth = NULL\n\neffects_lat_0_60$lon = NULL\neffects_lat_0_60$variable = \"Latitude\"\n\neffects_lon_0_60$lat = NULL\neffects_lon_0_60$variable = \"Longitude\"\n\ncolnames(effects_lat_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_60$upper = (exp(effects_days_0_60$upper) / (1 + exp(effects_days_0_60$upper)))\neffects_days_0_60$lower = (exp(effects_days_0_60$lower) / (1 + exp(effects_days_0_60$lower)))\neffects_days_0_60$.se = (exp(effects_days_0_60$.se) / (1 + exp(effects_days_0_60$.se)))\n\neffects_days_0_60$.by = NULL\neffects_days_0_60$.type = NULL\neffects_days_0_60$.estimate = NULL\neffects_days_0_60$.smooth = NULL\neffects_days_0_60$variable = \"Days\"\n\ncolnames(effects_days_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_60$upper = (exp(effects_PRECTOTCORR_0_60$upper) / (1 + exp(effects_PRECTOTCORR_0_60$upper)))\neffects_PRECTOTCORR_0_60$lower = (exp(effects_PRECTOTCORR_0_60$lower) / (1 + exp(effects_PRECTOTCORR_0_60$lower)))\neffects_PRECTOTCORR_0_60$.se = (exp(effects_PRECTOTCORR_0_60$.se) / (1 + exp(effects_PRECTOTCORR_0_60$.se)))\n\neffects_PRECTOTCORR_0_60$.by = NULL\neffects_PRECTOTCORR_0_60$.type = NULL\neffects_PRECTOTCORR_0_60$.estimate = NULL\neffects_PRECTOTCORR_0_60$.smooth = NULL\neffects_PRECTOTCORR_0_60$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_60$upper = (exp(effects_dpd_0_60$upper) / (1 + exp(effects_dpd_0_60$upper)))\neffects_dpd_0_60$lower = (exp(effects_dpd_0_60$lower) / (1 + exp(effects_dpd_0_60$lower)))\neffects_dpd_0_60$.se = (exp(effects_dpd_0_60$.se) / (1 + exp(effects_dpd_0_60$.se)))\n\neffects_dpd_0_60$.by = NULL\neffects_dpd_0_60$.type = NULL\neffects_dpd_0_60$.estimate = NULL\neffects_dpd_0_60$.smooth = NULL\neffects_dpd_0_60$variable = \"DPD\"\n\ncolnames(effects_dpd_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_60 = rbind(effects_t2m_0_60,effects_rh2m_0_60,effects_t2m_max_0_60,effects_t2m_min_0_60,\n                effects_lat_0_60,effects_lon_0_60,effects_days_0_60,effects_PRECTOTCORR_0_60,effects_dpd_0_60)\n\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_60 <- pf_0_60 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      labs(x = unique(df$variable),\n           y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_60 <- wrap_plots(plot_list_0_60, ncol = 3)\ncombined_plot_0_60\n\nggsave(\"fig/partial_effect_0_60.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_60_pred = predict.gam(model_0_60,se.fit = T, type = \"response\")\npred_0_60_pred = as.data.frame(pred_0_60_pred)\n\n\npred_0_60_pred$T2M = wd_0_60$T2M\npred_0_60_pred$RH2M = wd_0_60$RH2M\npred_0_60_pred$T2M_MIN = wd_0_60$T2M_MIN\npred_0_60_pred$T2M_MAX = wd_0_60$T2M_MAX\npred_0_60_pred$days_difference = wd_0_60$days_difference\npred_0_60_pred$PRECTOTCORR = wd_0_60$PRECTOTCORR\npred_0_60_pred$lat = wd_0_60$lat\npred_0_60_pred$lon = wd_0_60$lon\npred_0_60_pred$DPD = wd_0_60$DPD\n\ngc()\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_60_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_60 <- wrap_plots(g_0_60, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-60\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_60.png\", plot_0_60, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_60\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n      geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_60 <- wrap_plots(g_0_60, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-60 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_60_highlighted.png\", plot_0_60, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_60)\n\n```\n\n## 0 to 90\n\n```{r}\n\nwd_0_90 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 90)\n\n\ntrain_0_90 <- sample(1:nrow(wd_0_90), 0.95 * nrow(wd_0_90)) \n\n\ntrain_data_0_90 <- wd_0_90[train_0_90, ]\ntest_data_0_90 <- wd_0_90[-train_0_90, ]\n```\n\n```{r}\nmodel_0_90 = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = wd_0_90,\n  method = \"REML\")\n\ngc()\n```\n\n```{r}\nsummary(model_0_90)\ngam.check(model_0_90)\nAIC(model_0_90)\nBIC(model_0_90)\n```\n\n```{r}\nmodel_0_90_pf = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_0_90,\n  method = \"REML\")\n\ngc()\n\n\npred_0_90 = predict.gam(model_0_90_pf, newdata = test_data_0_90, type = \"response\")\npred_0_90 = as.data.frame(pred_0_90)\ntest_data_0_90 = as.data.frame(test_data_0_90)\nCCC_0_90 <- epi.ccc(test_data_0_90$mean_sev, pred_0_90$pred_0_90)\nprint(CCC_0_90$rho.c) \n\n\nrhoc_0_90 <- CCC_0_90$rho.c   \nCb_0_90  <- CCC_0_90$C.b     \n\n\nrho_0_90 <- rhoc_0_90 / Cb_0_90\nrho_0_90\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_90 <- smooth_estimates(model_0_90, smooth = \"s(days_difference)\")\neffects_t2m_max_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_90 <- smooth_estimates(model_0_90, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_90 <- smooth_estimates(model_0_90, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_90 <- smooth_estimates(model_0_90, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_90$upper <- effects_t2m_rh2m_0_90$.estimate + 1.96 * effects_t2m_rh2m_0_90$.se  \neffects_t2m_rh2m_0_90$lower <- effects_t2m_rh2m_0_90$.estimate - 1.96 * effects_t2m_rh2m_0_90$.se \n\n# T2M MAX\n\neffects_t2m_max_0_90$upper <- effects_t2m_max_0_90$.estimate + 1.96 * effects_t2m_max_0_90$.se \neffects_t2m_max_0_90$lower <- effects_t2m_max_0_90$.estimate - 1.96 * effects_t2m_max_0_90$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_90$upper <- effects_t2m_min_0_90$.estimate + 1.96 * effects_t2m_min_0_90$.se \neffects_t2m_min_0_90$lower <- effects_t2m_min_0_90$.estimate - 1.96 * effects_t2m_min_0_90$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_90$upper <- effects_PRECTOTCORR_0_90$.estimate + 1.96 * effects_PRECTOTCORR_0_90$.se \neffects_PRECTOTCORR_0_90$lower <- effects_PRECTOTCORR_0_90$.estimate - 1.96 * effects_PRECTOTCORR_0_90$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_90$upper <- effects_latlon_0_90$.estimate + 1.96 * effects_latlon_0_90$.se \neffects_latlon_0_90$lower <- effects_latlon_0_90$.estimate - 1.96 * effects_latlon_0_90$.se\n\n\n# Windown\n\n\neffects_days_0_90$upper <- effects_days_0_90$.estimate + 1.96 * effects_days_0_90$.se\neffects_days_0_90$lower <- effects_days_0_90$.estimate - 1.96 * effects_days_0_90$.se\n\n# DPD\n\n\neffects_dpd_0_90$upper <- effects_dpd_0_90$.estimate + 1.96 * effects_dpd_0_90$.se\neffects_dpd_0_90$lower <- effects_dpd_0_90$.estimate - 1.96 * effects_dpd_0_90$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_90$estimate2 = (exp(effects_t2m_rh2m_0_90$.estimate) / (1 + exp(effects_t2m_rh2m_0_90$.estimate)))\neffects_t2m_max_0_90$estimate2 = (exp(effects_t2m_max_0_90$.estimate) / (1 + exp(effects_t2m_max_0_90$.estimate)))\neffects_t2m_min_0_90$estimate2 = (exp(effects_t2m_min_0_90$.estimate) / (1 + exp(effects_t2m_min_0_90$.estimate)))\neffects_latlon_0_90$estimate2 = (exp(effects_latlon_0_90$.estimate) / (1 + exp(effects_latlon_0_90$.estimate)))\neffects_days_0_90$estimate2 = (exp(effects_days_0_90$.estimate) / (1 + exp(effects_days_0_90$.estimate)))\neffects_PRECTOTCORR_0_90$estimate2 = (exp(effects_PRECTOTCORR_0_90$.estimate) / (1 + exp(effects_PRECTOTCORR_0_90$.estimate)))\neffects_dpd_0_90$estimate2 = (exp(effects_dpd_0_90$.estimate) / (1 + exp(effects_dpd_0_90$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_90$upper = (exp(effects_t2m_rh2m_0_90$upper) / (1 + exp(effects_t2m_rh2m_0_90$upper)))\neffects_t2m_rh2m_0_90$lower = (exp(effects_t2m_rh2m_0_90$lower) / (1 + exp(effects_t2m_rh2m_0_90$lower)))\neffects_t2m_rh2m_0_90$.se = (exp(effects_t2m_rh2m_0_90$.se) / (1 + exp(effects_t2m_rh2m_0_90$.se)))\n\neffects_t2m_rh2m_0_90$.by = NULL\neffects_t2m_rh2m_0_90$.type = NULL\neffects_t2m_rh2m_0_90$.estimate = NULL\neffects_t2m_0_90 = effects_t2m_rh2m_0_90\neffects_rh2m_0_90 = effects_t2m_rh2m_0_90\neffects_t2m_0_90$.smooth = NULL\neffects_rh2m_0_90$.smooth = NULL\n\neffects_t2m_0_90$RH2M = NULL\neffects_t2m_0_90$variable = \"T2M\"\n\neffects_rh2m_0_90$T2M = NULL\neffects_rh2m_0_90$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_90$upper = (exp(effects_t2m_max_0_90$upper) / (1 + exp(effects_t2m_max_0_90$upper)))\neffects_t2m_max_0_90$lower = (exp(effects_t2m_max_0_90$lower) / (1 + exp(effects_t2m_max_0_90$lower)))\neffects_t2m_max_0_90$.se = (exp(effects_t2m_max_0_90$.se) / (1 + exp(effects_t2m_max_0_90$.se)))\n\neffects_t2m_max_0_90$.by = NULL\neffects_t2m_max_0_90$.type = NULL\neffects_t2m_max_0_90$.estimate = NULL\neffects_t2m_max_0_90$.smooth = NULL\neffects_t2m_max_0_90$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_90$upper = (exp(effects_t2m_min_0_90$upper) / (1 + exp(effects_t2m_min_0_90$upper)))\neffects_t2m_min_0_90$lower = (exp(effects_t2m_min_0_90$lower) / (1 + exp(effects_t2m_min_0_90$lower)))\neffects_t2m_min_0_90$.se = (exp(effects_t2m_min_0_90$.se) / (1 + exp(effects_t2m_min_0_90$.se)))\n\neffects_t2m_min_0_90$.by = NULL\neffects_t2m_min_0_90$.type = NULL\neffects_t2m_min_0_90$.estimate = NULL\neffects_t2m_min_0_90$.smooth = NULL\neffects_t2m_min_0_90$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_90$upper = (exp(effects_latlon_0_90$upper) / (1 + exp(effects_latlon_0_90$upper)))\neffects_latlon_0_90$lower = (exp(effects_latlon_0_90$lower) / (1 + exp(effects_latlon_0_90$lower)))\neffects_latlon_0_90$.se = (exp(effects_latlon_0_90$.se) / (1 + exp(effects_latlon_0_90$.se)))\n\neffects_latlon_0_90$.by = NULL\neffects_latlon_0_90$.type = NULL\neffects_latlon_0_90$.estimate = NULL\neffects_lat_0_90 = effects_latlon_0_90\neffects_lon_0_90 = effects_latlon_0_90\neffects_lat_0_90$.smooth = NULL\neffects_lon_0_90$.smooth = NULL\n\neffects_lat_0_90$lon = NULL\neffects_lat_0_90$variable = \"Latitude\"\n\neffects_lon_0_90$lat = NULL\neffects_lon_0_90$variable = \"Longitude\"\n\ncolnames(effects_lat_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_90$upper = (exp(effects_days_0_90$upper) / (1 + exp(effects_days_0_90$upper)))\neffects_days_0_90$lower = (exp(effects_days_0_90$lower) / (1 + exp(effects_days_0_90$lower)))\neffects_days_0_90$.se = (exp(effects_days_0_90$.se) / (1 + exp(effects_days_0_90$.se)))\n\neffects_days_0_90$.by = NULL\neffects_days_0_90$.type = NULL\neffects_days_0_90$.estimate = NULL\neffects_days_0_90$.smooth = NULL\neffects_days_0_90$variable = \"Days\"\n\ncolnames(effects_days_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_90$upper = (exp(effects_PRECTOTCORR_0_90$upper) / (1 + exp(effects_PRECTOTCORR_0_90$upper)))\neffects_PRECTOTCORR_0_90$lower = (exp(effects_PRECTOTCORR_0_90$lower) / (1 + exp(effects_PRECTOTCORR_0_90$lower)))\neffects_PRECTOTCORR_0_90$.se = (exp(effects_PRECTOTCORR_0_90$.se) / (1 + exp(effects_PRECTOTCORR_0_90$.se)))\n\neffects_PRECTOTCORR_0_90$.by = NULL\neffects_PRECTOTCORR_0_90$.type = NULL\neffects_PRECTOTCORR_0_90$.estimate = NULL\neffects_PRECTOTCORR_0_90$.smooth = NULL\neffects_PRECTOTCORR_0_90$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_90$upper = (exp(effects_dpd_0_90$upper) / (1 + exp(effects_dpd_0_90$upper)))\neffects_dpd_0_90$lower = (exp(effects_dpd_0_90$lower) / (1 + exp(effects_dpd_0_90$lower)))\neffects_dpd_0_90$.se = (exp(effects_dpd_0_90$.se) / (1 + exp(effects_dpd_0_90$.se)))\n\neffects_dpd_0_90$.by = NULL\neffects_dpd_0_90$.type = NULL\neffects_dpd_0_90$.estimate = NULL\neffects_dpd_0_90$.smooth = NULL\neffects_dpd_0_90$variable = \"DPD\"\n\ncolnames(effects_dpd_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_90 = rbind(effects_t2m_0_90,effects_rh2m_0_90,effects_t2m_max_0_90,effects_t2m_min_0_90,\n                effects_lat_0_90,effects_lon_0_90,effects_days_0_90,effects_PRECTOTCORR_0_90,effects_dpd_0_90)\n\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_90 <- pf_0_90 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      labs(x = unique(df$variable),\n           y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_90 <- wrap_plots(plot_list_0_90, ncol = 3)\ncombined_plot_0_90\n\nggsave(\"fig/partial_effect_0_90.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_90_pred = predict.gam(model_0_90,se.fit = T, type = \"response\")\npred_0_90_pred = as.data.frame(pred_0_90_pred)\n\n\npred_0_90_pred$T2M = wd_0_90$T2M\npred_0_90_pred$RH2M = wd_0_90$RH2M\npred_0_90_pred$T2M_MIN = wd_0_90$T2M_MIN\npred_0_90_pred$T2M_MAX = wd_0_90$T2M_MAX\npred_0_90_pred$days_difference = wd_0_90$days_difference\npred_0_90_pred$PRECTOTCORR = wd_0_90$PRECTOTCORR\npred_0_90_pred$lat = wd_0_90$lat\npred_0_90_pred$lon = wd_0_90$lon\npred_0_90_pred$DPD = wd_0_90$DPD\n\ngc()\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_90 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_90_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_90[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_90 <- wrap_plots(g_0_90, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-90\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_90.png\", plot_0_90, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_90\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_90 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_90_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_90_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n      geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_90[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_90 <- wrap_plots(g_0_90, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-90 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_90_highlighted.png\", plot_0_90, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_90)\n\n```\n\n# SCRIPT DO GAM QUE RETIREI DO CODE PRINCIPAL E SUBSTITUÍ POR INLA MODEL\n\n### Overall\n#### 0-30 | 30-60 | 60-90\n\n```{r}\nweather_data <- weather_data %>%\n  filter(!days<0) %>% \ndplyr::mutate(windows = case_when(\n    days >= 0 & days <= 30  ~ \"0_30\",\n    days >= 30 & days <= 60  ~ \"30_60\",\n    days >= 60 & days <= 90  ~ \"60_90\",\n    days >= 0 & days <= 60  ~ \"0_60\",\n    days >= 0 & days <= 90  ~ \"0_90\",\n    days >= 30 & days <= 90  ~ \"30_90\"\n  ))\n\nunique(weather_data$windows)\n```\n\n\n```{r}\nRH2M_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%   \n  dplyr::group_by(windows) %>% \n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\ndays_difference_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_dd = mean(days_difference, na.rm = TRUE),      \n    up_95 = quantile(days_difference, 0.975, na.rm = TRUE),  \n    low_95 = quantile(days_difference, 0.025, na.rm = TRUE), \n    se = sd(days_difference, na.rm = TRUE) / sqrt(n()),    \n    max_dd = max(days_difference, na.rm = TRUE),         \n    min_dd = min(days_difference, na.rm = TRUE)         \n  )\n\nlat_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_lat = mean(lat, na.rm = TRUE),      \n    up_95 = quantile(lat, 0.975, na.rm = TRUE),  \n    low_95 = quantile(lat, 0.025, na.rm = TRUE), \n    se = sd(lat, na.rm = TRUE) / sqrt(n()),    \n    max_lat = max(lat, na.rm = TRUE),         \n    min_lat = min(lat, na.rm = TRUE)         \n  )\n\n\nlon_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_lon = mean(lon, na.rm = TRUE),      \n    up_95 = quantile(lon, 0.975, na.rm = TRUE),  \n    low_95 = quantile(lon, 0.025, na.rm = TRUE), \n    se = sd(lon, na.rm = TRUE) / sqrt(n()),    \n    max_lon = max(lon, na.rm = TRUE),         \n    min_lon = min(lon, na.rm = TRUE)         \n  )\n\ngc()\n```\n#### 30-90\n\n```{r}\nRH2M_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 30 & days <= 90) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 30 & days <= 90) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n#### 0-60\n\n```{r}\nRH2M_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 60) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 0 & days <= 60) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n\n#### 0-90\n\n```{r}\nRH2M_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 0 & days <= 90) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n\n# Fitting\n\n# TESTE PREDIÇÃO\n\n## GAM\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = sum(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1),\n    year1 = mean(year1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.30, 1, 0))\n\n\nmodelt <- bam(\n    epidemic ~ s(T2M_MIN,bs = 'fs', k = 60) +\n      s(days_difference,bs = \"fs\", k = 60)+\n      #s(RH2M, bs = 'fs', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX,bs = \"fs\", k = 60) +\n      s(T2M,bs = \"fs\", k = 60) +\n      s(PRECTOTCORR,bs = \"fs\", k = 60) +\n      s(DPD,bs = \"fs\", k = 60)+\n      #s(lat, by = level1, bs = \"fs\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M,bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = quasibinomial(),\n    data = wd_60_802,\n    method = \"fREML\")\n\nfinal_results = predict_gam(modelt, type = \"response\")\nfinal_results = as.data.frame(final_results)\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$final_results\n            # Probabilidades preditas pelo modelo\n)\n#binomial(link = \"logit\")\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$final_results  > 0.64)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n```\n\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- bam(\n   epidemic ~ s(T2M_MIN,bs = 'fs', k = 60) +\n      s(days_difference,bs = \"fs\", k = 60)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX,bs = \"fs\", k = 60) +\n      s(T2M,bs = \"fs\", k = 60) +\n      s(PRECTOTCORR,bs = \"fs\", k = 60) +\n      s(DPD,bs = \"fs\", k = 60)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M,bs = \"fs\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = quasibinomial(),\n    data = train,\n    method = \"fREML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.64,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n## Random Forest\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- randomForest(epidemic ~ T2M + T2M_MAX + T2M_MIN + \n                             RH2M + days_difference + DPD +\n                             PRECTOTCORR, data = train, importance = TRUE, ntree = 100)\n\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n\n```{r}\n\nmodelt2 <- randomForest(epidemic ~ T2M + RH2M , data = wd_60_8022, importance = TRUE, ntree = 100)\n\nfinal_results2 = predict(modelt2, type = \"response\")\nfinal_results2 = as.data.frame(final_results2)\ndat_rf_052 <- data.frame(\n  ID = 1:nrow(wd_60_8022),          # Identificador único (opcional)\n  Observed = wd_60_8022$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results2$final_results2\n            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_052)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(final_results2$final_results2  > 0.50)),  mode= \"everything\",  reference = as.factor(wd_60_8022$epidemic))\ncm_rf_052\n```\n```{r}\n# Plotar a importância com customizações\nvarImpPlot(modelt2, \n           type = 1,         # Use '1' para Mean Decrease Accuracy ou '2' para Mean Decrease Gini\n           main = \"Importância das Variáveis - Random Forest\",\n           col = \"blue\",     # Cor das barras\n           cex = 0.8)  \n```\n\n\n## 0 to 20\n\n```{r}\n\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 20)\n\n\ntrain_0_20 <- sample(1:nrow(wd_0_20), 0.95 * nrow(wd_0_20)) \n  \n  \n  train_data_0_20 <- wd_0_20[train_0_20, ]\n  test_data_0_20 <- wd_0_20[-train_0_20, ]\n  \n```\n\n```{r}\nlibrary(mgcv)\nmodel_0_20 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           #s(year1, bs = \"cr\", k = 10)+\n           s(DPD, bs = \"cr\", k = 60),\n          family = betar(),\n          data = wd_0_20,\n          method = \"fREML\")\n\n\ngc()\ngratia::draw(model_0_20)\n```\n\n```{r}\nsummary(model_0_20)\ngam.check(model_0_20)\nAIC(model_0_20)\nBIC(model_0_20)\n```\n\n```{r}\n\nmodel_0_20_pf = gam(\n mean_sev~s(T2M_MIN, bs='cr', k =60) +\n          s(lat, lon, bs = \"tp\", k = 60)+\n          s(days_difference, bs = \"cr\", k =60)+\n          s(T2M,RH2M,bs = 'tp', k =60)+\n          s(T2M_MAX,bs = \"cr\", k = 60)+\n          s(PRECTOTCORR,bs = \"cr\", k = 60)+\n          s(DPD,bs = \"cr\", k = 60),\n          family = betar(),\n  data = train_data_0_20,\n  method = \"REML\")\n\ngc()\n\nlibrary(epiR)\n\npred_0_20 = predict.gam(model_0_20_pf, newdata = test_data_0_20, type = \"response\")\npred_0_20 = as.data.frame(pred_0_20)\ntest_data_0_20 = as.data.frame(test_data_0_20)\nCCC_0_20 <- epi.ccc(test_data_0_20$mean_sev, pred_0_20$pred_0_20)\nprint(CCC_0_20$rho.c) \n\n# Obter os valores do CCC e C_b\nrhoc_0_20 <- CCC_0_20$rho.c    # CCC principal\nCb_0_20  <- CCC_0_20$C.b      # Fator de correção de viés\n\n# Calcular a correlação de Pearson (rho)\nrho_0_20 <- rhoc_0_20 / Cb_0_20\n\ntest_data_0_20$pred = pred_0_20$pred_0_20\n\ntest_data_0_20 %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()\n\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_20 <- smooth_estimates(model_0_20, smooth = \"s(days_difference)\")\neffects_t2m_max_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_20 <- smooth_estimates(model_0_20, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_20 <- smooth_estimates(model_0_20, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_20 <- smooth_estimates(model_0_20, smooth = \"s(PRECTOTCORR)\")\n\n\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_20$upper <- effects_t2m_rh2m_0_20$.estimate + 1.96 * effects_t2m_rh2m_0_20$.se  \neffects_t2m_rh2m_0_20$lower <- effects_t2m_rh2m_0_20$.estimate - 1.96 * effects_t2m_rh2m_0_20$.se \n\n# T2M MAX\n\neffects_t2m_max_0_20$upper <- effects_t2m_max_0_20$.estimate + 1.96 * effects_t2m_max_0_20$.se \neffects_t2m_max_0_20$lower <- effects_t2m_max_0_20$.estimate - 1.96 * effects_t2m_max_0_20$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_20$upper <- effects_t2m_min_0_20$.estimate + 1.96 * effects_t2m_min_0_20$.se \neffects_t2m_min_0_20$lower <- effects_t2m_min_0_20$.estimate - 1.96 * effects_t2m_min_0_20$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_20$upper <- effects_PRECTOTCORR_0_20$.estimate + 1.96 * effects_PRECTOTCORR_0_20$.se \neffects_PRECTOTCORR_0_20$lower <- effects_PRECTOTCORR_0_20$.estimate - 1.96 * effects_PRECTOTCORR_0_20$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_20$upper <- effects_latlon_0_20$.estimate + 1.96 * effects_latlon_0_20$.se \neffects_latlon_0_20$lower <- effects_latlon_0_20$.estimate - 1.96 * effects_latlon_0_20$.se\n\n\n# Windown\n\n\neffects_days_0_20$upper <- effects_days_0_20$.estimate + 1.96 * effects_days_0_20$.se\neffects_days_0_20$lower <- effects_days_0_20$.estimate - 1.96 * effects_days_0_20$.se\n\n# DPD\n\n\neffects_dpd_0_20$upper <- effects_dpd_0_20$.estimate + 1.96 * effects_dpd_0_20$.se\neffects_dpd_0_20$lower <- effects_dpd_0_20$.estimate - 1.96 * effects_dpd_0_20$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_20$estimate2 = (exp(effects_t2m_rh2m_0_20$.estimate) / (1 + exp(effects_t2m_rh2m_0_20$.estimate)))\neffects_t2m_max_0_20$estimate2 = (exp(effects_t2m_max_0_20$.estimate) / (1 + exp(effects_t2m_max_0_20$.estimate)))\neffects_t2m_min_0_20$estimate2 = (exp(effects_t2m_min_0_20$.estimate) / (1 + exp(effects_t2m_min_0_20$.estimate)))\neffects_latlon_0_20$estimate2 = (exp(effects_latlon_0_20$.estimate) / (1 + exp(effects_latlon_0_20$.estimate)))\neffects_days_0_20$estimate2 = (exp(effects_days_0_20$.estimate) / (1 + exp(effects_days_0_20$.estimate)))\neffects_PRECTOTCORR_0_20$estimate2 = (exp(effects_PRECTOTCORR_0_20$.estimate) / (1 + exp(effects_PRECTOTCORR_0_20$.estimate)))\neffects_dpd_0_20$estimate2 = (exp(effects_dpd_0_20$.estimate) / (1 + exp(effects_dpd_0_20$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_20$upper = (exp(effects_t2m_rh2m_0_20$upper) / (1 + exp(effects_t2m_rh2m_0_20$upper)))\neffects_t2m_rh2m_0_20$lower = (exp(effects_t2m_rh2m_0_20$lower) / (1 + exp(effects_t2m_rh2m_0_20$lower)))\neffects_t2m_rh2m_0_20$.se = (exp(effects_t2m_rh2m_0_20$.se) / (1 + exp(effects_t2m_rh2m_0_20$.se)))\n\neffects_t2m_rh2m_0_20$.by = NULL\neffects_t2m_rh2m_0_20$.type = NULL\neffects_t2m_rh2m_0_20$.estimate = NULL\neffects_t2m_0_20 = effects_t2m_rh2m_0_20\neffects_rh2m_0_20 = effects_t2m_rh2m_0_20\neffects_t2m_0_20$.smooth = NULL\neffects_rh2m_0_20$.smooth = NULL\n\neffects_t2m_0_20$RH2M = NULL\neffects_t2m_0_20$variable = \"T2M\"\n\neffects_rh2m_0_20$T2M = NULL\neffects_rh2m_0_20$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_20$upper = (exp(effects_t2m_max_0_20$upper) / (1 + exp(effects_t2m_max_0_20$upper)))\neffects_t2m_max_0_20$lower = (exp(effects_t2m_max_0_20$lower) / (1 + exp(effects_t2m_max_0_20$lower)))\neffects_t2m_max_0_20$.se = (exp(effects_t2m_max_0_20$.se) / (1 + exp(effects_t2m_max_0_20$.se)))\n\neffects_t2m_max_0_20$.by = NULL\neffects_t2m_max_0_20$.type = NULL\neffects_t2m_max_0_20$.estimate = NULL\neffects_t2m_max_0_20$.smooth = NULL\neffects_t2m_max_0_20$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_20$upper = (exp(effects_t2m_min_0_20$upper) / (1 + exp(effects_t2m_min_0_20$upper)))\neffects_t2m_min_0_20$lower = (exp(effects_t2m_min_0_20$lower) / (1 + exp(effects_t2m_min_0_20$lower)))\neffects_t2m_min_0_20$.se = (exp(effects_t2m_min_0_20$.se) / (1 + exp(effects_t2m_min_0_20$.se)))\n\neffects_t2m_min_0_20$.by = NULL\neffects_t2m_min_0_20$.type = NULL\neffects_t2m_min_0_20$.estimate = NULL\neffects_t2m_min_0_20$.smooth = NULL\neffects_t2m_min_0_20$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_20$upper = (exp(effects_latlon_0_20$upper) / (1 + exp(effects_latlon_0_20$upper)))\neffects_latlon_0_20$lower = (exp(effects_latlon_0_20$lower) / (1 + exp(effects_latlon_0_20$lower)))\neffects_latlon_0_20$.se = (exp(effects_latlon_0_20$.se) / (1 + exp(effects_latlon_0_20$.se)))\n\neffects_latlon_0_20$.by = NULL\neffects_latlon_0_20$.type = NULL\neffects_latlon_0_20$.estimate = NULL\neffects_lat_0_20 = effects_latlon_0_20\neffects_lon_0_20 = effects_latlon_0_20\neffects_lat_0_20$.smooth = NULL\neffects_lon_0_20$.smooth = NULL\n\neffects_lat_0_20$lon = NULL\neffects_lat_0_20$variable = \"Latitude\"\n\neffects_lon_0_20$lat = NULL\neffects_lon_0_20$variable = \"Longitude\"\n\ncolnames(effects_lat_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_20$upper = (exp(effects_days_0_20$upper) / (1 + exp(effects_days_0_20$upper)))\neffects_days_0_20$lower = (exp(effects_days_0_20$lower) / (1 + exp(effects_days_0_20$lower)))\neffects_days_0_20$.se = (exp(effects_days_0_20$.se) / (1 + exp(effects_days_0_20$.se)))\n\neffects_days_0_20$.by = NULL\neffects_days_0_20$.type = NULL\neffects_days_0_20$.estimate = NULL\neffects_days_0_20$.smooth = NULL\neffects_days_0_20$variable = \"Days\"\n\ncolnames(effects_days_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_20$upper = (exp(effects_PRECTOTCORR_0_20$upper) / (1 + exp(effects_PRECTOTCORR_0_20$upper)))\neffects_PRECTOTCORR_0_20$lower = (exp(effects_PRECTOTCORR_0_20$lower) / (1 + exp(effects_PRECTOTCORR_0_20$lower)))\neffects_PRECTOTCORR_0_20$.se = (exp(effects_PRECTOTCORR_0_20$.se) / (1 + exp(effects_PRECTOTCORR_0_20$.se)))\n\neffects_PRECTOTCORR_0_20$.by = NULL\neffects_PRECTOTCORR_0_20$.type = NULL\neffects_PRECTOTCORR_0_20$.estimate = NULL\neffects_PRECTOTCORR_0_20$.smooth = NULL\neffects_PRECTOTCORR_0_20$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_20$upper = (exp(effects_dpd_0_20$upper) / (1 + exp(effects_dpd_0_20$upper)))\neffects_dpd_0_20$lower = (exp(effects_dpd_0_20$lower) / (1 + exp(effects_dpd_0_20$lower)))\neffects_dpd_0_20$.se = (exp(effects_dpd_0_20$.se) / (1 + exp(effects_dpd_0_20$.se)))\n\neffects_dpd_0_20$.by = NULL\neffects_dpd_0_20$.type = NULL\neffects_dpd_0_20$.estimate = NULL\neffects_dpd_0_20$.smooth = NULL\neffects_dpd_0_20$variable = \"DPD\"\n\ncolnames(effects_dpd_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_20 = rbind(effects_t2m_0_20,effects_rh2m_0_20,effects_t2m_max_0_20,effects_t2m_min_0_20,\n           effects_lat_0_20,effects_lon_0_20,effects_days_0_20,effects_PRECTOTCORR_0_20,effects_dpd_0_20)\n\npf_0_20 = as.data.frame(pf_0_20)\npf_0_20\nunique(pf_0_20$variable)\n\n\n\n```\n\n```{r}\npf_0_202 = pf_0_20 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_0_202 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_20 <- pf_0_20 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      #scale_y_continuous(n.breaks = 5, limits = c(0, 100))+\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_20 <- wrap_plots(plot_list_0_20, ncol = 3)\ncombined_plot_0_20\n\nggsave(\"fig/partial_effect_0_20.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_20_pred = predict.gam(model_0_20,se.fit = T, type = \"response\")\npred_0_20_pred = as.data.frame(pred_0_20_pred)\n\n\npred_0_20_pred$T2M = wd_0_20$T2M\npred_0_20_pred$RH2M = wd_0_20$RH2M\npred_0_20_pred$T2M_MIN = wd_0_20$T2M_MIN\npred_0_20_pred$T2M_MAX = wd_0_20$T2M_MAX\npred_0_20_pred$days_difference = wd_0_20$days_difference\npred_0_20_pred$PRECTOTCORR = wd_0_20$PRECTOTCORR\npred_0_20_pred$lat = wd_0_20$lat\npred_0_20_pred$lon = wd_0_20$lon\npred_0_20_pred$DPD = wd_0_20$DPD\n\nset.seed(123)\nsimu_0_20 <- simulate_gam(model_0_20, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_0_20_s <- simu_0_20 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\nsimu_0_20_s_long <- simu_0_20_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\nsimu_0_20_s_long %>% \n  #filter(!variables %in% c(\"lat\",\"lon\",\"days_difference\",\"DPD\")) %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")+\n  scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_20 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_20_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    scale_y_continuous(n.breaks = 4, limits = c(0, 80))+\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_20[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_20 <- wrap_plots(g_0_20, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-20\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_20.png\", plot_0_20, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_20\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_20 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_20_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_20_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    #scale_y_continuous(n.breaks = 4, limits = c(0, 80))+\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_20[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_20 <- wrap_plots(g_0_20, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-20 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_20_highlighted.png\", plot_0_20, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_20)\n\n```\n\n## 20 to 40\n\n```{r}\n\nwd_20_40 = weather_data %>% \n  dplyr::filter(days >= 20 & days <= 40)\n\n\ntrain_20_40 <- sample(1:nrow(wd_20_40), 0.95 * nrow(wd_20_40)) \n  \n  \n  train_data_20_40 <- wd_20_40[train_20_40, ]\n  test_data_20_40 <- wd_20_40[-train_20_40, ]\n```\n\n```{r}\nmodel_20_40 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n           data = wd_20_40,\n           method = \"fREML\")\n\ngc()\n```\n\n```{r}\nsummary(model_20_40)\ngam.check(model_20_40)\nAIC(model_20_40)\nBIC(model_20_40)\n```\n\n```{r}\nmodel_20_40_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_20_40,\n  method = \"REML\")\n\ngc()\n\n\npred_20_40 = predict.gam(model_20_40_pf, newdata = test_data_20_40, type = \"response\")\npred_20_40 = as.data.frame(pred_20_40)\ntest_data_20_40 = as.data.frame(test_data_20_40)\nCCC_20_40 <- epi.ccc(test_data_20_40$mean_sev, pred_20_40$pred_20_40)\nprint(CCC_20_40$rho.c) \n\n\nrhoc_20_40 <- CCC_20_40$rho.c   \nCb_20_40  <- CCC_20_40$C.b     \n\n\nrho_20_40 <- rhoc_20_40 / Cb_20_40\nrho_20_40\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_20_40 <- smooth_estimates(model_20_40, smooth = \"s(days_difference)\")\neffects_t2m_max_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M_MIN)\")\neffects_latlon_20_40 <- smooth_estimates(model_20_40, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M,RH2M)\")\neffects_dpd_20_40 <- smooth_estimates(model_20_40, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_20_40 <- smooth_estimates(model_20_40, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_20_40$upper <- effects_t2m_rh2m_20_40$.estimate + 1.96 * effects_t2m_rh2m_20_40$.se  \neffects_t2m_rh2m_20_40$lower <- effects_t2m_rh2m_20_40$.estimate - 1.96 * effects_t2m_rh2m_20_40$.se \n\n# T2M MAX\n\neffects_t2m_max_20_40$upper <- effects_t2m_max_20_40$.estimate + 1.96 * effects_t2m_max_20_40$.se \neffects_t2m_max_20_40$lower <- effects_t2m_max_20_40$.estimate - 1.96 * effects_t2m_max_20_40$.se  \n\n# T2M MIN\n\neffects_t2m_min_20_40$upper <- effects_t2m_min_20_40$.estimate + 1.96 * effects_t2m_min_20_40$.se \neffects_t2m_min_20_40$lower <- effects_t2m_min_20_40$.estimate - 1.96 * effects_t2m_min_20_40$.se\n\n# Rain\n\neffects_PRECTOTCORR_20_40$upper <- effects_PRECTOTCORR_20_40$.estimate + 1.96 * effects_PRECTOTCORR_20_40$.se \neffects_PRECTOTCORR_20_40$lower <- effects_PRECTOTCORR_20_40$.estimate - 1.96 * effects_PRECTOTCORR_20_40$.se\n\n\n# Lat / Lon\n\neffects_latlon_20_40$upper <- effects_latlon_20_40$.estimate + 1.96 * effects_latlon_20_40$.se \neffects_latlon_20_40$lower <- effects_latlon_20_40$.estimate - 1.96 * effects_latlon_20_40$.se\n\n\n# Windown\n\n\neffects_days_20_40$upper <- effects_days_20_40$.estimate + 1.96 * effects_days_20_40$.se\neffects_days_20_40$lower <- effects_days_20_40$.estimate - 1.96 * effects_days_20_40$.se\n\n# DPD\n\n\neffects_dpd_20_40$upper <- effects_dpd_20_40$.estimate + 1.96 * effects_dpd_20_40$.se\neffects_dpd_20_40$lower <- effects_dpd_20_40$.estimate - 1.96 * effects_dpd_20_40$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_20_40$estimate2 = (exp(effects_t2m_rh2m_20_40$.estimate) / (1 + exp(effects_t2m_rh2m_20_40$.estimate)))\neffects_t2m_max_20_40$estimate2 = (exp(effects_t2m_max_20_40$.estimate) / (1 + exp(effects_t2m_max_20_40$.estimate)))\neffects_t2m_min_20_40$estimate2 = (exp(effects_t2m_min_20_40$.estimate) / (1 + exp(effects_t2m_min_20_40$.estimate)))\neffects_latlon_20_40$estimate2 = (exp(effects_latlon_20_40$.estimate) / (1 + exp(effects_latlon_20_40$.estimate)))\neffects_days_20_40$estimate2 = (exp(effects_days_20_40$.estimate) / (1 + exp(effects_days_20_40$.estimate)))\neffects_PRECTOTCORR_20_40$estimate2 = (exp(effects_PRECTOTCORR_20_40$.estimate) / (1 + exp(effects_PRECTOTCORR_20_40$.estimate)))\neffects_dpd_20_40$estimate2 = (exp(effects_dpd_20_40$.estimate) / (1 + exp(effects_dpd_20_40$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_20_40$upper = (exp(effects_t2m_rh2m_20_40$upper) / (1 + exp(effects_t2m_rh2m_20_40$upper)))\neffects_t2m_rh2m_20_40$lower = (exp(effects_t2m_rh2m_20_40$lower) / (1 + exp(effects_t2m_rh2m_20_40$lower)))\neffects_t2m_rh2m_20_40$.se = (exp(effects_t2m_rh2m_20_40$.se) / (1 + exp(effects_t2m_rh2m_20_40$.se)))\n\neffects_t2m_rh2m_20_40$.by = NULL\neffects_t2m_rh2m_20_40$.type = NULL\neffects_t2m_rh2m_20_40$.estimate = NULL\neffects_t2m_20_40 = effects_t2m_rh2m_20_40\neffects_rh2m_20_40 = effects_t2m_rh2m_20_40\neffects_t2m_20_40$.smooth = NULL\neffects_rh2m_20_40$.smooth = NULL\n\neffects_t2m_20_40$RH2M = NULL\neffects_t2m_20_40$variable = \"T2M\"\n\neffects_rh2m_20_40$T2M = NULL\neffects_rh2m_20_40$variable = \"RH2M\"\n\ncolnames(effects_t2m_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_20_40$upper = (exp(effects_t2m_max_20_40$upper) / (1 + exp(effects_t2m_max_20_40$upper)))\neffects_t2m_max_20_40$lower = (exp(effects_t2m_max_20_40$lower) / (1 + exp(effects_t2m_max_20_40$lower)))\neffects_t2m_max_20_40$.se = (exp(effects_t2m_max_20_40$.se) / (1 + exp(effects_t2m_max_20_40$.se)))\n\neffects_t2m_max_20_40$.by = NULL\neffects_t2m_max_20_40$.type = NULL\neffects_t2m_max_20_40$.estimate = NULL\neffects_t2m_max_20_40$.smooth = NULL\neffects_t2m_max_20_40$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_20_40$upper = (exp(effects_t2m_min_20_40$upper) / (1 + exp(effects_t2m_min_20_40$upper)))\neffects_t2m_min_20_40$lower = (exp(effects_t2m_min_20_40$lower) / (1 + exp(effects_t2m_min_20_40$lower)))\neffects_t2m_min_20_40$.se = (exp(effects_t2m_min_20_40$.se) / (1 + exp(effects_t2m_min_20_40$.se)))\n\neffects_t2m_min_20_40$.by = NULL\neffects_t2m_min_20_40$.type = NULL\neffects_t2m_min_20_40$.estimate = NULL\neffects_t2m_min_20_40$.smooth = NULL\neffects_t2m_min_20_40$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_20_40$upper = (exp(effects_latlon_20_40$upper) / (1 + exp(effects_latlon_20_40$upper)))\neffects_latlon_20_40$lower = (exp(effects_latlon_20_40$lower) / (1 + exp(effects_latlon_20_40$lower)))\neffects_latlon_20_40$.se = (exp(effects_latlon_20_40$.se) / (1 + exp(effects_latlon_20_40$.se)))\n\neffects_latlon_20_40$.by = NULL\neffects_latlon_20_40$.type = NULL\neffects_latlon_20_40$.estimate = NULL\neffects_lat_20_40 = effects_latlon_20_40\neffects_lon_20_40 = effects_latlon_20_40\neffects_lat_20_40$.smooth = NULL\neffects_lon_20_40$.smooth = NULL\n\neffects_lat_20_40$lon = NULL\neffects_lat_20_40$variable = \"Latitude\"\n\neffects_lon_20_40$lat = NULL\neffects_lon_20_40$variable = \"Longitude\"\n\ncolnames(effects_lat_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_20_40$upper = (exp(effects_days_20_40$upper) / (1 + exp(effects_days_20_40$upper)))\neffects_days_20_40$lower = (exp(effects_days_20_40$lower) / (1 + exp(effects_days_20_40$lower)))\neffects_days_20_40$.se = (exp(effects_days_20_40$.se) / (1 + exp(effects_days_20_40$.se)))\n\neffects_days_20_40$.by = NULL\neffects_days_20_40$.type = NULL\neffects_days_20_40$.estimate = NULL\neffects_days_20_40$.smooth = NULL\neffects_days_20_40$variable = \"Days\"\n\ncolnames(effects_days_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_20_40$upper = (exp(effects_PRECTOTCORR_20_40$upper) / (1 + exp(effects_PRECTOTCORR_20_40$upper)))\neffects_PRECTOTCORR_20_40$lower = (exp(effects_PRECTOTCORR_20_40$lower) / (1 + exp(effects_PRECTOTCORR_20_40$lower)))\neffects_PRECTOTCORR_20_40$.se = (exp(effects_PRECTOTCORR_20_40$.se) / (1 + exp(effects_PRECTOTCORR_20_40$.se)))\n\neffects_PRECTOTCORR_20_40$.by = NULL\neffects_PRECTOTCORR_20_40$.type = NULL\neffects_PRECTOTCORR_20_40$.estimate = NULL\neffects_PRECTOTCORR_20_40$.smooth = NULL\neffects_PRECTOTCORR_20_40$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_20_40$upper = (exp(effects_dpd_20_40$upper) / (1 + exp(effects_dpd_20_40$upper)))\neffects_dpd_20_40$lower = (exp(effects_dpd_20_40$lower) / (1 + exp(effects_dpd_20_40$lower)))\neffects_dpd_20_40$.se = (exp(effects_dpd_20_40$.se) / (1 + exp(effects_dpd_20_40$.se)))\n\neffects_dpd_20_40$.by = NULL\neffects_dpd_20_40$.type = NULL\neffects_dpd_20_40$.estimate = NULL\neffects_dpd_20_40$.smooth = NULL\neffects_dpd_20_40$variable = \"DPD\"\n\ncolnames(effects_dpd_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_20_40 = rbind(effects_t2m_20_40,effects_rh2m_20_40,effects_t2m_max_20_40,effects_t2m_min_20_40,\n           effects_lat_20_40,effects_lon_20_40,effects_days_20_40,effects_PRECTOTCORR_20_40,effects_dpd_20_40)\n\n```\n\n```{r}\npf_20_402 = pf_20_40 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_20_402 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_20_40 <- pf_20_40 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      #geom_smooth(\n      #  aes(value, upper), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n    #  ) +\n     # geom_smooth(\n      #  aes(value, lower), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_20_40 <- wrap_plots(plot_list_20_40, ncol = 3)\ncombined_plot_20_40\n\nggsave(\"fig/partial_effect_20_40.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_20_40_pred = predict.gam(model_20_40,se.fit = T, type = \"response\")\npred_20_40_pred = as.data.frame(pred_20_40_pred)\n\n\npred_20_40_pred$T2M = wd_20_40$T2M\npred_20_40_pred$RH2M = wd_20_40$RH2M\npred_20_40_pred$T2M_MIN = wd_20_40$T2M_MIN\npred_20_40_pred$T2M_MAX = wd_20_40$T2M_MAX\npred_20_40_pred$days_difference = wd_20_40$days_difference\npred_20_40_pred$PRECTOTCORR = wd_20_40$PRECTOTCORR\npred_20_40_pred$lat = wd_20_40$lat\npred_20_40_pred$lon = wd_20_40$lon\npred_20_40_pred$DPD = wd_20_40$DPD\n\ngc()\n\nset.seed(123)\nsimu_20_40 <- simulate_gam(model_20_40, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_20_40_s <- simu_20_40 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\nsimu_20_40_s_long <- simu_20_40_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_20_40_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_20_40 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_20_40_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_20_40[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_20_40 <- wrap_plots(g_20_40, ncol = 3) + \n  plot_annotation(title = \"Windows: 20-40\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_20_40.png\", plot_20_40, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_20_40\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_20_40 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_20_40_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_20_40_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_20_40[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_20_40 <- wrap_plots(g_20_40, ncol = 3) +\n  plot_annotation(title = \"Windows: 20-40 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_20_40_highlighted.png\", plot_20_40, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_20_40)\n\n```\n\n## 40 to 60\n\n```{r}\n\nwd_40_60 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\ntrain_40_60 <- sample(1:nrow(wd_40_60), 0.95 * nrow(wd_40_60)) \n  \n  \n  train_data_40_60 <- wd_40_60[train_40_60, ]\n  test_data_40_60 <- wd_40_60[-train_40_60, ]\n```\n\n```{r}\nmodel_40_60 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n          data = wd_40_60,\n          method = \"fREML\")\n\n\n\ngc()\n```\n\n```{r}\nsummary(model_40_60)\ngam.check(model_40_60)\nAIC(model_40_60)\nBIC(model_40_60)\n```\n\n```{r}\nmodel_40_60_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) +\n           s(lat, lon, bs = \"tp\", k = 60)+\n           s(days_difference, bs = \"cr\", k =60)+\n           s(T2M,RH2M, bs = 'tp', k =60)+ \n           s(T2M_MAX, bs = \"cr\", k = 60)+\n           s(PRECTOTCORR, bs = \"cr\", k = 60)+\n           s(DPD, bs = \"cr\", k = 60),\n          family = betar(),\n  data = train_data_40_60,\n  method = \"REML\")\n\ngc()\n\n\npred_40_60 = predict.gam(model_40_60_pf, newdata = test_data_40_60, type = \"response\")\npred_40_60 = as.data.frame(pred_40_60)\ntest_data_40_60 = as.data.frame(test_data_40_60)\nCCC_40_60 <- epi.ccc(test_data_40_60$mean_sev, pred_40_60$pred_40_60)\nprint(CCC_40_60$rho.c) \n\n\nrhoc_40_60 <- CCC_40_60$rho.c   \nCb_40_60  <- CCC_40_60$C.b     \n\n\nrho_40_60 <- rhoc_40_60 / Cb_40_60\nrho_40_60\n\ntest_data_40_60$pred = pred_40_60$pred_40_60\n\ntest_data_40_60 %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_40_60 <- smooth_estimates(model_40_60, smooth = \"s(days_difference)\")\neffects_t2m_max_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M_MIN)\")\neffects_latlon_40_60 <- smooth_estimates(model_40_60, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M,RH2M)\")\neffects_dpd_40_60 <- smooth_estimates(model_40_60, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_40_60 <- smooth_estimates(model_40_60, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_40_60$upper <- effects_t2m_rh2m_40_60$.estimate + 1.96 * effects_t2m_rh2m_40_60$.se  \neffects_t2m_rh2m_40_60$lower <- effects_t2m_rh2m_40_60$.estimate - 1.96 * effects_t2m_rh2m_40_60$.se \n\n# T2M MAX\n\neffects_t2m_max_40_60$upper <- effects_t2m_max_40_60$.estimate + 1.96 * effects_t2m_max_40_60$.se \neffects_t2m_max_40_60$lower <- effects_t2m_max_40_60$.estimate - 1.96 * effects_t2m_max_40_60$.se  \n\n# T2M MIN\n\neffects_t2m_min_40_60$upper <- effects_t2m_min_40_60$.estimate + 1.96 * effects_t2m_min_40_60$.se \neffects_t2m_min_40_60$lower <- effects_t2m_min_40_60$.estimate - 1.96 * effects_t2m_min_40_60$.se\n\n# Rain\n\neffects_PRECTOTCORR_40_60$upper <- effects_PRECTOTCORR_40_60$.estimate + 1.96 * effects_PRECTOTCORR_40_60$.se \neffects_PRECTOTCORR_40_60$lower <- effects_PRECTOTCORR_40_60$.estimate - 1.96 * effects_PRECTOTCORR_40_60$.se\n\n\n# Lat / Lon\n\neffects_latlon_40_60$upper <- effects_latlon_40_60$.estimate + 1.96 * effects_latlon_40_60$.se \neffects_latlon_40_60$lower <- effects_latlon_40_60$.estimate - 1.96 * effects_latlon_40_60$.se\n\n\n# Windown\n\n\neffects_days_40_60$upper <- effects_days_40_60$.estimate + 1.96 * effects_days_40_60$.se\neffects_days_40_60$lower <- effects_days_40_60$.estimate - 1.96 * effects_days_40_60$.se\n\n# DPD\n\n\neffects_dpd_40_60$upper <- effects_dpd_40_60$.estimate + 1.96 * effects_dpd_40_60$.se\neffects_dpd_40_60$lower <- effects_dpd_40_60$.estimate - 1.96 * effects_dpd_40_60$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_40_60$estimate2 = (exp(effects_t2m_rh2m_40_60$.estimate) / (1 + exp(effects_t2m_rh2m_40_60$.estimate)))\neffects_t2m_max_40_60$estimate2 = (exp(effects_t2m_max_40_60$.estimate) / (1 + exp(effects_t2m_max_40_60$.estimate)))\neffects_t2m_min_40_60$estimate2 = (exp(effects_t2m_min_40_60$.estimate) / (1 + exp(effects_t2m_min_40_60$.estimate)))\neffects_latlon_40_60$estimate2 = (exp(effects_latlon_40_60$.estimate) / (1 + exp(effects_latlon_40_60$.estimate)))\neffects_days_40_60$estimate2 = (exp(effects_days_40_60$.estimate) / (1 + exp(effects_days_40_60$.estimate)))\neffects_PRECTOTCORR_40_60$estimate2 = (exp(effects_PRECTOTCORR_40_60$.estimate) / (1 + exp(effects_PRECTOTCORR_40_60$.estimate)))\neffects_dpd_40_60$estimate2 = (exp(effects_dpd_40_60$.estimate) / (1 + exp(effects_dpd_40_60$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_40_60$upper = (exp(effects_t2m_rh2m_40_60$upper) / (1 + exp(effects_t2m_rh2m_40_60$upper)))\neffects_t2m_rh2m_40_60$lower = (exp(effects_t2m_rh2m_40_60$lower) / (1 + exp(effects_t2m_rh2m_40_60$lower)))\neffects_t2m_rh2m_40_60$.se = (exp(effects_t2m_rh2m_40_60$.se) / (1 + exp(effects_t2m_rh2m_40_60$.se)))\n\neffects_t2m_rh2m_40_60$.by = NULL\neffects_t2m_rh2m_40_60$.type = NULL\neffects_t2m_rh2m_40_60$.estimate = NULL\neffects_t2m_40_60 = effects_t2m_rh2m_40_60\neffects_rh2m_40_60 = effects_t2m_rh2m_40_60\neffects_t2m_40_60$.smooth = NULL\neffects_rh2m_40_60$.smooth = NULL\n\neffects_t2m_40_60$RH2M = NULL\neffects_t2m_40_60$variable = \"T2M\"\n\neffects_rh2m_40_60$T2M = NULL\neffects_rh2m_40_60$variable = \"RH2M\"\n\ncolnames(effects_t2m_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_40_60$upper = (exp(effects_t2m_max_40_60$upper) / (1 + exp(effects_t2m_max_40_60$upper)))\neffects_t2m_max_40_60$lower = (exp(effects_t2m_max_40_60$lower) / (1 + exp(effects_t2m_max_40_60$lower)))\neffects_t2m_max_40_60$.se = (exp(effects_t2m_max_40_60$.se) / (1 + exp(effects_t2m_max_40_60$.se)))\n\neffects_t2m_max_40_60$.by = NULL\neffects_t2m_max_40_60$.type = NULL\neffects_t2m_max_40_60$.estimate = NULL\neffects_t2m_max_40_60$.smooth = NULL\neffects_t2m_max_40_60$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_40_60$upper = (exp(effects_t2m_min_40_60$upper) / (1 + exp(effects_t2m_min_40_60$upper)))\neffects_t2m_min_40_60$lower = (exp(effects_t2m_min_40_60$lower) / (1 + exp(effects_t2m_min_40_60$lower)))\neffects_t2m_min_40_60$.se = (exp(effects_t2m_min_40_60$.se) / (1 + exp(effects_t2m_min_40_60$.se)))\n\neffects_t2m_min_40_60$.by = NULL\neffects_t2m_min_40_60$.type = NULL\neffects_t2m_min_40_60$.estimate = NULL\neffects_t2m_min_40_60$.smooth = NULL\neffects_t2m_min_40_60$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_40_60$upper = (exp(effects_latlon_40_60$upper) / (1 + exp(effects_latlon_40_60$upper)))\neffects_latlon_40_60$lower = (exp(effects_latlon_40_60$lower) / (1 + exp(effects_latlon_40_60$lower)))\neffects_latlon_40_60$.se = (exp(effects_latlon_40_60$.se) / (1 + exp(effects_latlon_40_60$.se)))\n\neffects_latlon_40_60$.by = NULL\neffects_latlon_40_60$.type = NULL\neffects_latlon_40_60$.estimate = NULL\neffects_lat_40_60 = effects_latlon_40_60\neffects_lon_40_60 = effects_latlon_40_60\neffects_lat_40_60$.smooth = NULL\neffects_lon_40_60$.smooth = NULL\n\neffects_lat_40_60$lon = NULL\neffects_lat_40_60$variable = \"Latitude\"\n\neffects_lon_40_60$lat = NULL\neffects_lon_40_60$variable = \"Longitude\"\n\ncolnames(effects_lat_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_40_60$upper = (exp(effects_days_40_60$upper) / (1 + exp(effects_days_40_60$upper)))\neffects_days_40_60$lower = (exp(effects_days_40_60$lower) / (1 + exp(effects_days_40_60$lower)))\neffects_days_40_60$.se = (exp(effects_days_40_60$.se) / (1 + exp(effects_days_40_60$.se)))\n\neffects_days_40_60$.by = NULL\neffects_days_40_60$.type = NULL\neffects_days_40_60$.estimate = NULL\neffects_days_40_60$.smooth = NULL\neffects_days_40_60$variable = \"Days\"\n\ncolnames(effects_days_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_40_60$upper = (exp(effects_PRECTOTCORR_40_60$upper) / (1 + exp(effects_PRECTOTCORR_40_60$upper)))\neffects_PRECTOTCORR_40_60$lower = (exp(effects_PRECTOTCORR_40_60$lower) / (1 + exp(effects_PRECTOTCORR_40_60$lower)))\neffects_PRECTOTCORR_40_60$.se = (exp(effects_PRECTOTCORR_40_60$.se) / (1 + exp(effects_PRECTOTCORR_40_60$.se)))\n\neffects_PRECTOTCORR_40_60$.by = NULL\neffects_PRECTOTCORR_40_60$.type = NULL\neffects_PRECTOTCORR_40_60$.estimate = NULL\neffects_PRECTOTCORR_40_60$.smooth = NULL\neffects_PRECTOTCORR_40_60$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_40_60$upper = (exp(effects_dpd_40_60$upper) / (1 + exp(effects_dpd_40_60$upper)))\neffects_dpd_40_60$lower = (exp(effects_dpd_40_60$lower) / (1 + exp(effects_dpd_40_60$lower)))\neffects_dpd_40_60$.se = (exp(effects_dpd_40_60$.se) / (1 + exp(effects_dpd_40_60$.se)))\n\neffects_dpd_40_60$.by = NULL\neffects_dpd_40_60$.type = NULL\neffects_dpd_40_60$.estimate = NULL\neffects_dpd_40_60$.smooth = NULL\neffects_dpd_40_60$variable = \"DPD\"\n\ncolnames(effects_dpd_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_40_60 = rbind(effects_t2m_40_60,effects_rh2m_40_60,effects_t2m_max_40_60,effects_t2m_min_40_60,\n           effects_lat_40_60,effects_lon_40_60,effects_days_40_60,effects_PRECTOTCORR_40_60,effects_dpd_40_60)\n\n```\n\n```{r}\npf_40_602 = pf_40_60 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_40_602 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_40_60 <- pf_40_60 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n     # geom_smooth(\n      #  aes(value, upper), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      #geom_smooth(\n       # aes(value, lower), se = FALSE, color = \"black\", \n        #size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_40_60 <- wrap_plots(plot_list_40_60, ncol = 3)\ncombined_plot_40_60\n\nggsave(\"fig/partial_effect_40_60.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_40_60_pred = predict.gam(model_40_60,se.fit = T, type = \"response\")\npred_40_60_pred = as.data.frame(pred_40_60_pred)\n\n\npred_40_60_pred$T2M = wd_40_60$T2M\npred_40_60_pred$RH2M = wd_40_60$RH2M\npred_40_60_pred$T2M_MIN = wd_40_60$T2M_MIN\npred_40_60_pred$T2M_MAX = wd_40_60$T2M_MAX\npred_40_60_pred$days_difference = wd_40_60$days_difference\npred_40_60_pred$PRECTOTCORR = wd_40_60$PRECTOTCORR\npred_40_60_pred$lat = wd_40_60$lat\npred_40_60_pred$lon = wd_40_60$lon\npred_40_60_pred$DPD = wd_40_60$DPD\n\ngc()\n\n\nset.seed(123)\nsimu_40_60 <- simulate_gam(model_40_60, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_40_60_s <- simu_40_60 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\n\nsimu_40_60_s_long <- simu_40_60_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_40_60_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_40_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_40_60_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_40_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_40_60 <- wrap_plots(g_40_60, ncol = 3) + \n  plot_annotation(title = \"Windows: 40-60\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_40_60.png\", plot_40_60, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_40_60\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_40_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_40_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_40_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_40_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_40_60 <- wrap_plots(g_40_60, ncol = 3) +\n  plot_annotation(title = \"Windows: 40-60 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_40_60_highlighted.png\", plot_40_60, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_40_60)\n\n```\n\n## 60 to 80\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 60 & days <= 80)\n\n\ntrain_60_80 <- sample(1:nrow(wd_60_80), 0.95 * nrow(wd_60_80)) \n  \n  \n  train_data_60_80 <- wd_60_80[train_60_80, ]\n  test_data_60_80 <- wd_60_80[-train_60_80, ]\n```\n\n```{r}\nmodel_60_80 = bam(\n mean_sev~  s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n          data = wd_60_80,\n         method = \"fREML\")\n\ngc()\n```\n\n```{r}\nsummary(model_60_80)\ngam.check(model_60_80)\nAIC(model_60_80)\nBIC(model_60_80)\n```\n\n```{r}\nmodel_60_80_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_60_80,\n  method = \"REML\")\n\ngc()\n\npred_60_80 = predict.gam(model_60_80_pf, newdata = test_data_60_80, type = \"response\")\npred_60_80 = as.data.frame(pred_60_80)\ntest_data_60_80 = as.data.frame(test_data_60_80)\nCCC_60_80 <- epi.ccc(test_data_60_80$mean_sev, pred_60_80$pred_60_80)\nprint(CCC_60_80$rho.c) \n\n\nrhoc_60_80 <- CCC_60_80$rho.c   \nCb_60_80  <- CCC_60_80$C.b     \n\n\nrho_60_80 <- rhoc_60_80 / Cb_60_80\nrho_60_80\n\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n#effects_days_60_80 <- smooth_estimates(model_60_80, smooth = \"s(days_difference)\", n = 1000)\neffects_days_60_80 <- smooth_estimates(model_60_80, smooth = \"s(days_difference)\")\neffects_t2m_max_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M_MIN)\")\neffects_latlon_60_80 <- smooth_estimates(model_60_80, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M,RH2M)\")\neffects_dpd_60_80 <- smooth_estimates(model_60_80, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_60_80 <- smooth_estimates(model_60_80, smooth = \"s(PRECTOTCORR)\")\n\ngc()\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_60_80$upper <- effects_t2m_rh2m_60_80$.estimate + 1.96 * effects_t2m_rh2m_60_80$.se  \neffects_t2m_rh2m_60_80$lower <- effects_t2m_rh2m_60_80$.estimate - 1.96 * effects_t2m_rh2m_60_80$.se \n\n# T2M MAX\n\neffects_t2m_max_60_80$upper <- effects_t2m_max_60_80$.estimate + 1.96 * effects_t2m_max_60_80$.se \neffects_t2m_max_60_80$lower <- effects_t2m_max_60_80$.estimate - 1.96 * effects_t2m_max_60_80$.se  \n\n# T2M MIN\n\neffects_t2m_min_60_80$upper <- effects_t2m_min_60_80$.estimate + 1.96 * effects_t2m_min_60_80$.se \neffects_t2m_min_60_80$lower <- effects_t2m_min_60_80$.estimate - 1.96 * effects_t2m_min_60_80$.se\n\n# Rain\n\neffects_PRECTOTCORR_60_80$upper <- effects_PRECTOTCORR_60_80$.estimate + 1.96 * effects_PRECTOTCORR_60_80$.se \neffects_PRECTOTCORR_60_80$lower <- effects_PRECTOTCORR_60_80$.estimate - 1.96 * effects_PRECTOTCORR_60_80$.se\n\n\n# Lat / Lon\n\neffects_latlon_60_80$upper <- effects_latlon_60_80$.estimate + 1.96 * effects_latlon_60_80$.se \neffects_latlon_60_80$lower <- effects_latlon_60_80$.estimate - 1.96 * effects_latlon_60_80$.se\n\n\n# Windown\n\n\neffects_days_60_80$upper <- effects_days_60_80$.estimate + 1.96 * effects_days_60_80$.se\neffects_days_60_80$lower <- effects_days_60_80$.estimate - 1.96 * effects_days_60_80$.se\n\n# DPD\n\n\neffects_dpd_60_80$upper <- effects_dpd_60_80$.estimate + 1.96 * effects_dpd_60_80$.se\neffects_dpd_60_80$lower <- effects_dpd_60_80$.estimate - 1.96 * effects_dpd_60_80$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_60_80$estimate2 = (exp(effects_t2m_rh2m_60_80$.estimate) / (1 + exp(effects_t2m_rh2m_60_80$.estimate)))\neffects_t2m_max_60_80$estimate2 = (exp(effects_t2m_max_60_80$.estimate) / (1 + exp(effects_t2m_max_60_80$.estimate)))\neffects_t2m_min_60_80$estimate2 = (exp(effects_t2m_min_60_80$.estimate) / (1 + exp(effects_t2m_min_60_80$.estimate)))\neffects_latlon_60_80$estimate2 = (exp(effects_latlon_60_80$.estimate) / (1 + exp(effects_latlon_60_80$.estimate)))\neffects_days_60_80$estimate2 = (exp(effects_days_60_80$.estimate) / (1 + exp(effects_days_60_80$.estimate)))\neffects_PRECTOTCORR_60_80$estimate2 = (exp(effects_PRECTOTCORR_60_80$.estimate) / (1 + exp(effects_PRECTOTCORR_60_80$.estimate)))\neffects_dpd_60_80$estimate2 = (exp(effects_dpd_60_80$.estimate) / (1 + exp(effects_dpd_60_80$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_60_80$upper = (exp(effects_t2m_rh2m_60_80$upper) / (1 + exp(effects_t2m_rh2m_60_80$upper)))\neffects_t2m_rh2m_60_80$lower = (exp(effects_t2m_rh2m_60_80$lower) / (1 + exp(effects_t2m_rh2m_60_80$lower)))\neffects_t2m_rh2m_60_80$.se = (exp(effects_t2m_rh2m_60_80$.se) / (1 + exp(effects_t2m_rh2m_60_80$.se)))\n\neffects_t2m_rh2m_60_80$.by = NULL\neffects_t2m_rh2m_60_80$.type = NULL\neffects_t2m_rh2m_60_80$.estimate = NULL\neffects_t2m_60_80 = effects_t2m_rh2m_60_80\neffects_rh2m_60_80 = effects_t2m_rh2m_60_80\neffects_t2m_60_80$.smooth = NULL\neffects_rh2m_60_80$.smooth = NULL\n\neffects_t2m_60_80$RH2M = NULL\neffects_t2m_60_80$variable = \"T2M\"\n\neffects_rh2m_60_80$T2M = NULL\neffects_rh2m_60_80$variable = \"RH2M\"\n\ncolnames(effects_t2m_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_60_80$upper = (exp(effects_t2m_max_60_80$upper) / (1 + exp(effects_t2m_max_60_80$upper)))\neffects_t2m_max_60_80$lower = (exp(effects_t2m_max_60_80$lower) / (1 + exp(effects_t2m_max_60_80$lower)))\neffects_t2m_max_60_80$.se = (exp(effects_t2m_max_60_80$.se) / (1 + exp(effects_t2m_max_60_80$.se)))\n\neffects_t2m_max_60_80$.by = NULL\neffects_t2m_max_60_80$.type = NULL\neffects_t2m_max_60_80$.estimate = NULL\neffects_t2m_max_60_80$.smooth = NULL\neffects_t2m_max_60_80$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_60_80$upper = (exp(effects_t2m_min_60_80$upper) / (1 + exp(effects_t2m_min_60_80$upper)))\neffects_t2m_min_60_80$lower = (exp(effects_t2m_min_60_80$lower) / (1 + exp(effects_t2m_min_60_80$lower)))\neffects_t2m_min_60_80$.se = (exp(effects_t2m_min_60_80$.se) / (1 + exp(effects_t2m_min_60_80$.se)))\n\neffects_t2m_min_60_80$.by = NULL\neffects_t2m_min_60_80$.type = NULL\neffects_t2m_min_60_80$.estimate = NULL\neffects_t2m_min_60_80$.smooth = NULL\neffects_t2m_min_60_80$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_60_80$upper = (exp(effects_latlon_60_80$upper) / (1 + exp(effects_latlon_60_80$upper)))\neffects_latlon_60_80$lower = (exp(effects_latlon_60_80$lower) / (1 + exp(effects_latlon_60_80$lower)))\neffects_latlon_60_80$.se = (exp(effects_latlon_60_80$.se) / (1 + exp(effects_latlon_60_80$.se)))\n\neffects_latlon_60_80$.by = NULL\neffects_latlon_60_80$.type = NULL\neffects_latlon_60_80$.estimate = NULL\neffects_lat_60_80 = effects_latlon_60_80\neffects_lon_60_80 = effects_latlon_60_80\neffects_lat_60_80$.smooth = NULL\neffects_lon_60_80$.smooth = NULL\n\neffects_lat_60_80$lon = NULL\neffects_lat_60_80$variable = \"Latitude\"\n\neffects_lon_60_80$lat = NULL\neffects_lon_60_80$variable = \"Longitude\"\n\ncolnames(effects_lat_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_60_80$upper = (exp(effects_days_60_80$upper) / (1 + exp(effects_days_60_80$upper)))\neffects_days_60_80$lower = (exp(effects_days_60_80$lower) / (1 + exp(effects_days_60_80$lower)))\neffects_days_60_80$.se = (exp(effects_days_60_80$.se) / (1 + exp(effects_days_60_80$.se)))\n\neffects_days_60_80$.by = NULL\neffects_days_60_80$.type = NULL\neffects_days_60_80$.estimate = NULL\neffects_days_60_80$.smooth = NULL\neffects_days_60_80$variable = \"Days\"\n\ncolnames(effects_days_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_60_80$upper = (exp(effects_PRECTOTCORR_60_80$upper) / (1 + exp(effects_PRECTOTCORR_60_80$upper)))\neffects_PRECTOTCORR_60_80$lower = (exp(effects_PRECTOTCORR_60_80$lower) / (1 + exp(effects_PRECTOTCORR_60_80$lower)))\neffects_PRECTOTCORR_60_80$.se = (exp(effects_PRECTOTCORR_60_80$.se) / (1 + exp(effects_PRECTOTCORR_60_80$.se)))\n\neffects_PRECTOTCORR_60_80$.by = NULL\neffects_PRECTOTCORR_60_80$.type = NULL\neffects_PRECTOTCORR_60_80$.estimate = NULL\neffects_PRECTOTCORR_60_80$.smooth = NULL\neffects_PRECTOTCORR_60_80$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_60_80$upper = (exp(effects_dpd_60_80$upper) / (1 + exp(effects_dpd_60_80$upper)))\neffects_dpd_60_80$lower = (exp(effects_dpd_60_80$lower) / (1 + exp(effects_dpd_60_80$lower)))\neffects_dpd_60_80$.se = (exp(effects_dpd_60_80$.se) / (1 + exp(effects_dpd_60_80$.se)))\n\neffects_dpd_60_80$.by = NULL\neffects_dpd_60_80$.type = NULL\neffects_dpd_60_80$.estimate = NULL\neffects_dpd_60_80$.smooth = NULL\neffects_dpd_60_80$variable = \"DPD\"\n\ncolnames(effects_dpd_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_60_80 = rbind(effects_t2m_60_80,effects_rh2m_60_80,effects_t2m_max_60_80,effects_t2m_min_60_80,\n           effects_lat_60_80,effects_lon_60_80,effects_days_60_80,effects_PRECTOTCORR_60_80,effects_dpd_60_80)\n\n```\n\n```{r}\npf_60_802 = pf_60_80 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_60_802 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n```{r}\n\npf_0_202$windows = c(\"0 to 20\")\npf_20_402$windows = c(\"20 to 40\")\npf_40_602$windows = c(\"40 to 60\")\npf_60_802$windows = c(\"60 to 80\")\n\npf_all_effect = rbind(pf_0_202,pf_20_402,pf_40_602,pf_60_802)\n\npf_all_effect %>% \n  ggplot(aes(variable, effect, group = windows, color = windows))+\ngeom_pointrange(aes(ymin = lower, ymax = upper), position = position_dodge(0.8))+\n  ggthemes::theme_few()+\n  scale_color_viridis_d()\n  #facet_wrap(~windows)\n```\n\n```{r}\n\npf_0_20$windows = c(\"0 to 20\")\npf_20_40$windows = c(\"20 to 40\")\npf_40_60$windows = c(\"40 to 60\")\npf_60_80$windows = c(\"60 to 80\")\n\neffect_pf = rbind(pf_0_20,pf_20_40,pf_40_60,pf_60_80)\n\neffect_pf %>% \n  filter(variable == \"DPD\") %>% \nggplot(aes(x = effect)) +\n  stat_halfeye(fill = \"#ffc425\", alpha = 0.7)+\n  \n  ggthemes::theme_few() +\n\n  labs(\n    y = \"Density\",\n    x = \"Effect (%)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank())+\n   facet_wrap(~windows)\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_60_80 <- pf_60_80 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n     # geom_smooth(\n     #  aes(value, upper), se = FALSE, color = \"black\", \n     #   size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n     # ) +\n     #  geom_smooth(\n      #  aes(value, lower), se = FALSE, color = \"black\", \n      #  size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_60_80 <- wrap_plots(plot_list_60_80, ncol = 3)\ncombined_plot_60_80\n\nggsave(\"fig/partial_effect_60_80.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_60_80_pred = predict.gam(model_60_80,se.fit = T, type = \"response\")\npred_60_80_pred = as.data.frame(pred_60_80_pred)\n\n\npred_60_80_pred$T2M = wd_60_80$T2M\npred_60_80_pred$RH2M = wd_60_80$RH2M\npred_60_80_pred$T2M_MIN = wd_60_80$T2M_MIN\npred_60_80_pred$T2M_MAX = wd_60_80$T2M_MAX\npred_60_80_pred$days_difference = wd_60_80$days_difference\npred_60_80_pred$PRECTOTCORR = wd_60_80$PRECTOTCORR\npred_60_80_pred$lat = wd_60_80$lat\npred_60_80_pred$lon = wd_60_80$lon\npred_60_80_pred$DPD = wd_60_80$DPD\n\ngc()\n\nset.seed(123)\nsimu_60_80 <- simulate_gam(model_60_80, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_60_80_s <- simu_60_80 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025) \n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\n\nsimu_60_80_s_long <- simu_60_80_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_60_80_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_60_80 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_60_80_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_60_80[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_60_80 <- wrap_plots(g_60_80, ncol = 3) + \n  plot_annotation(title = \"Windows: 60-80\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_60_80.png\", plot_60_80, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_60_80\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_60_80 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_60_80_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_60_80_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_60_80[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_60_80 <- wrap_plots(g_60_80, ncol = 3) +\n  plot_annotation(title = \"Windows: 60-80 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_60_80_highlighted.png\", plot_60_80, width = 8, height = 8, dpi = 300)\n\n# Visualizar o gráfico combinado\nprint(plot_60_80)\n\n```\n\n```{r}\nsimu_0_20_s_long$windows = c(\"0 to 20\")\nsimu_20_40_s_long$windows = c(\"20 to 40\")\nsimu_40_60_s_long$windows = c(\"40 to 60\")\nsimu_60_80_s_long$windows = c(\"60 to 80\")\n\nall_simu = rbind(simu_0_20_s_long,simu_20_40_s_long,simu_40_60_s_long,simu_60_80_s_long)\n\n\nall_simu %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev, group = windows, color = windows), \n    se = FALSE, size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95, group = windows, color = windows), \n    se = FALSE, size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95, group = windows, color = windows), \n    se = FALSE, size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n## By period\n\n### T2M\n\n```{r}\nhr_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_0_20 <- simu_0_20_s %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_0_20) > 0) \n      geom_rect(data = hr_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_20_40) > 0) \n      geom_rect(data = hr_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_40_60) > 0) \n      geom_rect(data = hr_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_60_80) > 0) \n      geom_rect(data = hr_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nplot_grid(T2M_0_20,T2M_20_40,T2M_40_60,T2M_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### T2M MAX\n\n```{r}\nhr_t2m_max_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_0_20) > 0) \n      geom_rect(data = hr_t2m_max_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_t2m_max_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_20_40) > 0) \n      geom_rect(data = hr_t2m_max_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_max_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_40_60) > 0) \n      geom_rect(data = hr_t2m_max_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_max_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_60_80) > 0) \n      geom_rect(data = hr_t2m_max_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(T2M_MAX_0_20,T2M_MAX_20_40,T2M_MAX_40_60,T2M_MAX_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_MAX_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### T2M MIN\n\n```{r}\nhr_t2m_min_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_0_20) > 0) \n      geom_rect(data = hr_t2m_min_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_t2m_min_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_20_40) > 0) \n      geom_rect(data = hr_t2m_min_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_min_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_40_60) > 0) \n      geom_rect(data = hr_t2m_min_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_min_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_60_80) > 0) \n      geom_rect(data = hr_t2m_min_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(T2M_MIN_0_20,T2M_MIN_20_40,T2M_MIN_40_60,T2M_MIN_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_MIN_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n```\n\n### RH2M\n\n```{r}\nhr_rh2m_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_0_20) > 0) \n      geom_rect(data = hr_rh2m_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_rh2m_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_20_40) > 0) \n      geom_rect(data = hr_rh2m_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rh2m_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_40_60) > 0) \n      geom_rect(data = hr_rh2m_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rh2m_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_60_80) > 0) \n      geom_rect(data = hr_rh2m_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          ncol = 4)\n\nggsave(\"fig/RH2M_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n```\n\n### RAIN\n\n```{r}\nhr_rain_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_0_20) > 0) \n      geom_rect(data = hr_rain_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_rain_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_20_40) > 0) \n      geom_rect(data = hr_rain_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rain_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_40_60) > 0) \n      geom_rect(data = hr_rain_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rain_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_60_80) > 0) \n      geom_rect(data = hr_rain_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nplot_grid(PRECTOTCORR_0_20,PRECTOTCORR_20_40,PRECTOTCORR_40_60,PRECTOTCORR_60_80,\n          ncol = 4)\n\nggsave(\"fig/PRECTOTCORR_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### DPD\n\n```{r}\nhr_dpd_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_0_20) > 0) \n      geom_rect(data = hr_dpd_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_dpd_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_20_40) > 0) \n      geom_rect(data = hr_dpd_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_dpd_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_40_60) > 0) \n      geom_rect(data = hr_dpd_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_dpd_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_60_80) > 0) \n      geom_rect(data = hr_dpd_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(DPD_0_20,DPD_20_40,DPD_40_60,DPD_60_80,\n          ncol = 4)\n\nggsave(\"fig/DPD_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n## Joining\n\n```{r}\nlibrary(cowplot)\nplot_grid(T2M_0_20,T2M_20_40,T2M_40_60,T2M_60_80,\n          T2M_MAX_0_20,T2M_MAX_20_40,T2M_MAX_40_60,T2M_MAX_60_80,\n          T2M_MIN_0_20,T2M_MIN_20_40,T2M_MIN_40_60,T2M_MIN_60_80,\n          RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          PRECTOTCORR_0_20,PRECTOTCORR_20_40,PRECTOTCORR_40_60,PRECTOTCORR_60_80,\n          RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          DPD_0_20,DPD_20_40,DPD_40_60,DPD_60_80,\n          ncol = 4)\n\nggsave(\"fig/by_period.png\", bg = \"white\", dpi = 600, width = 20, height = 14)\n```\n\n## All windows (MODIFICAR)\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)  # Combinar gráficos\n\n# Adicionar uma coluna de período em cada conjunto de dados\npred_0_30_pred$period <- \"0-30\"\npred_30_60_pred$period <- \"30-60\"\npred_60_90_pred$period <- \"60-90\"\npred_0_90_pred$period <- \"0-90\"\npred_30_90_pred$period <- \"30-90\"\npred_0_60_pred$period <- \"0-60\"\n\n# Unir todos os datasets em um único dataframe\ncombined_data <- bind_rows(\n  pred_0_30_pred,\n  pred_30_60_pred,\n  pred_60_90_pred,\n  pred_0_90_pred,\n  pred_30_90_pred,\n  pred_0_60_pred\n)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ngraficos <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- combined_data %>%\n    ggplot(aes_string(x = var, y = \"fit*100\", color = \"period\")) + # Definir a variável no eixo x e colorir por \"period\"\n    geom_smooth(se = F, size = 1.4) +\n    #scale_color_manual(values = c(\"0-30\" = \"red\", \"30-60\" = \"blue\", \n     #                             \"60-90\" = \"green\", \"0-90\" = \"purple\", \n      #                            \"30-90\" = \"orange\", \"0-60\" = \"brown\")) +\n    scale_color_viridis_d(\"Windows\", option = \"viridis\")+\n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\", color = \"Period\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  graficos[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\ngrafico_combinado <- wrap_plots(graficos, ncol = 3) + \n  plot_annotation(title = \"\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/all_periods.png\", grafico_combinado, width = 15, height = 12, dpi = 600)\n\n# Visualizar o gráfico combinado\ngrafico_combinado\n\n```\n\n# REMOVER\n\n```{r}\npf_0_20$period = \"0-20\"\npf_20_40$period = \"20-40\"\npf_40_60$period = \"40-60\"\npf_60_80$period = \"60-80\"\n\npf_all = rbind(pf_0_20, pf_20_40, pf_40_60, pf_60_80)\n\npf_all %>% \n  filter(!variable %in% c(\"Latitude\",\"Longitude\",\"Days\")) %>% \n  ggplot(aes(period, effect, size = se))+\n  geom_jitter(width = .06, color = \"darkorange\", alpha = .05)+\n  geom_boxplot(fill = NA, color = \"black\", size = 1.2)+\n  scale_fill_binned()+\n  ggthemes::theme_few()+\n  facet_wrap(~variable)\n \n```\n\n## Residue\n\n```{r}\n\n# Extrair os resíduos e quantis teóricos\nresiduals <- residuals(modelo4, type = \"deviance\")\nqq_data <- data.frame(\n  theoretical = qqnorm(residuals, plot.it = FALSE)$x,\n  residuals = qqnorm(residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nqq = qq_data %>% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  labs(x = \"Theoretical Quantiles\", y = \"Deviance Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\n# Extrair preditores lineares e resíduos\nlinear_predictors <- predict(modelo4, type = \"link\")\nresiduals_data <- data.frame(\n  linear_predictors = linear_predictors,\n  residuals = residuals\n)\n\n# Plotar resíduos vs preditores lineares\npredictors = residuals_data %>% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  labs(x = \"Linear Predictors\", y = \"Deviance Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n```\n\n```{r}\n# Plotar histograma dos resíduos\nres_hist= ggplot(residuals_data, aes(x = residuals)) +\n  geom_histogram(fill = \"black\", color = \"white\", bins = 20) +\n  labs(x = \"Deviance Residuals\", y = \"Frequency\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\n# Extrair valores observados e preditos\nobserved <- modelo4$y\npredicted <- predict(modelo4, type = \"response\")\nprediction_data <- data.frame(\n  observed = observed,\n  predicted = predicted\n)\n\n# Plotar valores preditos vs observados\npd_ob = prediction_data %>% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7), limits = c(0.1, 0.7))+\n  scale_y_continuous(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7), limits = c(0.1, 0.7))+\n  labs(x = \"Observed Values\", y = \"Predicted Values\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\nplot_grid(qq,predictors,res_hist,pd_ob)\n\nggsave(\"fig/residue.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n","srcMarkdownNoYaml":"\n\n# PREDICTION\n\n## 0 to 60\n\n```{r}\n\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\ntrain_0_60 <- sample(1:nrow(wd_0_60), 0.95 * nrow(wd_0_60)) \n\n\ntrain_data_0_60 <- wd_0_60[train_0_60, ]\ntest_data_0_60 <- wd_0_60[-train_0_60, ]\n```\n\n```{r}\nmodel_0_60 = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = wd_0_60,\n  method = \"REML\")\n\ngc()\n```\n\n```{r}\nsummary(model_0_60)\ngam.check(model_0_60)\nAIC(model_0_60)\nBIC(model_0_60)\n```\n\n```{r}\nmodel_0_60_pf = gam(\n  mean_sev~s(T2M_MIN,by = level1, bs='cr', k =100) +\n    s(lat, bs = \"cr\", k = 30)+\n    s(days_difference,by = level1, bs = \"cr\", k =60)+\n    s(T2M,RH2M,by = level1,bs = 'tp', k =100)+\n    s(T2M_MAX,by = level1,bs = \"cr\", k = 100)+\n    s(PRECTOTCORR,by = level1,bs = \"cr\", k = 100)+\n    s(DPD,by = level1,bs = \"cr\", k = 100),\n  family = betar(),\n  data = train_data_0_60,\n  method = \"REML\")\n\ngc()\n\n\npred_0_60 = predict.gam(model_0_60_pf, newdata = test_data_0_60, type = \"response\")\npred_0_60 = as.data.frame(pred_0_60)\ntest_data_0_60 = as.data.frame(test_data_0_60)\nCCC_0_60 <- epi.ccc(test_data_0_60$mean_sev, pred_0_60$pred_0_60)\nprint(CCC_0_60$rho.c) \n\n\nrhoc_0_60 <- CCC_0_60$rho.c   \nCb_0_60  <- CCC_0_60$C.b     \n\n\nrho_0_60 <- rhoc_0_60 / Cb_0_60\nrho_0_60\n\n# Extraindo os valores observados e preditos\nobserved <- test_data_0_60$mean_sev  # Substitua pelo nome da sua variável resposta\npredicted <- pred_0_60$pred_0_60     # Ou o nome correto da coluna dos valores preditos\n\n# Calculando o RMSE\nrmse <- sqrt(mean((observed - predicted)^2))\n\n# Exibindo o RMSE\nprint(rmse)\n\n\n\ntest_data_0_60$pred = pred_0_60$pred_0_60\n\ntest_data_0_60 %>% \n  filter(!mean_sev >= 0.7) %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)+\n  scale_x_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  scale_y_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))+\n  labs(x = \"Observed (%)\",\n       y = \"Predicted (%)\")\n```\n\n```{r}\n\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\ntrain_0_60 <- sample(1:nrow(wd_0_60), 0.95 * nrow(wd_0_60)) \n\n\ntrain_data_0_60 <- wd_0_60[train_0_60, ]\ntest_data_0_60 <- wd_0_60[-train_0_60, ]\n\n\ngbm.fit = gbm(mean_sev ~ (T2M_MAX + T2M_MIN + T2M:RH2M + days_difference):level1,\n              data = train_data_0_60,\n              distribution = \"gaussian\",\n              n.trees = 783,\n              interaction.depth = 10,\n              shrinkage = 0.1,\n              cv.folds = 10,\n              n.cores = NULL, # will use all cores by default\n              verbose = FALSE)\nprint(gbm.fit)\n\nbest_trees_interaction <- gbm.perf(gbm.fit, method = \"cv\")\n\n\npred = predict(gbm.fit, newdata = test_data_0_60, ntrees = 5000 )\npred = as.data.frame(pred)\n\nCCC_0_60 <- epi.ccc(test_data_0_60$mean_sev, pred$pred)\n\nprint(CCC_0_60$rho.c) \n\n\nrhoc_0_60 <- CCC_0_60$rho.c   \nCb_0_60  <- CCC_0_60$C.b     \n\n\nrho_0_60 <- rhoc_0_60 / Cb_0_60\nrho_0_60\n\n\nobserved <- test_data_0_60$mean_sev  # Substitua pelo nome da sua variável resposta\npredicted <- pred$pred     # Ou o nome correto da coluna dos valores preditos\n\n# Calculando o RMSE\nrmse <- sqrt(mean((observed - predicted)^2))\n\n# Exibindo o RMSE\nprint(rmse)\n\ntest_data_0_60$pred = pred$pred\n\n\ntest_data_0_60 %>% \n  filter(!mean_sev >= 0.7) %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = F)+\n  scale_x_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  scale_y_continuous(breaks = c(0.00, 0.25, 0.50, 0.75), limits = c(0.00, 0.75))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))+\n  labs(x = \"Observed (%)\",\n       y = \"Predicted (%)\")\n\n\nsummary(\n  gbm.fit, \n  #cBars = 10,\n  method = relative.influence\n)\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_60 <- smooth_estimates(model_0_60, smooth = \"s(days_difference)\")\neffects_t2m_max_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_60 <- smooth_estimates(model_0_60, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_60 <- smooth_estimates(model_0_60, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_60 <- smooth_estimates(model_0_60, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_60 <- smooth_estimates(model_0_60, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_60$upper <- effects_t2m_rh2m_0_60$.estimate + 1.96 * effects_t2m_rh2m_0_60$.se  \neffects_t2m_rh2m_0_60$lower <- effects_t2m_rh2m_0_60$.estimate - 1.96 * effects_t2m_rh2m_0_60$.se \n\n# T2M MAX\n\neffects_t2m_max_0_60$upper <- effects_t2m_max_0_60$.estimate + 1.96 * effects_t2m_max_0_60$.se \neffects_t2m_max_0_60$lower <- effects_t2m_max_0_60$.estimate - 1.96 * effects_t2m_max_0_60$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_60$upper <- effects_t2m_min_0_60$.estimate + 1.96 * effects_t2m_min_0_60$.se \neffects_t2m_min_0_60$lower <- effects_t2m_min_0_60$.estimate - 1.96 * effects_t2m_min_0_60$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_60$upper <- effects_PRECTOTCORR_0_60$.estimate + 1.96 * effects_PRECTOTCORR_0_60$.se \neffects_PRECTOTCORR_0_60$lower <- effects_PRECTOTCORR_0_60$.estimate - 1.96 * effects_PRECTOTCORR_0_60$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_60$upper <- effects_latlon_0_60$.estimate + 1.96 * effects_latlon_0_60$.se \neffects_latlon_0_60$lower <- effects_latlon_0_60$.estimate - 1.96 * effects_latlon_0_60$.se\n\n\n# Windown\n\n\neffects_days_0_60$upper <- effects_days_0_60$.estimate + 1.96 * effects_days_0_60$.se\neffects_days_0_60$lower <- effects_days_0_60$.estimate - 1.96 * effects_days_0_60$.se\n\n# DPD\n\n\neffects_dpd_0_60$upper <- effects_dpd_0_60$.estimate + 1.96 * effects_dpd_0_60$.se\neffects_dpd_0_60$lower <- effects_dpd_0_60$.estimate - 1.96 * effects_dpd_0_60$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_60$estimate2 = (exp(effects_t2m_rh2m_0_60$.estimate) / (1 + exp(effects_t2m_rh2m_0_60$.estimate)))\neffects_t2m_max_0_60$estimate2 = (exp(effects_t2m_max_0_60$.estimate) / (1 + exp(effects_t2m_max_0_60$.estimate)))\neffects_t2m_min_0_60$estimate2 = (exp(effects_t2m_min_0_60$.estimate) / (1 + exp(effects_t2m_min_0_60$.estimate)))\neffects_latlon_0_60$estimate2 = (exp(effects_latlon_0_60$.estimate) / (1 + exp(effects_latlon_0_60$.estimate)))\neffects_days_0_60$estimate2 = (exp(effects_days_0_60$.estimate) / (1 + exp(effects_days_0_60$.estimate)))\neffects_PRECTOTCORR_0_60$estimate2 = (exp(effects_PRECTOTCORR_0_60$.estimate) / (1 + exp(effects_PRECTOTCORR_0_60$.estimate)))\neffects_dpd_0_60$estimate2 = (exp(effects_dpd_0_60$.estimate) / (1 + exp(effects_dpd_0_60$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_60$upper = (exp(effects_t2m_rh2m_0_60$upper) / (1 + exp(effects_t2m_rh2m_0_60$upper)))\neffects_t2m_rh2m_0_60$lower = (exp(effects_t2m_rh2m_0_60$lower) / (1 + exp(effects_t2m_rh2m_0_60$lower)))\neffects_t2m_rh2m_0_60$.se = (exp(effects_t2m_rh2m_0_60$.se) / (1 + exp(effects_t2m_rh2m_0_60$.se)))\n\neffects_t2m_rh2m_0_60$.by = NULL\neffects_t2m_rh2m_0_60$.type = NULL\neffects_t2m_rh2m_0_60$.estimate = NULL\neffects_t2m_0_60 = effects_t2m_rh2m_0_60\neffects_rh2m_0_60 = effects_t2m_rh2m_0_60\neffects_t2m_0_60$.smooth = NULL\neffects_rh2m_0_60$.smooth = NULL\n\neffects_t2m_0_60$RH2M = NULL\neffects_t2m_0_60$variable = \"T2M\"\n\neffects_rh2m_0_60$T2M = NULL\neffects_rh2m_0_60$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_60$upper = (exp(effects_t2m_max_0_60$upper) / (1 + exp(effects_t2m_max_0_60$upper)))\neffects_t2m_max_0_60$lower = (exp(effects_t2m_max_0_60$lower) / (1 + exp(effects_t2m_max_0_60$lower)))\neffects_t2m_max_0_60$.se = (exp(effects_t2m_max_0_60$.se) / (1 + exp(effects_t2m_max_0_60$.se)))\n\neffects_t2m_max_0_60$.by = NULL\neffects_t2m_max_0_60$.type = NULL\neffects_t2m_max_0_60$.estimate = NULL\neffects_t2m_max_0_60$.smooth = NULL\neffects_t2m_max_0_60$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_60$upper = (exp(effects_t2m_min_0_60$upper) / (1 + exp(effects_t2m_min_0_60$upper)))\neffects_t2m_min_0_60$lower = (exp(effects_t2m_min_0_60$lower) / (1 + exp(effects_t2m_min_0_60$lower)))\neffects_t2m_min_0_60$.se = (exp(effects_t2m_min_0_60$.se) / (1 + exp(effects_t2m_min_0_60$.se)))\n\neffects_t2m_min_0_60$.by = NULL\neffects_t2m_min_0_60$.type = NULL\neffects_t2m_min_0_60$.estimate = NULL\neffects_t2m_min_0_60$.smooth = NULL\neffects_t2m_min_0_60$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_60$upper = (exp(effects_latlon_0_60$upper) / (1 + exp(effects_latlon_0_60$upper)))\neffects_latlon_0_60$lower = (exp(effects_latlon_0_60$lower) / (1 + exp(effects_latlon_0_60$lower)))\neffects_latlon_0_60$.se = (exp(effects_latlon_0_60$.se) / (1 + exp(effects_latlon_0_60$.se)))\n\neffects_latlon_0_60$.by = NULL\neffects_latlon_0_60$.type = NULL\neffects_latlon_0_60$.estimate = NULL\neffects_lat_0_60 = effects_latlon_0_60\neffects_lon_0_60 = effects_latlon_0_60\neffects_lat_0_60$.smooth = NULL\neffects_lon_0_60$.smooth = NULL\n\neffects_lat_0_60$lon = NULL\neffects_lat_0_60$variable = \"Latitude\"\n\neffects_lon_0_60$lat = NULL\neffects_lon_0_60$variable = \"Longitude\"\n\ncolnames(effects_lat_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_60$upper = (exp(effects_days_0_60$upper) / (1 + exp(effects_days_0_60$upper)))\neffects_days_0_60$lower = (exp(effects_days_0_60$lower) / (1 + exp(effects_days_0_60$lower)))\neffects_days_0_60$.se = (exp(effects_days_0_60$.se) / (1 + exp(effects_days_0_60$.se)))\n\neffects_days_0_60$.by = NULL\neffects_days_0_60$.type = NULL\neffects_days_0_60$.estimate = NULL\neffects_days_0_60$.smooth = NULL\neffects_days_0_60$variable = \"Days\"\n\ncolnames(effects_days_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_60$upper = (exp(effects_PRECTOTCORR_0_60$upper) / (1 + exp(effects_PRECTOTCORR_0_60$upper)))\neffects_PRECTOTCORR_0_60$lower = (exp(effects_PRECTOTCORR_0_60$lower) / (1 + exp(effects_PRECTOTCORR_0_60$lower)))\neffects_PRECTOTCORR_0_60$.se = (exp(effects_PRECTOTCORR_0_60$.se) / (1 + exp(effects_PRECTOTCORR_0_60$.se)))\n\neffects_PRECTOTCORR_0_60$.by = NULL\neffects_PRECTOTCORR_0_60$.type = NULL\neffects_PRECTOTCORR_0_60$.estimate = NULL\neffects_PRECTOTCORR_0_60$.smooth = NULL\neffects_PRECTOTCORR_0_60$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_60$upper = (exp(effects_dpd_0_60$upper) / (1 + exp(effects_dpd_0_60$upper)))\neffects_dpd_0_60$lower = (exp(effects_dpd_0_60$lower) / (1 + exp(effects_dpd_0_60$lower)))\neffects_dpd_0_60$.se = (exp(effects_dpd_0_60$.se) / (1 + exp(effects_dpd_0_60$.se)))\n\neffects_dpd_0_60$.by = NULL\neffects_dpd_0_60$.type = NULL\neffects_dpd_0_60$.estimate = NULL\neffects_dpd_0_60$.smooth = NULL\neffects_dpd_0_60$variable = \"DPD\"\n\ncolnames(effects_dpd_0_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_60 = rbind(effects_t2m_0_60,effects_rh2m_0_60,effects_t2m_max_0_60,effects_t2m_min_0_60,\n                effects_lat_0_60,effects_lon_0_60,effects_days_0_60,effects_PRECTOTCORR_0_60,effects_dpd_0_60)\n\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_60 <- pf_0_60 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      labs(x = unique(df$variable),\n           y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_60 <- wrap_plots(plot_list_0_60, ncol = 3)\ncombined_plot_0_60\n\nggsave(\"fig/partial_effect_0_60.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_60_pred = predict.gam(model_0_60,se.fit = T, type = \"response\")\npred_0_60_pred = as.data.frame(pred_0_60_pred)\n\n\npred_0_60_pred$T2M = wd_0_60$T2M\npred_0_60_pred$RH2M = wd_0_60$RH2M\npred_0_60_pred$T2M_MIN = wd_0_60$T2M_MIN\npred_0_60_pred$T2M_MAX = wd_0_60$T2M_MAX\npred_0_60_pred$days_difference = wd_0_60$days_difference\npred_0_60_pred$PRECTOTCORR = wd_0_60$PRECTOTCORR\npred_0_60_pred$lat = wd_0_60$lat\npred_0_60_pred$lon = wd_0_60$lon\npred_0_60_pred$DPD = wd_0_60$DPD\n\ngc()\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_60_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_60 <- wrap_plots(g_0_60, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-60\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_60.png\", plot_0_60, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_60\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n      geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_60 <- wrap_plots(g_0_60, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-60 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_60_highlighted.png\", plot_0_60, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_60)\n\n```\n\n## 0 to 90\n\n```{r}\n\nwd_0_90 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 90)\n\n\ntrain_0_90 <- sample(1:nrow(wd_0_90), 0.95 * nrow(wd_0_90)) \n\n\ntrain_data_0_90 <- wd_0_90[train_0_90, ]\ntest_data_0_90 <- wd_0_90[-train_0_90, ]\n```\n\n```{r}\nmodel_0_90 = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = wd_0_90,\n  method = \"REML\")\n\ngc()\n```\n\n```{r}\nsummary(model_0_90)\ngam.check(model_0_90)\nAIC(model_0_90)\nBIC(model_0_90)\n```\n\n```{r}\nmodel_0_90_pf = gam(\n  mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_0_90,\n  method = \"REML\")\n\ngc()\n\n\npred_0_90 = predict.gam(model_0_90_pf, newdata = test_data_0_90, type = \"response\")\npred_0_90 = as.data.frame(pred_0_90)\ntest_data_0_90 = as.data.frame(test_data_0_90)\nCCC_0_90 <- epi.ccc(test_data_0_90$mean_sev, pred_0_90$pred_0_90)\nprint(CCC_0_90$rho.c) \n\n\nrhoc_0_90 <- CCC_0_90$rho.c   \nCb_0_90  <- CCC_0_90$C.b     \n\n\nrho_0_90 <- rhoc_0_90 / Cb_0_90\nrho_0_90\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_90 <- smooth_estimates(model_0_90, smooth = \"s(days_difference)\")\neffects_t2m_max_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_90 <- smooth_estimates(model_0_90, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_90 <- smooth_estimates(model_0_90, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_90 <- smooth_estimates(model_0_90, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_90 <- smooth_estimates(model_0_90, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_90$upper <- effects_t2m_rh2m_0_90$.estimate + 1.96 * effects_t2m_rh2m_0_90$.se  \neffects_t2m_rh2m_0_90$lower <- effects_t2m_rh2m_0_90$.estimate - 1.96 * effects_t2m_rh2m_0_90$.se \n\n# T2M MAX\n\neffects_t2m_max_0_90$upper <- effects_t2m_max_0_90$.estimate + 1.96 * effects_t2m_max_0_90$.se \neffects_t2m_max_0_90$lower <- effects_t2m_max_0_90$.estimate - 1.96 * effects_t2m_max_0_90$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_90$upper <- effects_t2m_min_0_90$.estimate + 1.96 * effects_t2m_min_0_90$.se \neffects_t2m_min_0_90$lower <- effects_t2m_min_0_90$.estimate - 1.96 * effects_t2m_min_0_90$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_90$upper <- effects_PRECTOTCORR_0_90$.estimate + 1.96 * effects_PRECTOTCORR_0_90$.se \neffects_PRECTOTCORR_0_90$lower <- effects_PRECTOTCORR_0_90$.estimate - 1.96 * effects_PRECTOTCORR_0_90$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_90$upper <- effects_latlon_0_90$.estimate + 1.96 * effects_latlon_0_90$.se \neffects_latlon_0_90$lower <- effects_latlon_0_90$.estimate - 1.96 * effects_latlon_0_90$.se\n\n\n# Windown\n\n\neffects_days_0_90$upper <- effects_days_0_90$.estimate + 1.96 * effects_days_0_90$.se\neffects_days_0_90$lower <- effects_days_0_90$.estimate - 1.96 * effects_days_0_90$.se\n\n# DPD\n\n\neffects_dpd_0_90$upper <- effects_dpd_0_90$.estimate + 1.96 * effects_dpd_0_90$.se\neffects_dpd_0_90$lower <- effects_dpd_0_90$.estimate - 1.96 * effects_dpd_0_90$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_90$estimate2 = (exp(effects_t2m_rh2m_0_90$.estimate) / (1 + exp(effects_t2m_rh2m_0_90$.estimate)))\neffects_t2m_max_0_90$estimate2 = (exp(effects_t2m_max_0_90$.estimate) / (1 + exp(effects_t2m_max_0_90$.estimate)))\neffects_t2m_min_0_90$estimate2 = (exp(effects_t2m_min_0_90$.estimate) / (1 + exp(effects_t2m_min_0_90$.estimate)))\neffects_latlon_0_90$estimate2 = (exp(effects_latlon_0_90$.estimate) / (1 + exp(effects_latlon_0_90$.estimate)))\neffects_days_0_90$estimate2 = (exp(effects_days_0_90$.estimate) / (1 + exp(effects_days_0_90$.estimate)))\neffects_PRECTOTCORR_0_90$estimate2 = (exp(effects_PRECTOTCORR_0_90$.estimate) / (1 + exp(effects_PRECTOTCORR_0_90$.estimate)))\neffects_dpd_0_90$estimate2 = (exp(effects_dpd_0_90$.estimate) / (1 + exp(effects_dpd_0_90$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_90$upper = (exp(effects_t2m_rh2m_0_90$upper) / (1 + exp(effects_t2m_rh2m_0_90$upper)))\neffects_t2m_rh2m_0_90$lower = (exp(effects_t2m_rh2m_0_90$lower) / (1 + exp(effects_t2m_rh2m_0_90$lower)))\neffects_t2m_rh2m_0_90$.se = (exp(effects_t2m_rh2m_0_90$.se) / (1 + exp(effects_t2m_rh2m_0_90$.se)))\n\neffects_t2m_rh2m_0_90$.by = NULL\neffects_t2m_rh2m_0_90$.type = NULL\neffects_t2m_rh2m_0_90$.estimate = NULL\neffects_t2m_0_90 = effects_t2m_rh2m_0_90\neffects_rh2m_0_90 = effects_t2m_rh2m_0_90\neffects_t2m_0_90$.smooth = NULL\neffects_rh2m_0_90$.smooth = NULL\n\neffects_t2m_0_90$RH2M = NULL\neffects_t2m_0_90$variable = \"T2M\"\n\neffects_rh2m_0_90$T2M = NULL\neffects_rh2m_0_90$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_90$upper = (exp(effects_t2m_max_0_90$upper) / (1 + exp(effects_t2m_max_0_90$upper)))\neffects_t2m_max_0_90$lower = (exp(effects_t2m_max_0_90$lower) / (1 + exp(effects_t2m_max_0_90$lower)))\neffects_t2m_max_0_90$.se = (exp(effects_t2m_max_0_90$.se) / (1 + exp(effects_t2m_max_0_90$.se)))\n\neffects_t2m_max_0_90$.by = NULL\neffects_t2m_max_0_90$.type = NULL\neffects_t2m_max_0_90$.estimate = NULL\neffects_t2m_max_0_90$.smooth = NULL\neffects_t2m_max_0_90$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_90$upper = (exp(effects_t2m_min_0_90$upper) / (1 + exp(effects_t2m_min_0_90$upper)))\neffects_t2m_min_0_90$lower = (exp(effects_t2m_min_0_90$lower) / (1 + exp(effects_t2m_min_0_90$lower)))\neffects_t2m_min_0_90$.se = (exp(effects_t2m_min_0_90$.se) / (1 + exp(effects_t2m_min_0_90$.se)))\n\neffects_t2m_min_0_90$.by = NULL\neffects_t2m_min_0_90$.type = NULL\neffects_t2m_min_0_90$.estimate = NULL\neffects_t2m_min_0_90$.smooth = NULL\neffects_t2m_min_0_90$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_90$upper = (exp(effects_latlon_0_90$upper) / (1 + exp(effects_latlon_0_90$upper)))\neffects_latlon_0_90$lower = (exp(effects_latlon_0_90$lower) / (1 + exp(effects_latlon_0_90$lower)))\neffects_latlon_0_90$.se = (exp(effects_latlon_0_90$.se) / (1 + exp(effects_latlon_0_90$.se)))\n\neffects_latlon_0_90$.by = NULL\neffects_latlon_0_90$.type = NULL\neffects_latlon_0_90$.estimate = NULL\neffects_lat_0_90 = effects_latlon_0_90\neffects_lon_0_90 = effects_latlon_0_90\neffects_lat_0_90$.smooth = NULL\neffects_lon_0_90$.smooth = NULL\n\neffects_lat_0_90$lon = NULL\neffects_lat_0_90$variable = \"Latitude\"\n\neffects_lon_0_90$lat = NULL\neffects_lon_0_90$variable = \"Longitude\"\n\ncolnames(effects_lat_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_90$upper = (exp(effects_days_0_90$upper) / (1 + exp(effects_days_0_90$upper)))\neffects_days_0_90$lower = (exp(effects_days_0_90$lower) / (1 + exp(effects_days_0_90$lower)))\neffects_days_0_90$.se = (exp(effects_days_0_90$.se) / (1 + exp(effects_days_0_90$.se)))\n\neffects_days_0_90$.by = NULL\neffects_days_0_90$.type = NULL\neffects_days_0_90$.estimate = NULL\neffects_days_0_90$.smooth = NULL\neffects_days_0_90$variable = \"Days\"\n\ncolnames(effects_days_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_90$upper = (exp(effects_PRECTOTCORR_0_90$upper) / (1 + exp(effects_PRECTOTCORR_0_90$upper)))\neffects_PRECTOTCORR_0_90$lower = (exp(effects_PRECTOTCORR_0_90$lower) / (1 + exp(effects_PRECTOTCORR_0_90$lower)))\neffects_PRECTOTCORR_0_90$.se = (exp(effects_PRECTOTCORR_0_90$.se) / (1 + exp(effects_PRECTOTCORR_0_90$.se)))\n\neffects_PRECTOTCORR_0_90$.by = NULL\neffects_PRECTOTCORR_0_90$.type = NULL\neffects_PRECTOTCORR_0_90$.estimate = NULL\neffects_PRECTOTCORR_0_90$.smooth = NULL\neffects_PRECTOTCORR_0_90$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_90$upper = (exp(effects_dpd_0_90$upper) / (1 + exp(effects_dpd_0_90$upper)))\neffects_dpd_0_90$lower = (exp(effects_dpd_0_90$lower) / (1 + exp(effects_dpd_0_90$lower)))\neffects_dpd_0_90$.se = (exp(effects_dpd_0_90$.se) / (1 + exp(effects_dpd_0_90$.se)))\n\neffects_dpd_0_90$.by = NULL\neffects_dpd_0_90$.type = NULL\neffects_dpd_0_90$.estimate = NULL\neffects_dpd_0_90$.smooth = NULL\neffects_dpd_0_90$variable = \"DPD\"\n\ncolnames(effects_dpd_0_90) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_90 = rbind(effects_t2m_0_90,effects_rh2m_0_90,effects_t2m_max_0_90,effects_t2m_min_0_90,\n                effects_lat_0_90,effects_lon_0_90,effects_days_0_90,effects_PRECTOTCORR_0_90,effects_dpd_0_90)\n\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_90 <- pf_0_90 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      labs(x = unique(df$variable),\n           y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_90 <- wrap_plots(plot_list_0_90, ncol = 3)\ncombined_plot_0_90\n\nggsave(\"fig/partial_effect_0_90.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_90_pred = predict.gam(model_0_90,se.fit = T, type = \"response\")\npred_0_90_pred = as.data.frame(pred_0_90_pred)\n\n\npred_0_90_pred$T2M = wd_0_90$T2M\npred_0_90_pred$RH2M = wd_0_90$RH2M\npred_0_90_pred$T2M_MIN = wd_0_90$T2M_MIN\npred_0_90_pred$T2M_MAX = wd_0_90$T2M_MAX\npred_0_90_pred$days_difference = wd_0_90$days_difference\npred_0_90_pred$PRECTOTCORR = wd_0_90$PRECTOTCORR\npred_0_90_pred$lat = wd_0_90$lat\npred_0_90_pred$lon = wd_0_90$lon\npred_0_90_pred$DPD = wd_0_90$DPD\n\ngc()\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_90 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_90_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_90[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_90 <- wrap_plots(g_0_90, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-90\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_90.png\", plot_0_90, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_90\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_90 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_90_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_90_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n      geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_90[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_90 <- wrap_plots(g_0_90, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-90 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_90_highlighted.png\", plot_0_90, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_90)\n\n```\n\n# SCRIPT DO GAM QUE RETIREI DO CODE PRINCIPAL E SUBSTITUÍ POR INLA MODEL\n\n### Overall\n#### 0-30 | 30-60 | 60-90\n\n```{r}\nweather_data <- weather_data %>%\n  filter(!days<0) %>% \ndplyr::mutate(windows = case_when(\n    days >= 0 & days <= 30  ~ \"0_30\",\n    days >= 30 & days <= 60  ~ \"30_60\",\n    days >= 60 & days <= 90  ~ \"60_90\",\n    days >= 0 & days <= 60  ~ \"0_60\",\n    days >= 0 & days <= 90  ~ \"0_90\",\n    days >= 30 & days <= 90  ~ \"30_90\"\n  ))\n\nunique(weather_data$windows)\n```\n\n\n```{r}\nRH2M_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%   \n  dplyr::group_by(windows) %>% \n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_overall <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n   dplyr::group_by(windows) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\ndays_difference_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_dd = mean(days_difference, na.rm = TRUE),      \n    up_95 = quantile(days_difference, 0.975, na.rm = TRUE),  \n    low_95 = quantile(days_difference, 0.025, na.rm = TRUE), \n    se = sd(days_difference, na.rm = TRUE) / sqrt(n()),    \n    max_dd = max(days_difference, na.rm = TRUE),         \n    min_dd = min(days_difference, na.rm = TRUE)         \n  )\n\nlat_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_lat = mean(lat, na.rm = TRUE),      \n    up_95 = quantile(lat, 0.975, na.rm = TRUE),  \n    low_95 = quantile(lat, 0.025, na.rm = TRUE), \n    se = sd(lat, na.rm = TRUE) / sqrt(n()),    \n    max_lat = max(lat, na.rm = TRUE),         \n    min_lat = min(lat, na.rm = TRUE)         \n  )\n\n\nlon_overall <- weather_data %>%\n  filter(!state == \"SP\") %>% \n  summarise(\n    mean_lon = mean(lon, na.rm = TRUE),      \n    up_95 = quantile(lon, 0.975, na.rm = TRUE),  \n    low_95 = quantile(lon, 0.025, na.rm = TRUE), \n    se = sd(lon, na.rm = TRUE) / sqrt(n()),    \n    max_lon = max(lon, na.rm = TRUE),         \n    min_lon = min(lon, na.rm = TRUE)         \n  )\n\ngc()\n```\n#### 30-90\n\n```{r}\nRH2M_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 30 & days <= 90) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 30 & days <= 90) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_30_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 30 & days <= 90) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n#### 0-60\n\n```{r}\nRH2M_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 60) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 0 & days <= 60) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_0_60 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 60) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n\n#### 0-90\n\n```{r}\nRH2M_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>%\n  summarise(\n    mean_RH2M = mean(RH2M, na.rm = TRUE),      \n    up_95 = quantile(RH2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(RH2M, 0.025, na.rm = TRUE), \n    se = sd(RH2M, na.rm = TRUE) / sqrt(n()),    \n    max_RH2M = max(RH2M, na.rm = TRUE),         \n    min_RH2M = min(RH2M, na.rm = TRUE)         \n  )\n\n\nT2M_MAX_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n filter(days >= 0 & days <= 90) %>%\n  summarise(\n    mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),      \n    up_95 = quantile(T2M_MAX, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MAX, 0.025, na.rm = TRUE), \n    se = sd(T2M_MAX, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MAX = max(T2M_MAX, na.rm = TRUE),         \n    min_T2M_MAX = min(T2M_MAX, na.rm = TRUE)         \n  )\n\n\nT2M_MIN_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n  filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),      \n    up_95 = quantile(T2M_MIN, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M_MIN, 0.025, na.rm = TRUE), \n    se = sd(T2M_MIN, na.rm = TRUE) / sqrt(n()),    \n    max_T2M_MIN = max(T2M_MIN, na.rm = TRUE),         \n    min_T2M_MIN = min(T2M_MIN, na.rm = TRUE)         \n  )\n\n\nT2M_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_T2M = mean(T2M, na.rm = TRUE),      \n    up_95 = quantile(T2M, 0.975, na.rm = TRUE),  \n    low_95 = quantile(T2M, 0.025, na.rm = TRUE), \n    se = sd(T2M, na.rm = TRUE) / sqrt(n()),    \n    max_T2M = max(T2M, na.rm = TRUE),         \n    min_T2M = min(T2M, na.rm = TRUE)         \n  )\n\nPRECTOTCORR_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),      \n    up_95 = quantile(PRECTOTCORR, 0.975, na.rm = TRUE),  \n    low_95 = quantile(PRECTOTCORR, 0.025, na.rm = TRUE), \n    se = sd(PRECTOTCORR, na.rm = TRUE) / sqrt(n()),    \n    max_PRECTOTCORR = max(PRECTOTCORR, na.rm = TRUE),         \n    min_PRECTOTCORR = min(PRECTOTCORR, na.rm = TRUE)         \n  )\n\n\nDPD_0_90 <- weather_data %>%\n  filter(!state == \"SP\") %>%             \n   filter(days >= 0 & days <= 90) %>% \n  summarise(\n    mean_DPD = mean(DPD, na.rm = TRUE),      \n    up_95 = quantile(DPD, 0.975, na.rm = TRUE),  \n    low_95 = quantile(DPD, 0.025, na.rm = TRUE), \n    se = sd(DPD, na.rm = TRUE) / sqrt(n()),    \n    max_DPD = max(DPD, na.rm = TRUE),         \n    min_DPD = min(DPD, na.rm = TRUE)         \n  )\n\n```\n\n\n# Fitting\n\n# TESTE PREDIÇÃO\n\n## GAM\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nwd_60_802 = wd_60_80 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = mean(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = sum(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1),\n    year1 = mean(year1)\n    )\n\n\nwd_60_802 = wd_60_802 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.30, 1, 0))\n\n\nmodelt <- bam(\n    epidemic ~ s(T2M_MIN,bs = 'fs', k = 60) +\n      s(days_difference,bs = \"fs\", k = 60)+\n      #s(RH2M, bs = 'fs', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX,bs = \"fs\", k = 60) +\n      s(T2M,bs = \"fs\", k = 60) +\n      s(PRECTOTCORR,bs = \"fs\", k = 60) +\n      s(DPD,bs = \"fs\", k = 60)+\n      #s(lat, by = level1, bs = \"fs\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M,bs = \"tp\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = quasibinomial(),\n    data = wd_60_802,\n    method = \"fREML\")\n\nfinal_results = predict_gam(modelt, type = \"response\")\nfinal_results = as.data.frame(final_results)\ndat_rf_05 <- data.frame(\n  ID = 1:nrow(wd_60_802),          # Identificador único (opcional)\n  Observed = wd_60_802$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results$final_results\n            # Probabilidades preditas pelo modelo\n)\n#binomial(link = \"logit\")\noptimal.thresholds(dat_rf_05)\ncm_rf_05 = confusionMatrix(data = as.factor(as.numeric(final_results$final_results  > 0.64)),  mode= \"everything\",  reference = as.factor(wd_60_802$epidemic))\ncm_rf_05\n```\n\n\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- bam(\n   epidemic ~ s(T2M_MIN,bs = 'fs', k = 60) +\n      s(days_difference,bs = \"fs\", k = 60)+\n      #s(RH2M, by = level1, bs = 'cr', k = 30) +\n      #s(T2M, by = level1, bs = 'cr', k = 30) +\n      s(T2M_MAX,bs = \"fs\", k = 60) +\n      s(T2M,bs = \"fs\", k = 60) +\n      s(PRECTOTCORR,bs = \"fs\", k = 60) +\n      s(DPD,bs = \"fs\", k = 60)+\n      #s(lat, by = level1, bs = \"cr\", k = 30)+\n      #s(lon, by = level1, bs = \"cr\", k = 30)+\n      s(T2M, RH2M,bs = \"fs\", k = 60),\n      #s(lat, lon, by = level1, bs = \"tp\", k = 60),\n    family = quasibinomial(),\n    data = train,\n    method = \"fREML\")\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.64,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n## Random Forest\n```{r}\nset.seed(123)\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_802))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_802[-i,]\n    test <- wd_60_802[i,]\n    \n    # Fitting\n\n    modelt <- randomForest(epidemic ~ T2M + T2M_MAX + T2M_MIN + \n                             RH2M + days_difference + DPD +\n                             PRECTOTCORR, data = train, importance = TRUE, ntree = 100)\n\n    \n    # Predict results\n    results_prob <- predict(modelt,test,type='response')\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob > 0.50,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n\n```{r}\n\nmodelt2 <- randomForest(epidemic ~ T2M + RH2M , data = wd_60_8022, importance = TRUE, ntree = 100)\n\nfinal_results2 = predict(modelt2, type = \"response\")\nfinal_results2 = as.data.frame(final_results2)\ndat_rf_052 <- data.frame(\n  ID = 1:nrow(wd_60_8022),          # Identificador único (opcional)\n  Observed = wd_60_8022$epidemic,   # Valores observados (0 ou 1)\n  Predicted = final_results2$final_results2\n            # Probabilidades preditas pelo modelo\n)\n\noptimal.thresholds(dat_rf_052)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(final_results2$final_results2  > 0.50)),  mode= \"everything\",  reference = as.factor(wd_60_8022$epidemic))\ncm_rf_052\n```\n```{r}\n# Plotar a importância com customizações\nvarImpPlot(modelt2, \n           type = 1,         # Use '1' para Mean Decrease Accuracy ou '2' para Mean Decrease Gini\n           main = \"Importância das Variáveis - Random Forest\",\n           col = \"blue\",     # Cor das barras\n           cex = 0.8)  \n```\n\n\n## 0 to 20\n\n```{r}\n\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 20)\n\n\ntrain_0_20 <- sample(1:nrow(wd_0_20), 0.95 * nrow(wd_0_20)) \n  \n  \n  train_data_0_20 <- wd_0_20[train_0_20, ]\n  test_data_0_20 <- wd_0_20[-train_0_20, ]\n  \n```\n\n```{r}\nlibrary(mgcv)\nmodel_0_20 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           #s(year1, bs = \"cr\", k = 10)+\n           s(DPD, bs = \"cr\", k = 60),\n          family = betar(),\n          data = wd_0_20,\n          method = \"fREML\")\n\n\ngc()\ngratia::draw(model_0_20)\n```\n\n```{r}\nsummary(model_0_20)\ngam.check(model_0_20)\nAIC(model_0_20)\nBIC(model_0_20)\n```\n\n```{r}\n\nmodel_0_20_pf = gam(\n mean_sev~s(T2M_MIN, bs='cr', k =60) +\n          s(lat, lon, bs = \"tp\", k = 60)+\n          s(days_difference, bs = \"cr\", k =60)+\n          s(T2M,RH2M,bs = 'tp', k =60)+\n          s(T2M_MAX,bs = \"cr\", k = 60)+\n          s(PRECTOTCORR,bs = \"cr\", k = 60)+\n          s(DPD,bs = \"cr\", k = 60),\n          family = betar(),\n  data = train_data_0_20,\n  method = \"REML\")\n\ngc()\n\nlibrary(epiR)\n\npred_0_20 = predict.gam(model_0_20_pf, newdata = test_data_0_20, type = \"response\")\npred_0_20 = as.data.frame(pred_0_20)\ntest_data_0_20 = as.data.frame(test_data_0_20)\nCCC_0_20 <- epi.ccc(test_data_0_20$mean_sev, pred_0_20$pred_0_20)\nprint(CCC_0_20$rho.c) \n\n# Obter os valores do CCC e C_b\nrhoc_0_20 <- CCC_0_20$rho.c    # CCC principal\nCb_0_20  <- CCC_0_20$C.b      # Fator de correção de viés\n\n# Calcular a correlação de Pearson (rho)\nrho_0_20 <- rhoc_0_20 / Cb_0_20\n\ntest_data_0_20$pred = pred_0_20$pred_0_20\n\ntest_data_0_20 %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()\n\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_0_20 <- smooth_estimates(model_0_20, smooth = \"s(days_difference)\")\neffects_t2m_max_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M_MIN)\")\neffects_latlon_0_20 <- smooth_estimates(model_0_20, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_0_20 <- smooth_estimates(model_0_20, smooth = \"s(T2M,RH2M)\")\neffects_dpd_0_20 <- smooth_estimates(model_0_20, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_0_20 <- smooth_estimates(model_0_20, smooth = \"s(PRECTOTCORR)\")\n\n\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_0_20$upper <- effects_t2m_rh2m_0_20$.estimate + 1.96 * effects_t2m_rh2m_0_20$.se  \neffects_t2m_rh2m_0_20$lower <- effects_t2m_rh2m_0_20$.estimate - 1.96 * effects_t2m_rh2m_0_20$.se \n\n# T2M MAX\n\neffects_t2m_max_0_20$upper <- effects_t2m_max_0_20$.estimate + 1.96 * effects_t2m_max_0_20$.se \neffects_t2m_max_0_20$lower <- effects_t2m_max_0_20$.estimate - 1.96 * effects_t2m_max_0_20$.se  \n\n# T2M MIN\n\neffects_t2m_min_0_20$upper <- effects_t2m_min_0_20$.estimate + 1.96 * effects_t2m_min_0_20$.se \neffects_t2m_min_0_20$lower <- effects_t2m_min_0_20$.estimate - 1.96 * effects_t2m_min_0_20$.se\n\n# Rain\n\neffects_PRECTOTCORR_0_20$upper <- effects_PRECTOTCORR_0_20$.estimate + 1.96 * effects_PRECTOTCORR_0_20$.se \neffects_PRECTOTCORR_0_20$lower <- effects_PRECTOTCORR_0_20$.estimate - 1.96 * effects_PRECTOTCORR_0_20$.se\n\n\n# Lat / Lon\n\neffects_latlon_0_20$upper <- effects_latlon_0_20$.estimate + 1.96 * effects_latlon_0_20$.se \neffects_latlon_0_20$lower <- effects_latlon_0_20$.estimate - 1.96 * effects_latlon_0_20$.se\n\n\n# Windown\n\n\neffects_days_0_20$upper <- effects_days_0_20$.estimate + 1.96 * effects_days_0_20$.se\neffects_days_0_20$lower <- effects_days_0_20$.estimate - 1.96 * effects_days_0_20$.se\n\n# DPD\n\n\neffects_dpd_0_20$upper <- effects_dpd_0_20$.estimate + 1.96 * effects_dpd_0_20$.se\neffects_dpd_0_20$lower <- effects_dpd_0_20$.estimate - 1.96 * effects_dpd_0_20$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_0_20$estimate2 = (exp(effects_t2m_rh2m_0_20$.estimate) / (1 + exp(effects_t2m_rh2m_0_20$.estimate)))\neffects_t2m_max_0_20$estimate2 = (exp(effects_t2m_max_0_20$.estimate) / (1 + exp(effects_t2m_max_0_20$.estimate)))\neffects_t2m_min_0_20$estimate2 = (exp(effects_t2m_min_0_20$.estimate) / (1 + exp(effects_t2m_min_0_20$.estimate)))\neffects_latlon_0_20$estimate2 = (exp(effects_latlon_0_20$.estimate) / (1 + exp(effects_latlon_0_20$.estimate)))\neffects_days_0_20$estimate2 = (exp(effects_days_0_20$.estimate) / (1 + exp(effects_days_0_20$.estimate)))\neffects_PRECTOTCORR_0_20$estimate2 = (exp(effects_PRECTOTCORR_0_20$.estimate) / (1 + exp(effects_PRECTOTCORR_0_20$.estimate)))\neffects_dpd_0_20$estimate2 = (exp(effects_dpd_0_20$.estimate) / (1 + exp(effects_dpd_0_20$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_0_20$upper = (exp(effects_t2m_rh2m_0_20$upper) / (1 + exp(effects_t2m_rh2m_0_20$upper)))\neffects_t2m_rh2m_0_20$lower = (exp(effects_t2m_rh2m_0_20$lower) / (1 + exp(effects_t2m_rh2m_0_20$lower)))\neffects_t2m_rh2m_0_20$.se = (exp(effects_t2m_rh2m_0_20$.se) / (1 + exp(effects_t2m_rh2m_0_20$.se)))\n\neffects_t2m_rh2m_0_20$.by = NULL\neffects_t2m_rh2m_0_20$.type = NULL\neffects_t2m_rh2m_0_20$.estimate = NULL\neffects_t2m_0_20 = effects_t2m_rh2m_0_20\neffects_rh2m_0_20 = effects_t2m_rh2m_0_20\neffects_t2m_0_20$.smooth = NULL\neffects_rh2m_0_20$.smooth = NULL\n\neffects_t2m_0_20$RH2M = NULL\neffects_t2m_0_20$variable = \"T2M\"\n\neffects_rh2m_0_20$T2M = NULL\neffects_rh2m_0_20$variable = \"RH2M\"\n\ncolnames(effects_t2m_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_0_20$upper = (exp(effects_t2m_max_0_20$upper) / (1 + exp(effects_t2m_max_0_20$upper)))\neffects_t2m_max_0_20$lower = (exp(effects_t2m_max_0_20$lower) / (1 + exp(effects_t2m_max_0_20$lower)))\neffects_t2m_max_0_20$.se = (exp(effects_t2m_max_0_20$.se) / (1 + exp(effects_t2m_max_0_20$.se)))\n\neffects_t2m_max_0_20$.by = NULL\neffects_t2m_max_0_20$.type = NULL\neffects_t2m_max_0_20$.estimate = NULL\neffects_t2m_max_0_20$.smooth = NULL\neffects_t2m_max_0_20$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_0_20$upper = (exp(effects_t2m_min_0_20$upper) / (1 + exp(effects_t2m_min_0_20$upper)))\neffects_t2m_min_0_20$lower = (exp(effects_t2m_min_0_20$lower) / (1 + exp(effects_t2m_min_0_20$lower)))\neffects_t2m_min_0_20$.se = (exp(effects_t2m_min_0_20$.se) / (1 + exp(effects_t2m_min_0_20$.se)))\n\neffects_t2m_min_0_20$.by = NULL\neffects_t2m_min_0_20$.type = NULL\neffects_t2m_min_0_20$.estimate = NULL\neffects_t2m_min_0_20$.smooth = NULL\neffects_t2m_min_0_20$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_0_20$upper = (exp(effects_latlon_0_20$upper) / (1 + exp(effects_latlon_0_20$upper)))\neffects_latlon_0_20$lower = (exp(effects_latlon_0_20$lower) / (1 + exp(effects_latlon_0_20$lower)))\neffects_latlon_0_20$.se = (exp(effects_latlon_0_20$.se) / (1 + exp(effects_latlon_0_20$.se)))\n\neffects_latlon_0_20$.by = NULL\neffects_latlon_0_20$.type = NULL\neffects_latlon_0_20$.estimate = NULL\neffects_lat_0_20 = effects_latlon_0_20\neffects_lon_0_20 = effects_latlon_0_20\neffects_lat_0_20$.smooth = NULL\neffects_lon_0_20$.smooth = NULL\n\neffects_lat_0_20$lon = NULL\neffects_lat_0_20$variable = \"Latitude\"\n\neffects_lon_0_20$lat = NULL\neffects_lon_0_20$variable = \"Longitude\"\n\ncolnames(effects_lat_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_0_20$upper = (exp(effects_days_0_20$upper) / (1 + exp(effects_days_0_20$upper)))\neffects_days_0_20$lower = (exp(effects_days_0_20$lower) / (1 + exp(effects_days_0_20$lower)))\neffects_days_0_20$.se = (exp(effects_days_0_20$.se) / (1 + exp(effects_days_0_20$.se)))\n\neffects_days_0_20$.by = NULL\neffects_days_0_20$.type = NULL\neffects_days_0_20$.estimate = NULL\neffects_days_0_20$.smooth = NULL\neffects_days_0_20$variable = \"Days\"\n\ncolnames(effects_days_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_0_20$upper = (exp(effects_PRECTOTCORR_0_20$upper) / (1 + exp(effects_PRECTOTCORR_0_20$upper)))\neffects_PRECTOTCORR_0_20$lower = (exp(effects_PRECTOTCORR_0_20$lower) / (1 + exp(effects_PRECTOTCORR_0_20$lower)))\neffects_PRECTOTCORR_0_20$.se = (exp(effects_PRECTOTCORR_0_20$.se) / (1 + exp(effects_PRECTOTCORR_0_20$.se)))\n\neffects_PRECTOTCORR_0_20$.by = NULL\neffects_PRECTOTCORR_0_20$.type = NULL\neffects_PRECTOTCORR_0_20$.estimate = NULL\neffects_PRECTOTCORR_0_20$.smooth = NULL\neffects_PRECTOTCORR_0_20$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_0_20$upper = (exp(effects_dpd_0_20$upper) / (1 + exp(effects_dpd_0_20$upper)))\neffects_dpd_0_20$lower = (exp(effects_dpd_0_20$lower) / (1 + exp(effects_dpd_0_20$lower)))\neffects_dpd_0_20$.se = (exp(effects_dpd_0_20$.se) / (1 + exp(effects_dpd_0_20$.se)))\n\neffects_dpd_0_20$.by = NULL\neffects_dpd_0_20$.type = NULL\neffects_dpd_0_20$.estimate = NULL\neffects_dpd_0_20$.smooth = NULL\neffects_dpd_0_20$variable = \"DPD\"\n\ncolnames(effects_dpd_0_20) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_0_20 = rbind(effects_t2m_0_20,effects_rh2m_0_20,effects_t2m_max_0_20,effects_t2m_min_0_20,\n           effects_lat_0_20,effects_lon_0_20,effects_days_0_20,effects_PRECTOTCORR_0_20,effects_dpd_0_20)\n\npf_0_20 = as.data.frame(pf_0_20)\npf_0_20\nunique(pf_0_20$variable)\n\n\n\n```\n\n```{r}\npf_0_202 = pf_0_20 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_0_202 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_0_20 <- pf_0_20 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      geom_smooth(\n        aes(value, upper), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      geom_smooth(\n        aes(value, lower), se = FALSE, color = \"black\", \n        size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      ) +\n      #scale_y_continuous(n.breaks = 5, limits = c(0, 100))+\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_0_20 <- wrap_plots(plot_list_0_20, ncol = 3)\ncombined_plot_0_20\n\nggsave(\"fig/partial_effect_0_20.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_0_20_pred = predict.gam(model_0_20,se.fit = T, type = \"response\")\npred_0_20_pred = as.data.frame(pred_0_20_pred)\n\n\npred_0_20_pred$T2M = wd_0_20$T2M\npred_0_20_pred$RH2M = wd_0_20$RH2M\npred_0_20_pred$T2M_MIN = wd_0_20$T2M_MIN\npred_0_20_pred$T2M_MAX = wd_0_20$T2M_MAX\npred_0_20_pred$days_difference = wd_0_20$days_difference\npred_0_20_pred$PRECTOTCORR = wd_0_20$PRECTOTCORR\npred_0_20_pred$lat = wd_0_20$lat\npred_0_20_pred$lon = wd_0_20$lon\npred_0_20_pred$DPD = wd_0_20$DPD\n\nset.seed(123)\nsimu_0_20 <- simulate_gam(model_0_20, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_0_20_s <- simu_0_20 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\nsimu_0_20_s_long <- simu_0_20_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\nsimu_0_20_s_long %>% \n  #filter(!variables %in% c(\"lat\",\"lon\",\"days_difference\",\"DPD\")) %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")+\n  scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_20 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_0_20_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    scale_y_continuous(n.breaks = 4, limits = c(0, 80))+\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_20[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_20 <- wrap_plots(g_0_20, ncol = 3) + \n  plot_annotation(title = \"Windows: 0-20\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_20.png\", plot_0_20, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_0_20\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_0_20 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_0_20_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_0_20_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    #scale_y_continuous(n.breaks = 4, limits = c(0, 80))+\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_0_20[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_0_20 <- wrap_plots(g_0_20, ncol = 3) +\n  plot_annotation(title = \"Windows: 0-20 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_0_20_highlighted.png\", plot_0_20, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_0_20)\n\n```\n\n## 20 to 40\n\n```{r}\n\nwd_20_40 = weather_data %>% \n  dplyr::filter(days >= 20 & days <= 40)\n\n\ntrain_20_40 <- sample(1:nrow(wd_20_40), 0.95 * nrow(wd_20_40)) \n  \n  \n  train_data_20_40 <- wd_20_40[train_20_40, ]\n  test_data_20_40 <- wd_20_40[-train_20_40, ]\n```\n\n```{r}\nmodel_20_40 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n           data = wd_20_40,\n           method = \"fREML\")\n\ngc()\n```\n\n```{r}\nsummary(model_20_40)\ngam.check(model_20_40)\nAIC(model_20_40)\nBIC(model_20_40)\n```\n\n```{r}\nmodel_20_40_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_20_40,\n  method = \"REML\")\n\ngc()\n\n\npred_20_40 = predict.gam(model_20_40_pf, newdata = test_data_20_40, type = \"response\")\npred_20_40 = as.data.frame(pred_20_40)\ntest_data_20_40 = as.data.frame(test_data_20_40)\nCCC_20_40 <- epi.ccc(test_data_20_40$mean_sev, pred_20_40$pred_20_40)\nprint(CCC_20_40$rho.c) \n\n\nrhoc_20_40 <- CCC_20_40$rho.c   \nCb_20_40  <- CCC_20_40$C.b     \n\n\nrho_20_40 <- rhoc_20_40 / Cb_20_40\nrho_20_40\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_20_40 <- smooth_estimates(model_20_40, smooth = \"s(days_difference)\")\neffects_t2m_max_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M_MIN)\")\neffects_latlon_20_40 <- smooth_estimates(model_20_40, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_20_40 <- smooth_estimates(model_20_40, smooth = \"s(T2M,RH2M)\")\neffects_dpd_20_40 <- smooth_estimates(model_20_40, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_20_40 <- smooth_estimates(model_20_40, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_20_40$upper <- effects_t2m_rh2m_20_40$.estimate + 1.96 * effects_t2m_rh2m_20_40$.se  \neffects_t2m_rh2m_20_40$lower <- effects_t2m_rh2m_20_40$.estimate - 1.96 * effects_t2m_rh2m_20_40$.se \n\n# T2M MAX\n\neffects_t2m_max_20_40$upper <- effects_t2m_max_20_40$.estimate + 1.96 * effects_t2m_max_20_40$.se \neffects_t2m_max_20_40$lower <- effects_t2m_max_20_40$.estimate - 1.96 * effects_t2m_max_20_40$.se  \n\n# T2M MIN\n\neffects_t2m_min_20_40$upper <- effects_t2m_min_20_40$.estimate + 1.96 * effects_t2m_min_20_40$.se \neffects_t2m_min_20_40$lower <- effects_t2m_min_20_40$.estimate - 1.96 * effects_t2m_min_20_40$.se\n\n# Rain\n\neffects_PRECTOTCORR_20_40$upper <- effects_PRECTOTCORR_20_40$.estimate + 1.96 * effects_PRECTOTCORR_20_40$.se \neffects_PRECTOTCORR_20_40$lower <- effects_PRECTOTCORR_20_40$.estimate - 1.96 * effects_PRECTOTCORR_20_40$.se\n\n\n# Lat / Lon\n\neffects_latlon_20_40$upper <- effects_latlon_20_40$.estimate + 1.96 * effects_latlon_20_40$.se \neffects_latlon_20_40$lower <- effects_latlon_20_40$.estimate - 1.96 * effects_latlon_20_40$.se\n\n\n# Windown\n\n\neffects_days_20_40$upper <- effects_days_20_40$.estimate + 1.96 * effects_days_20_40$.se\neffects_days_20_40$lower <- effects_days_20_40$.estimate - 1.96 * effects_days_20_40$.se\n\n# DPD\n\n\neffects_dpd_20_40$upper <- effects_dpd_20_40$.estimate + 1.96 * effects_dpd_20_40$.se\neffects_dpd_20_40$lower <- effects_dpd_20_40$.estimate - 1.96 * effects_dpd_20_40$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_20_40$estimate2 = (exp(effects_t2m_rh2m_20_40$.estimate) / (1 + exp(effects_t2m_rh2m_20_40$.estimate)))\neffects_t2m_max_20_40$estimate2 = (exp(effects_t2m_max_20_40$.estimate) / (1 + exp(effects_t2m_max_20_40$.estimate)))\neffects_t2m_min_20_40$estimate2 = (exp(effects_t2m_min_20_40$.estimate) / (1 + exp(effects_t2m_min_20_40$.estimate)))\neffects_latlon_20_40$estimate2 = (exp(effects_latlon_20_40$.estimate) / (1 + exp(effects_latlon_20_40$.estimate)))\neffects_days_20_40$estimate2 = (exp(effects_days_20_40$.estimate) / (1 + exp(effects_days_20_40$.estimate)))\neffects_PRECTOTCORR_20_40$estimate2 = (exp(effects_PRECTOTCORR_20_40$.estimate) / (1 + exp(effects_PRECTOTCORR_20_40$.estimate)))\neffects_dpd_20_40$estimate2 = (exp(effects_dpd_20_40$.estimate) / (1 + exp(effects_dpd_20_40$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_20_40$upper = (exp(effects_t2m_rh2m_20_40$upper) / (1 + exp(effects_t2m_rh2m_20_40$upper)))\neffects_t2m_rh2m_20_40$lower = (exp(effects_t2m_rh2m_20_40$lower) / (1 + exp(effects_t2m_rh2m_20_40$lower)))\neffects_t2m_rh2m_20_40$.se = (exp(effects_t2m_rh2m_20_40$.se) / (1 + exp(effects_t2m_rh2m_20_40$.se)))\n\neffects_t2m_rh2m_20_40$.by = NULL\neffects_t2m_rh2m_20_40$.type = NULL\neffects_t2m_rh2m_20_40$.estimate = NULL\neffects_t2m_20_40 = effects_t2m_rh2m_20_40\neffects_rh2m_20_40 = effects_t2m_rh2m_20_40\neffects_t2m_20_40$.smooth = NULL\neffects_rh2m_20_40$.smooth = NULL\n\neffects_t2m_20_40$RH2M = NULL\neffects_t2m_20_40$variable = \"T2M\"\n\neffects_rh2m_20_40$T2M = NULL\neffects_rh2m_20_40$variable = \"RH2M\"\n\ncolnames(effects_t2m_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_20_40$upper = (exp(effects_t2m_max_20_40$upper) / (1 + exp(effects_t2m_max_20_40$upper)))\neffects_t2m_max_20_40$lower = (exp(effects_t2m_max_20_40$lower) / (1 + exp(effects_t2m_max_20_40$lower)))\neffects_t2m_max_20_40$.se = (exp(effects_t2m_max_20_40$.se) / (1 + exp(effects_t2m_max_20_40$.se)))\n\neffects_t2m_max_20_40$.by = NULL\neffects_t2m_max_20_40$.type = NULL\neffects_t2m_max_20_40$.estimate = NULL\neffects_t2m_max_20_40$.smooth = NULL\neffects_t2m_max_20_40$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_20_40$upper = (exp(effects_t2m_min_20_40$upper) / (1 + exp(effects_t2m_min_20_40$upper)))\neffects_t2m_min_20_40$lower = (exp(effects_t2m_min_20_40$lower) / (1 + exp(effects_t2m_min_20_40$lower)))\neffects_t2m_min_20_40$.se = (exp(effects_t2m_min_20_40$.se) / (1 + exp(effects_t2m_min_20_40$.se)))\n\neffects_t2m_min_20_40$.by = NULL\neffects_t2m_min_20_40$.type = NULL\neffects_t2m_min_20_40$.estimate = NULL\neffects_t2m_min_20_40$.smooth = NULL\neffects_t2m_min_20_40$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_20_40$upper = (exp(effects_latlon_20_40$upper) / (1 + exp(effects_latlon_20_40$upper)))\neffects_latlon_20_40$lower = (exp(effects_latlon_20_40$lower) / (1 + exp(effects_latlon_20_40$lower)))\neffects_latlon_20_40$.se = (exp(effects_latlon_20_40$.se) / (1 + exp(effects_latlon_20_40$.se)))\n\neffects_latlon_20_40$.by = NULL\neffects_latlon_20_40$.type = NULL\neffects_latlon_20_40$.estimate = NULL\neffects_lat_20_40 = effects_latlon_20_40\neffects_lon_20_40 = effects_latlon_20_40\neffects_lat_20_40$.smooth = NULL\neffects_lon_20_40$.smooth = NULL\n\neffects_lat_20_40$lon = NULL\neffects_lat_20_40$variable = \"Latitude\"\n\neffects_lon_20_40$lat = NULL\neffects_lon_20_40$variable = \"Longitude\"\n\ncolnames(effects_lat_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_20_40$upper = (exp(effects_days_20_40$upper) / (1 + exp(effects_days_20_40$upper)))\neffects_days_20_40$lower = (exp(effects_days_20_40$lower) / (1 + exp(effects_days_20_40$lower)))\neffects_days_20_40$.se = (exp(effects_days_20_40$.se) / (1 + exp(effects_days_20_40$.se)))\n\neffects_days_20_40$.by = NULL\neffects_days_20_40$.type = NULL\neffects_days_20_40$.estimate = NULL\neffects_days_20_40$.smooth = NULL\neffects_days_20_40$variable = \"Days\"\n\ncolnames(effects_days_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_20_40$upper = (exp(effects_PRECTOTCORR_20_40$upper) / (1 + exp(effects_PRECTOTCORR_20_40$upper)))\neffects_PRECTOTCORR_20_40$lower = (exp(effects_PRECTOTCORR_20_40$lower) / (1 + exp(effects_PRECTOTCORR_20_40$lower)))\neffects_PRECTOTCORR_20_40$.se = (exp(effects_PRECTOTCORR_20_40$.se) / (1 + exp(effects_PRECTOTCORR_20_40$.se)))\n\neffects_PRECTOTCORR_20_40$.by = NULL\neffects_PRECTOTCORR_20_40$.type = NULL\neffects_PRECTOTCORR_20_40$.estimate = NULL\neffects_PRECTOTCORR_20_40$.smooth = NULL\neffects_PRECTOTCORR_20_40$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_20_40$upper = (exp(effects_dpd_20_40$upper) / (1 + exp(effects_dpd_20_40$upper)))\neffects_dpd_20_40$lower = (exp(effects_dpd_20_40$lower) / (1 + exp(effects_dpd_20_40$lower)))\neffects_dpd_20_40$.se = (exp(effects_dpd_20_40$.se) / (1 + exp(effects_dpd_20_40$.se)))\n\neffects_dpd_20_40$.by = NULL\neffects_dpd_20_40$.type = NULL\neffects_dpd_20_40$.estimate = NULL\neffects_dpd_20_40$.smooth = NULL\neffects_dpd_20_40$variable = \"DPD\"\n\ncolnames(effects_dpd_20_40) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_20_40 = rbind(effects_t2m_20_40,effects_rh2m_20_40,effects_t2m_max_20_40,effects_t2m_min_20_40,\n           effects_lat_20_40,effects_lon_20_40,effects_days_20_40,effects_PRECTOTCORR_20_40,effects_dpd_20_40)\n\n```\n\n```{r}\npf_20_402 = pf_20_40 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_20_402 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_20_40 <- pf_20_40 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n      #geom_smooth(\n      #  aes(value, upper), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n    #  ) +\n     # geom_smooth(\n      #  aes(value, lower), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_20_40 <- wrap_plots(plot_list_20_40, ncol = 3)\ncombined_plot_20_40\n\nggsave(\"fig/partial_effect_20_40.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_20_40_pred = predict.gam(model_20_40,se.fit = T, type = \"response\")\npred_20_40_pred = as.data.frame(pred_20_40_pred)\n\n\npred_20_40_pred$T2M = wd_20_40$T2M\npred_20_40_pred$RH2M = wd_20_40$RH2M\npred_20_40_pred$T2M_MIN = wd_20_40$T2M_MIN\npred_20_40_pred$T2M_MAX = wd_20_40$T2M_MAX\npred_20_40_pred$days_difference = wd_20_40$days_difference\npred_20_40_pred$PRECTOTCORR = wd_20_40$PRECTOTCORR\npred_20_40_pred$lat = wd_20_40$lat\npred_20_40_pred$lon = wd_20_40$lon\npred_20_40_pred$DPD = wd_20_40$DPD\n\ngc()\n\nset.seed(123)\nsimu_20_40 <- simulate_gam(model_20_40, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_20_40_s <- simu_20_40 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\nsimu_20_40_s_long <- simu_20_40_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_20_40_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_20_40 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_20_40_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_20_40[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_20_40 <- wrap_plots(g_20_40, ncol = 3) + \n  plot_annotation(title = \"Windows: 20-40\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_20_40.png\", plot_20_40, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_20_40\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_20_40 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_20_40_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_20_40_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_20_40[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_20_40 <- wrap_plots(g_20_40, ncol = 3) +\n  plot_annotation(title = \"Windows: 20-40 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_20_40_highlighted.png\", plot_20_40, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_20_40)\n\n```\n\n## 40 to 60\n\n```{r}\n\nwd_40_60 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\ntrain_40_60 <- sample(1:nrow(wd_40_60), 0.95 * nrow(wd_40_60)) \n  \n  \n  train_data_40_60 <- wd_40_60[train_40_60, ]\n  test_data_40_60 <- wd_40_60[-train_40_60, ]\n```\n\n```{r}\nmodel_40_60 = bam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n          data = wd_40_60,\n          method = \"fREML\")\n\n\n\ngc()\n```\n\n```{r}\nsummary(model_40_60)\ngam.check(model_40_60)\nAIC(model_40_60)\nBIC(model_40_60)\n```\n\n```{r}\nmodel_40_60_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) +\n           s(lat, lon, bs = \"tp\", k = 60)+\n           s(days_difference, bs = \"cr\", k =60)+\n           s(T2M,RH2M, bs = 'tp', k =60)+ \n           s(T2M_MAX, bs = \"cr\", k = 60)+\n           s(PRECTOTCORR, bs = \"cr\", k = 60)+\n           s(DPD, bs = \"cr\", k = 60),\n          family = betar(),\n  data = train_data_40_60,\n  method = \"REML\")\n\ngc()\n\n\npred_40_60 = predict.gam(model_40_60_pf, newdata = test_data_40_60, type = \"response\")\npred_40_60 = as.data.frame(pred_40_60)\ntest_data_40_60 = as.data.frame(test_data_40_60)\nCCC_40_60 <- epi.ccc(test_data_40_60$mean_sev, pred_40_60$pred_40_60)\nprint(CCC_40_60$rho.c) \n\n\nrhoc_40_60 <- CCC_40_60$rho.c   \nCb_40_60  <- CCC_40_60$C.b     \n\n\nrho_40_60 <- rhoc_40_60 / Cb_40_60\nrho_40_60\n\ntest_data_40_60$pred = pred_40_60$pred_40_60\n\ntest_data_40_60 %>% \n  ggplot(aes(mean_sev, pred))+\n  geom_point()\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n\neffects_days_40_60 <- smooth_estimates(model_40_60, smooth = \"s(days_difference)\")\neffects_t2m_max_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M_MIN)\")\neffects_latlon_40_60 <- smooth_estimates(model_40_60, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_40_60 <- smooth_estimates(model_40_60, smooth = \"s(T2M,RH2M)\")\neffects_dpd_40_60 <- smooth_estimates(model_40_60, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_40_60 <- smooth_estimates(model_40_60, smooth = \"s(PRECTOTCORR)\")\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_40_60$upper <- effects_t2m_rh2m_40_60$.estimate + 1.96 * effects_t2m_rh2m_40_60$.se  \neffects_t2m_rh2m_40_60$lower <- effects_t2m_rh2m_40_60$.estimate - 1.96 * effects_t2m_rh2m_40_60$.se \n\n# T2M MAX\n\neffects_t2m_max_40_60$upper <- effects_t2m_max_40_60$.estimate + 1.96 * effects_t2m_max_40_60$.se \neffects_t2m_max_40_60$lower <- effects_t2m_max_40_60$.estimate - 1.96 * effects_t2m_max_40_60$.se  \n\n# T2M MIN\n\neffects_t2m_min_40_60$upper <- effects_t2m_min_40_60$.estimate + 1.96 * effects_t2m_min_40_60$.se \neffects_t2m_min_40_60$lower <- effects_t2m_min_40_60$.estimate - 1.96 * effects_t2m_min_40_60$.se\n\n# Rain\n\neffects_PRECTOTCORR_40_60$upper <- effects_PRECTOTCORR_40_60$.estimate + 1.96 * effects_PRECTOTCORR_40_60$.se \neffects_PRECTOTCORR_40_60$lower <- effects_PRECTOTCORR_40_60$.estimate - 1.96 * effects_PRECTOTCORR_40_60$.se\n\n\n# Lat / Lon\n\neffects_latlon_40_60$upper <- effects_latlon_40_60$.estimate + 1.96 * effects_latlon_40_60$.se \neffects_latlon_40_60$lower <- effects_latlon_40_60$.estimate - 1.96 * effects_latlon_40_60$.se\n\n\n# Windown\n\n\neffects_days_40_60$upper <- effects_days_40_60$.estimate + 1.96 * effects_days_40_60$.se\neffects_days_40_60$lower <- effects_days_40_60$.estimate - 1.96 * effects_days_40_60$.se\n\n# DPD\n\n\neffects_dpd_40_60$upper <- effects_dpd_40_60$.estimate + 1.96 * effects_dpd_40_60$.se\neffects_dpd_40_60$lower <- effects_dpd_40_60$.estimate - 1.96 * effects_dpd_40_60$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_40_60$estimate2 = (exp(effects_t2m_rh2m_40_60$.estimate) / (1 + exp(effects_t2m_rh2m_40_60$.estimate)))\neffects_t2m_max_40_60$estimate2 = (exp(effects_t2m_max_40_60$.estimate) / (1 + exp(effects_t2m_max_40_60$.estimate)))\neffects_t2m_min_40_60$estimate2 = (exp(effects_t2m_min_40_60$.estimate) / (1 + exp(effects_t2m_min_40_60$.estimate)))\neffects_latlon_40_60$estimate2 = (exp(effects_latlon_40_60$.estimate) / (1 + exp(effects_latlon_40_60$.estimate)))\neffects_days_40_60$estimate2 = (exp(effects_days_40_60$.estimate) / (1 + exp(effects_days_40_60$.estimate)))\neffects_PRECTOTCORR_40_60$estimate2 = (exp(effects_PRECTOTCORR_40_60$.estimate) / (1 + exp(effects_PRECTOTCORR_40_60$.estimate)))\neffects_dpd_40_60$estimate2 = (exp(effects_dpd_40_60$.estimate) / (1 + exp(effects_dpd_40_60$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_40_60$upper = (exp(effects_t2m_rh2m_40_60$upper) / (1 + exp(effects_t2m_rh2m_40_60$upper)))\neffects_t2m_rh2m_40_60$lower = (exp(effects_t2m_rh2m_40_60$lower) / (1 + exp(effects_t2m_rh2m_40_60$lower)))\neffects_t2m_rh2m_40_60$.se = (exp(effects_t2m_rh2m_40_60$.se) / (1 + exp(effects_t2m_rh2m_40_60$.se)))\n\neffects_t2m_rh2m_40_60$.by = NULL\neffects_t2m_rh2m_40_60$.type = NULL\neffects_t2m_rh2m_40_60$.estimate = NULL\neffects_t2m_40_60 = effects_t2m_rh2m_40_60\neffects_rh2m_40_60 = effects_t2m_rh2m_40_60\neffects_t2m_40_60$.smooth = NULL\neffects_rh2m_40_60$.smooth = NULL\n\neffects_t2m_40_60$RH2M = NULL\neffects_t2m_40_60$variable = \"T2M\"\n\neffects_rh2m_40_60$T2M = NULL\neffects_rh2m_40_60$variable = \"RH2M\"\n\ncolnames(effects_t2m_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_40_60$upper = (exp(effects_t2m_max_40_60$upper) / (1 + exp(effects_t2m_max_40_60$upper)))\neffects_t2m_max_40_60$lower = (exp(effects_t2m_max_40_60$lower) / (1 + exp(effects_t2m_max_40_60$lower)))\neffects_t2m_max_40_60$.se = (exp(effects_t2m_max_40_60$.se) / (1 + exp(effects_t2m_max_40_60$.se)))\n\neffects_t2m_max_40_60$.by = NULL\neffects_t2m_max_40_60$.type = NULL\neffects_t2m_max_40_60$.estimate = NULL\neffects_t2m_max_40_60$.smooth = NULL\neffects_t2m_max_40_60$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_40_60$upper = (exp(effects_t2m_min_40_60$upper) / (1 + exp(effects_t2m_min_40_60$upper)))\neffects_t2m_min_40_60$lower = (exp(effects_t2m_min_40_60$lower) / (1 + exp(effects_t2m_min_40_60$lower)))\neffects_t2m_min_40_60$.se = (exp(effects_t2m_min_40_60$.se) / (1 + exp(effects_t2m_min_40_60$.se)))\n\neffects_t2m_min_40_60$.by = NULL\neffects_t2m_min_40_60$.type = NULL\neffects_t2m_min_40_60$.estimate = NULL\neffects_t2m_min_40_60$.smooth = NULL\neffects_t2m_min_40_60$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_40_60$upper = (exp(effects_latlon_40_60$upper) / (1 + exp(effects_latlon_40_60$upper)))\neffects_latlon_40_60$lower = (exp(effects_latlon_40_60$lower) / (1 + exp(effects_latlon_40_60$lower)))\neffects_latlon_40_60$.se = (exp(effects_latlon_40_60$.se) / (1 + exp(effects_latlon_40_60$.se)))\n\neffects_latlon_40_60$.by = NULL\neffects_latlon_40_60$.type = NULL\neffects_latlon_40_60$.estimate = NULL\neffects_lat_40_60 = effects_latlon_40_60\neffects_lon_40_60 = effects_latlon_40_60\neffects_lat_40_60$.smooth = NULL\neffects_lon_40_60$.smooth = NULL\n\neffects_lat_40_60$lon = NULL\neffects_lat_40_60$variable = \"Latitude\"\n\neffects_lon_40_60$lat = NULL\neffects_lon_40_60$variable = \"Longitude\"\n\ncolnames(effects_lat_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_40_60$upper = (exp(effects_days_40_60$upper) / (1 + exp(effects_days_40_60$upper)))\neffects_days_40_60$lower = (exp(effects_days_40_60$lower) / (1 + exp(effects_days_40_60$lower)))\neffects_days_40_60$.se = (exp(effects_days_40_60$.se) / (1 + exp(effects_days_40_60$.se)))\n\neffects_days_40_60$.by = NULL\neffects_days_40_60$.type = NULL\neffects_days_40_60$.estimate = NULL\neffects_days_40_60$.smooth = NULL\neffects_days_40_60$variable = \"Days\"\n\ncolnames(effects_days_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_40_60$upper = (exp(effects_PRECTOTCORR_40_60$upper) / (1 + exp(effects_PRECTOTCORR_40_60$upper)))\neffects_PRECTOTCORR_40_60$lower = (exp(effects_PRECTOTCORR_40_60$lower) / (1 + exp(effects_PRECTOTCORR_40_60$lower)))\neffects_PRECTOTCORR_40_60$.se = (exp(effects_PRECTOTCORR_40_60$.se) / (1 + exp(effects_PRECTOTCORR_40_60$.se)))\n\neffects_PRECTOTCORR_40_60$.by = NULL\neffects_PRECTOTCORR_40_60$.type = NULL\neffects_PRECTOTCORR_40_60$.estimate = NULL\neffects_PRECTOTCORR_40_60$.smooth = NULL\neffects_PRECTOTCORR_40_60$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_40_60$upper = (exp(effects_dpd_40_60$upper) / (1 + exp(effects_dpd_40_60$upper)))\neffects_dpd_40_60$lower = (exp(effects_dpd_40_60$lower) / (1 + exp(effects_dpd_40_60$lower)))\neffects_dpd_40_60$.se = (exp(effects_dpd_40_60$.se) / (1 + exp(effects_dpd_40_60$.se)))\n\neffects_dpd_40_60$.by = NULL\neffects_dpd_40_60$.type = NULL\neffects_dpd_40_60$.estimate = NULL\neffects_dpd_40_60$.smooth = NULL\neffects_dpd_40_60$variable = \"DPD\"\n\ncolnames(effects_dpd_40_60) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_40_60 = rbind(effects_t2m_40_60,effects_rh2m_40_60,effects_t2m_max_40_60,effects_t2m_min_40_60,\n           effects_lat_40_60,effects_lon_40_60,effects_days_40_60,effects_PRECTOTCORR_40_60,effects_dpd_40_60)\n\n```\n\n```{r}\npf_40_602 = pf_40_60 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_40_602 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_40_60 <- pf_40_60 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n     # geom_smooth(\n      #  aes(value, upper), se = FALSE, color = \"black\", \n       # size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      #geom_smooth(\n       # aes(value, lower), se = FALSE, color = \"black\", \n        #size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_40_60 <- wrap_plots(plot_list_40_60, ncol = 3)\ncombined_plot_40_60\n\nggsave(\"fig/partial_effect_40_60.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_40_60_pred = predict.gam(model_40_60,se.fit = T, type = \"response\")\npred_40_60_pred = as.data.frame(pred_40_60_pred)\n\n\npred_40_60_pred$T2M = wd_40_60$T2M\npred_40_60_pred$RH2M = wd_40_60$RH2M\npred_40_60_pred$T2M_MIN = wd_40_60$T2M_MIN\npred_40_60_pred$T2M_MAX = wd_40_60$T2M_MAX\npred_40_60_pred$days_difference = wd_40_60$days_difference\npred_40_60_pred$PRECTOTCORR = wd_40_60$PRECTOTCORR\npred_40_60_pred$lat = wd_40_60$lat\npred_40_60_pred$lon = wd_40_60$lon\npred_40_60_pred$DPD = wd_40_60$DPD\n\ngc()\n\n\nset.seed(123)\nsimu_40_60 <- simulate_gam(model_40_60, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_40_60_s <- simu_40_60 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025)\n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\n\nsimu_40_60_s_long <- simu_40_60_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_40_60_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_40_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_40_60_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_40_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_40_60 <- wrap_plots(g_40_60, ncol = 3) + \n  plot_annotation(title = \"Windows: 40-60\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_40_60.png\", plot_40_60, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_40_60\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_40_60 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_40_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_40_60_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_40_60[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_40_60 <- wrap_plots(g_40_60, ncol = 3) +\n  plot_annotation(title = \"Windows: 40-60 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_40_60_highlighted.png\", plot_40_60, width = 8, height = 8, dpi = 600)\n\n# Visualizar o gráfico combinado\nprint(plot_40_60)\n\n```\n\n## 60 to 80\n\n```{r}\n\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 60 & days <= 80)\n\n\ntrain_60_80 <- sample(1:nrow(wd_60_80), 0.95 * nrow(wd_60_80)) \n  \n  \n  train_data_60_80 <- wd_60_80[train_60_80, ]\n  test_data_60_80 <- wd_60_80[-train_60_80, ]\n```\n\n```{r}\nmodel_60_80 = bam(\n mean_sev~  s(T2M_MIN,bs='cr', k =60) + \n           s(lat, lon, bs = \"tp\", k = 60) + \n           s(days_difference, bs = \"cr\", k =60) +\n           s(T2M,RH2M, bs = 'tp', k =60) +\n           s(T2M_MAX, bs = \"cr\", k = 60) +\n           s(PRECTOTCORR, bs = \"cr\", k = 60) +\n           s(DPD, bs = \"cr\", k = 60),\n           family = betar(),\n          data = wd_60_80,\n         method = \"fREML\")\n\ngc()\n```\n\n```{r}\nsummary(model_60_80)\ngam.check(model_60_80)\nAIC(model_60_80)\nBIC(model_60_80)\n```\n\n```{r}\nmodel_60_80_pf = gam(\n mean_sev~ s(T2M_MIN,bs='cr', k =60) + s(lat, lon, bs = \"tp\", k = 60) + s(days_difference, bs = \"cr\", k =60) + s(T2M,RH2M, bs = 'tp', k =60) + s(T2M_MAX, bs = \"cr\", k = 60) + s(PRECTOTCORR, bs = \"cr\", k = 60) + s(DPD, bs = \"cr\", k = 60),\n  family = betar(),\n  data = train_data_60_80,\n  method = \"REML\")\n\ngc()\n\npred_60_80 = predict.gam(model_60_80_pf, newdata = test_data_60_80, type = \"response\")\npred_60_80 = as.data.frame(pred_60_80)\ntest_data_60_80 = as.data.frame(test_data_60_80)\nCCC_60_80 <- epi.ccc(test_data_60_80$mean_sev, pred_60_80$pred_60_80)\nprint(CCC_60_80$rho.c) \n\n\nrhoc_60_80 <- CCC_60_80$rho.c   \nCb_60_80  <- CCC_60_80$C.b     \n\n\nrho_60_80 <- rhoc_60_80 / Cb_60_80\nrho_60_80\n\n```\n\n### Partial effect\n\n#### Smooth estimation\n\n```{r}\n\nlibrary(gratia)\n#effects_days_60_80 <- smooth_estimates(model_60_80, smooth = \"s(days_difference)\", n = 1000)\neffects_days_60_80 <- smooth_estimates(model_60_80, smooth = \"s(days_difference)\")\neffects_t2m_max_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M_MAX)\")\neffects_t2m_min_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M_MIN)\")\neffects_latlon_60_80 <- smooth_estimates(model_60_80, smooth = \"s(lat,lon)\")\neffects_t2m_rh2m_60_80 <- smooth_estimates(model_60_80, smooth = \"s(T2M,RH2M)\")\neffects_dpd_60_80 <- smooth_estimates(model_60_80, smooth = \"s(DPD)\")\neffects_PRECTOTCORR_60_80 <- smooth_estimates(model_60_80, smooth = \"s(PRECTOTCORR)\")\n\ngc()\n```\n\n#### Confidence interval\n\n```{r}\n\n# T2M/RH2M\n\neffects_t2m_rh2m_60_80$upper <- effects_t2m_rh2m_60_80$.estimate + 1.96 * effects_t2m_rh2m_60_80$.se  \neffects_t2m_rh2m_60_80$lower <- effects_t2m_rh2m_60_80$.estimate - 1.96 * effects_t2m_rh2m_60_80$.se \n\n# T2M MAX\n\neffects_t2m_max_60_80$upper <- effects_t2m_max_60_80$.estimate + 1.96 * effects_t2m_max_60_80$.se \neffects_t2m_max_60_80$lower <- effects_t2m_max_60_80$.estimate - 1.96 * effects_t2m_max_60_80$.se  \n\n# T2M MIN\n\neffects_t2m_min_60_80$upper <- effects_t2m_min_60_80$.estimate + 1.96 * effects_t2m_min_60_80$.se \neffects_t2m_min_60_80$lower <- effects_t2m_min_60_80$.estimate - 1.96 * effects_t2m_min_60_80$.se\n\n# Rain\n\neffects_PRECTOTCORR_60_80$upper <- effects_PRECTOTCORR_60_80$.estimate + 1.96 * effects_PRECTOTCORR_60_80$.se \neffects_PRECTOTCORR_60_80$lower <- effects_PRECTOTCORR_60_80$.estimate - 1.96 * effects_PRECTOTCORR_60_80$.se\n\n\n# Lat / Lon\n\neffects_latlon_60_80$upper <- effects_latlon_60_80$.estimate + 1.96 * effects_latlon_60_80$.se \neffects_latlon_60_80$lower <- effects_latlon_60_80$.estimate - 1.96 * effects_latlon_60_80$.se\n\n\n# Windown\n\n\neffects_days_60_80$upper <- effects_days_60_80$.estimate + 1.96 * effects_days_60_80$.se\neffects_days_60_80$lower <- effects_days_60_80$.estimate - 1.96 * effects_days_60_80$.se\n\n# DPD\n\n\neffects_dpd_60_80$upper <- effects_dpd_60_80$.estimate + 1.96 * effects_dpd_60_80$.se\neffects_dpd_60_80$lower <- effects_dpd_60_80$.estimate - 1.96 * effects_dpd_60_80$.se\n\n```\n\n#### Inverse link function\n\n##### Estimate\n\n```{r}\neffects_t2m_rh2m_60_80$estimate2 = (exp(effects_t2m_rh2m_60_80$.estimate) / (1 + exp(effects_t2m_rh2m_60_80$.estimate)))\neffects_t2m_max_60_80$estimate2 = (exp(effects_t2m_max_60_80$.estimate) / (1 + exp(effects_t2m_max_60_80$.estimate)))\neffects_t2m_min_60_80$estimate2 = (exp(effects_t2m_min_60_80$.estimate) / (1 + exp(effects_t2m_min_60_80$.estimate)))\neffects_latlon_60_80$estimate2 = (exp(effects_latlon_60_80$.estimate) / (1 + exp(effects_latlon_60_80$.estimate)))\neffects_days_60_80$estimate2 = (exp(effects_days_60_80$.estimate) / (1 + exp(effects_days_60_80$.estimate)))\neffects_PRECTOTCORR_60_80$estimate2 = (exp(effects_PRECTOTCORR_60_80$.estimate) / (1 + exp(effects_PRECTOTCORR_60_80$.estimate)))\neffects_dpd_60_80$estimate2 = (exp(effects_dpd_60_80$.estimate) / (1 + exp(effects_dpd_60_80$.estimate)))\n\n```\n\n##### Confidence interval\n\n```{r}\neffects_t2m_rh2m_60_80$upper = (exp(effects_t2m_rh2m_60_80$upper) / (1 + exp(effects_t2m_rh2m_60_80$upper)))\neffects_t2m_rh2m_60_80$lower = (exp(effects_t2m_rh2m_60_80$lower) / (1 + exp(effects_t2m_rh2m_60_80$lower)))\neffects_t2m_rh2m_60_80$.se = (exp(effects_t2m_rh2m_60_80$.se) / (1 + exp(effects_t2m_rh2m_60_80$.se)))\n\neffects_t2m_rh2m_60_80$.by = NULL\neffects_t2m_rh2m_60_80$.type = NULL\neffects_t2m_rh2m_60_80$.estimate = NULL\neffects_t2m_60_80 = effects_t2m_rh2m_60_80\neffects_rh2m_60_80 = effects_t2m_rh2m_60_80\neffects_t2m_60_80$.smooth = NULL\neffects_rh2m_60_80$.smooth = NULL\n\neffects_t2m_60_80$RH2M = NULL\neffects_t2m_60_80$variable = \"T2M\"\n\neffects_rh2m_60_80$T2M = NULL\neffects_rh2m_60_80$variable = \"RH2M\"\n\ncolnames(effects_t2m_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_rh2m_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\n\neffects_t2m_max_60_80$upper = (exp(effects_t2m_max_60_80$upper) / (1 + exp(effects_t2m_max_60_80$upper)))\neffects_t2m_max_60_80$lower = (exp(effects_t2m_max_60_80$lower) / (1 + exp(effects_t2m_max_60_80$lower)))\neffects_t2m_max_60_80$.se = (exp(effects_t2m_max_60_80$.se) / (1 + exp(effects_t2m_max_60_80$.se)))\n\neffects_t2m_max_60_80$.by = NULL\neffects_t2m_max_60_80$.type = NULL\neffects_t2m_max_60_80$.estimate = NULL\neffects_t2m_max_60_80$.smooth = NULL\neffects_t2m_max_60_80$variable = \"T2M_MAX\"\n\ncolnames(effects_t2m_max_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_t2m_min_60_80$upper = (exp(effects_t2m_min_60_80$upper) / (1 + exp(effects_t2m_min_60_80$upper)))\neffects_t2m_min_60_80$lower = (exp(effects_t2m_min_60_80$lower) / (1 + exp(effects_t2m_min_60_80$lower)))\neffects_t2m_min_60_80$.se = (exp(effects_t2m_min_60_80$.se) / (1 + exp(effects_t2m_min_60_80$.se)))\n\neffects_t2m_min_60_80$.by = NULL\neffects_t2m_min_60_80$.type = NULL\neffects_t2m_min_60_80$.estimate = NULL\neffects_t2m_min_60_80$.smooth = NULL\neffects_t2m_min_60_80$variable = \"T2M_MIN\"\n\ncolnames(effects_t2m_min_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_latlon_60_80$upper = (exp(effects_latlon_60_80$upper) / (1 + exp(effects_latlon_60_80$upper)))\neffects_latlon_60_80$lower = (exp(effects_latlon_60_80$lower) / (1 + exp(effects_latlon_60_80$lower)))\neffects_latlon_60_80$.se = (exp(effects_latlon_60_80$.se) / (1 + exp(effects_latlon_60_80$.se)))\n\neffects_latlon_60_80$.by = NULL\neffects_latlon_60_80$.type = NULL\neffects_latlon_60_80$.estimate = NULL\neffects_lat_60_80 = effects_latlon_60_80\neffects_lon_60_80 = effects_latlon_60_80\neffects_lat_60_80$.smooth = NULL\neffects_lon_60_80$.smooth = NULL\n\neffects_lat_60_80$lon = NULL\neffects_lat_60_80$variable = \"Latitude\"\n\neffects_lon_60_80$lat = NULL\neffects_lon_60_80$variable = \"Longitude\"\n\ncolnames(effects_lat_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\ncolnames(effects_lon_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\neffects_days_60_80$upper = (exp(effects_days_60_80$upper) / (1 + exp(effects_days_60_80$upper)))\neffects_days_60_80$lower = (exp(effects_days_60_80$lower) / (1 + exp(effects_days_60_80$lower)))\neffects_days_60_80$.se = (exp(effects_days_60_80$.se) / (1 + exp(effects_days_60_80$.se)))\n\neffects_days_60_80$.by = NULL\neffects_days_60_80$.type = NULL\neffects_days_60_80$.estimate = NULL\neffects_days_60_80$.smooth = NULL\neffects_days_60_80$variable = \"Days\"\n\ncolnames(effects_days_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_PRECTOTCORR_60_80$upper = (exp(effects_PRECTOTCORR_60_80$upper) / (1 + exp(effects_PRECTOTCORR_60_80$upper)))\neffects_PRECTOTCORR_60_80$lower = (exp(effects_PRECTOTCORR_60_80$lower) / (1 + exp(effects_PRECTOTCORR_60_80$lower)))\neffects_PRECTOTCORR_60_80$.se = (exp(effects_PRECTOTCORR_60_80$.se) / (1 + exp(effects_PRECTOTCORR_60_80$.se)))\n\neffects_PRECTOTCORR_60_80$.by = NULL\neffects_PRECTOTCORR_60_80$.type = NULL\neffects_PRECTOTCORR_60_80$.estimate = NULL\neffects_PRECTOTCORR_60_80$.smooth = NULL\neffects_PRECTOTCORR_60_80$variable = \"Rain\"\n\ncolnames(effects_PRECTOTCORR_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\neffects_dpd_60_80$upper = (exp(effects_dpd_60_80$upper) / (1 + exp(effects_dpd_60_80$upper)))\neffects_dpd_60_80$lower = (exp(effects_dpd_60_80$lower) / (1 + exp(effects_dpd_60_80$lower)))\neffects_dpd_60_80$.se = (exp(effects_dpd_60_80$.se) / (1 + exp(effects_dpd_60_80$.se)))\n\neffects_dpd_60_80$.by = NULL\neffects_dpd_60_80$.type = NULL\neffects_dpd_60_80$.estimate = NULL\neffects_dpd_60_80$.smooth = NULL\neffects_dpd_60_80$variable = \"DPD\"\n\ncolnames(effects_dpd_60_80) = c(\"se\", \"value\",\"upper\",\"lower\",\"effect\",\"variable\")\n\n\npf_60_80 = rbind(effects_t2m_60_80,effects_rh2m_60_80,effects_t2m_max_60_80,effects_t2m_min_60_80,\n           effects_lat_60_80,effects_lon_60_80,effects_days_60_80,effects_PRECTOTCORR_60_80,effects_dpd_60_80)\n\n```\n\n```{r}\npf_60_802 = pf_60_80 %>% \n  group_by(variable) %>% \n  summarise(\n    effect = mean(effect),\n    upper = mean(upper),\n    lower = mean(lower)\n  )\n\npf_60_802 %>% \n  ggplot(aes(variable, effect, group = variable))+\ngeom_pointrange(aes(ymin = lower, ymax = upper))+\n  ggthemes::theme_few()\n```\n\n```{r}\n\npf_0_202$windows = c(\"0 to 20\")\npf_20_402$windows = c(\"20 to 40\")\npf_40_602$windows = c(\"40 to 60\")\npf_60_802$windows = c(\"60 to 80\")\n\npf_all_effect = rbind(pf_0_202,pf_20_402,pf_40_602,pf_60_802)\n\npf_all_effect %>% \n  ggplot(aes(variable, effect, group = windows, color = windows))+\ngeom_pointrange(aes(ymin = lower, ymax = upper), position = position_dodge(0.8))+\n  ggthemes::theme_few()+\n  scale_color_viridis_d()\n  #facet_wrap(~windows)\n```\n\n```{r}\n\npf_0_20$windows = c(\"0 to 20\")\npf_20_40$windows = c(\"20 to 40\")\npf_40_60$windows = c(\"40 to 60\")\npf_60_80$windows = c(\"60 to 80\")\n\neffect_pf = rbind(pf_0_20,pf_20_40,pf_40_60,pf_60_80)\n\neffect_pf %>% \n  filter(variable == \"DPD\") %>% \nggplot(aes(x = effect)) +\n  stat_halfeye(fill = \"#ffc425\", alpha = 0.7)+\n  \n  ggthemes::theme_few() +\n\n  labs(\n    y = \"Density\",\n    x = \"Effect (%)\")+\n    theme(\n    text = element_text(face = \"bold\", size = 14),\n    axis.title = element_text(size = 20, face = \"bold\"),\n    axis.text.x = element_text(vjust = 1, size = 14, face = \"bold\"),\n    axis.text.y = element_text(vjust = 1, size = 14, face = \"bold\"),\n    legend.position = \"none\",\n    legend.justification = 0.5,\n    panel.grid = element_blank())+\n   facet_wrap(~windows)\n```\n\n### Plotting\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n\nplot_list_60_80 <- pf_60_80 %>%\n  group_by(variable) %>%\n  group_split() %>%\n  lapply(function(df) {\n    ggplot(df, aes(x = value, y = effect)) +\n      geom_smooth(\n        method = \"gam\", formula = y ~ s(x, bs = \"cr\"), \n        se = FALSE, color = \"black\", size = 1.5\n      ) +\n     # geom_smooth(\n     #  aes(value, upper), se = FALSE, color = \"black\", \n     #   size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n     # ) +\n     #  geom_smooth(\n      #  aes(value, lower), se = FALSE, color = \"black\", \n      #  size = 1, linetype = \"dashed\", method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n      #) +\n      labs(x = unique(df$variable),\n        y = \"Partial Effect\"\n      ) +\n      theme_minimal() +\n      \n      theme(plot.title = element_text(hjust = 0.5),\n            text = element_text(size = 12, face = \"bold\"))\n  })\n\n# Combinar os gráficos\ncombined_plot_60_80 <- wrap_plots(plot_list_60_80, ncol = 3)\ncombined_plot_60_80\n\nggsave(\"fig/partial_effect_60_80.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n\n### Prediction\n\n```{r}\npred_60_80_pred = predict.gam(model_60_80,se.fit = T, type = \"response\")\npred_60_80_pred = as.data.frame(pred_60_80_pred)\n\n\npred_60_80_pred$T2M = wd_60_80$T2M\npred_60_80_pred$RH2M = wd_60_80$RH2M\npred_60_80_pred$T2M_MIN = wd_60_80$T2M_MIN\npred_60_80_pred$T2M_MAX = wd_60_80$T2M_MAX\npred_60_80_pred$days_difference = wd_60_80$days_difference\npred_60_80_pred$PRECTOTCORR = wd_60_80$PRECTOTCORR\npred_60_80_pred$lat = wd_60_80$lat\npred_60_80_pred$lon = wd_60_80$lon\npred_60_80_pred$DPD = wd_60_80$DPD\n\ngc()\n\nset.seed(123)\nsimu_60_80 <- simulate_gam(model_60_80, nsim = 100, value = \"data.frame\")\n\n\n\nsimu_60_80_s <- simu_60_80 %>%\n  dplyr::group_by(id,days) %>%\n  summarise(\n    mean_sev = mean(sim.y, na.rm = TRUE),\n    T2M = mean(T2M, na.rm = TRUE),\n    T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n    T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n    RH2M = mean(RH2M, na.rm = TRUE),\n    PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n    DPD = mean(DPD, na.rm = TRUE),\n    lat = mean(lat, na.rm = TRUE),\n    lon = mean(lon, na.rm = TRUE),\n    days_difference = mean(days_difference, na.rm = TRUE),\n    up_95 = quantile(sim.y, 0.975),  \n    low_95 = quantile(sim.y, 0.025) \n    #se = sd(sim.y, na.rm = TRUE) / sqrt(n()),    \n    #max = max(sim.y, na.rm = TRUE),         \n    #min = min(sim.y, na.rm = TRUE)         \n  )\n\n\nsimu_60_80_s_long <- simu_60_80_s %>%\n  pivot_longer(\n    cols = -c(id, days,up_95,low_95,mean_sev),  # Mantém apenas 'id' e 'days' fixos\n    names_to = \"variables\",  # Nome da nova coluna com os nomes das variáveis\n    values_to = \"values\"  # Nome da nova coluna com os valores correspondentes\n  )\n\nsimu_60_80_s_long %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev), \n    se = FALSE, color = \"black\", size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95), \n    se = FALSE, color = \"black\", size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork) # Para combinar os gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_60_80 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- pred_60_80_pred %>%\n    ggplot(aes_string(x = var, y = \"fit*100\")) + # aes_string para usar a variável dinamicamente\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2) +\n    theme_minimal() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_60_80[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_60_80 <- wrap_plots(g_60_80, ncol = 3) + \n  plot_annotation(title = \"Windows: 60-80\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_60_80.png\", plot_60_80, width = 12, height = 10, dpi = 300)\n\n# Visualizar o gráfico combinado\nplot_60_80\n\n```\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(patchwork)  # Para combinar gráficos\nlibrary(dplyr)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ng_60_80 <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Identificar os intervalos onde y_scaled >= 30\n  highlight_ranges <- pred_60_80_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    filter(y_scaled >= 30) %>%\n    summarise(\n      xmin = min(!!sym(var), na.rm = TRUE),\n      xmax = max(!!sym(var), na.rm = TRUE)\n    )\n  \n  # Criar o gráfico para a variável\n  p <- pred_60_80_pred %>%\n    mutate(y_scaled = fit * 100) %>%\n    ggplot(aes_string(x = var, y = \"y_scaled\")) +\n    geom_smooth(color = \"black\", se = TRUE, fill = \"white\", size = 2.5) +\n    \n    # Adicionar faixa cinza (se houver intervalo identificado)\n    { if (nrow(highlight_ranges) > 0) \n        geom_rect(data = highlight_ranges, inherit.aes = FALSE,\n                  aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                  fill = \"darkred\", alpha = 0.3) \n      else NULL } +\n    \n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  g_60_80[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\nplot_60_80 <- wrap_plots(g_60_80, ncol = 3) +\n  plot_annotation(title = \"Windows: 60-80 (Severity > 30 Highlighted)\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/pred_60_80_highlighted.png\", plot_60_80, width = 8, height = 8, dpi = 300)\n\n# Visualizar o gráfico combinado\nprint(plot_60_80)\n\n```\n\n```{r}\nsimu_0_20_s_long$windows = c(\"0 to 20\")\nsimu_20_40_s_long$windows = c(\"20 to 40\")\nsimu_40_60_s_long$windows = c(\"40 to 60\")\nsimu_60_80_s_long$windows = c(\"60 to 80\")\n\nall_simu = rbind(simu_0_20_s_long,simu_20_40_s_long,simu_40_60_s_long,simu_60_80_s_long)\n\n\nall_simu %>% \nggplot() +\n  \n  #geom_smooth(\n   # aes(x = PRECTOTCORR, y = sim.y, group = ii), se = FALSE, \n  #  color = \"grey\", alpha = 0.09,\n   # method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  #) +\n # geom_line(\n  #  data = simu_0_20,\n   # aes(x = T2M, y = sim.y, group = interaction(id, .sim)), \n    #color = \"grey\", alpha = 0.1\n  #) +\n  geom_smooth(aes(x = values, y = mean_sev, group = windows, color = windows), \n    se = FALSE, size = 2, linetype = \"solid\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite superior do intervalo de confiança\n  geom_smooth(aes(x = values, y = up_95, group = windows, color = windows), \n    se = FALSE, size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  # Limite inferior do intervalo de confiança\n  geom_smooth(aes(x = values, y = low_95, group = windows, color = windows), \n    se = FALSE, size = 1, linetype = \"dashed\",\n    method = \"gam\", formula = y ~ s(x, bs = \"cr\")\n  ) +\n  ggthemes::theme_few()+\n  facet_wrap(~variables,scales = \"free_x\")#+\n  #scale_y_continuous(breaks = c(0,0.10,0.20,0.30,0.40,0.50),limits = c(0,0.50))\n```\n\n## By period\n\n### T2M\n\n```{r}\nhr_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_0_20 <- simu_0_20_s %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_0_20) > 0) \n      geom_rect(data = hr_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_20_40) > 0) \n      geom_rect(data = hr_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_40_60) > 0) \n      geom_rect(data = hr_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_60_80) > 0) \n      geom_rect(data = hr_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nplot_grid(T2M_0_20,T2M_20_40,T2M_40_60,T2M_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### T2M MAX\n\n```{r}\nhr_t2m_max_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_0_20) > 0) \n      geom_rect(data = hr_t2m_max_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_t2m_max_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_20_40) > 0) \n      geom_rect(data = hr_t2m_max_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_max_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_40_60) > 0) \n      geom_rect(data = hr_t2m_max_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_max_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MAX, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MAX, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MAX_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MAX, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_max_60_80) > 0) \n      geom_rect(data = hr_t2m_max_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MAX\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(T2M_MAX_0_20,T2M_MAX_20_40,T2M_MAX_40_60,T2M_MAX_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_MAX_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### T2M MIN\n\n```{r}\nhr_t2m_min_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_0_20) > 0) \n      geom_rect(data = hr_t2m_min_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_t2m_min_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_20_40) > 0) \n      geom_rect(data = hr_t2m_min_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_min_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_40_60) > 0) \n      geom_rect(data = hr_t2m_min_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_t2m_min_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(T2M_MIN, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(T2M_MIN, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nT2M_MIN_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(T2M_MIN, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_t2m_min_60_80) > 0) \n      geom_rect(data = hr_t2m_min_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"T2M_MIN\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(T2M_MIN_0_20,T2M_MIN_20_40,T2M_MIN_40_60,T2M_MIN_60_80,\n          ncol = 4)\n\nggsave(\"fig/T2M_MIN_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n```\n\n### RH2M\n\n```{r}\nhr_rh2m_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_0_20) > 0) \n      geom_rect(data = hr_rh2m_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_rh2m_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_20_40) > 0) \n      geom_rect(data = hr_rh2m_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rh2m_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_40_60) > 0) \n      geom_rect(data = hr_rh2m_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rh2m_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(RH2M, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(RH2M, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nRH2M_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(RH2M, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rh2m_60_80) > 0) \n      geom_rect(data = hr_rh2m_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"RH2M\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          ncol = 4)\n\nggsave(\"fig/RH2M_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n```\n\n### RAIN\n\n```{r}\nhr_rain_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_0_20) > 0) \n      geom_rect(data = hr_rain_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_rain_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_20_40) > 0) \n      geom_rect(data = hr_rain_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rain_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_40_60) > 0) \n      geom_rect(data = hr_rain_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_rain_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(PRECTOTCORR, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(PRECTOTCORR, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nPRECTOTCORR_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(PRECTOTCORR, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_rain_60_80) > 0) \n      geom_rect(data = hr_rain_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"PRECTOTCORR\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nplot_grid(PRECTOTCORR_0_20,PRECTOTCORR_20_40,PRECTOTCORR_40_60,PRECTOTCORR_60_80,\n          ncol = 4)\n\nggsave(\"fig/PRECTOTCORR_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n### DPD\n\n```{r}\nhr_dpd_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_0_20 <- pred_0_20_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_0_20) > 0) \n      geom_rect(data = hr_dpd_0_20, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nhr_dpd_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_20_40 <- pred_20_40_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_20_40) > 0) \n      geom_rect(data = hr_dpd_20_40, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_dpd_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_40_60 <- pred_40_60_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_40_60) > 0) \n      geom_rect(data = hr_dpd_40_60, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n\nhr_dpd_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  filter(y_scaled >= 30) %>%\n  summarise(\n    xmin = min(DPD, na.rm = TRUE),  # Substitua \"T2M\" pela variável x do seu gráfico\n    xmax = max(DPD, na.rm = TRUE)\n  )\n\n# Criar o gráfico com faixa\nDPD_60_80 <- pred_60_80_pred %>%\n  mutate(y_scaled = fit * 100) %>%\n  ggplot(aes(DPD, y_scaled)) +\n  geom_smooth(se = FALSE, color = \"black\", size = 2.5) +\n  \n  # Adicionar faixa cinza (se houver intervalo identificado)\n  { if (nrow(hr_dpd_60_80) > 0) \n      geom_rect(data = hr_dpd_60_80, inherit.aes = FALSE,\n                aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf),\n                fill = \"darkred\", alpha = 0.3) \n    else NULL } +\n  \n  ggthemes::theme_few() +\n  labs(x = \"DPD\", y = \"Severity (%)\") +\n  theme(text = element_text(size = 14, face = \"bold\"))\n\nplot_grid(DPD_0_20,DPD_20_40,DPD_40_60,DPD_60_80,\n          ncol = 4)\n\nggsave(\"fig/DPD_period.png\", bg = \"white\", dpi = 600, width = 12, height = 4)\n\n```\n\n## Joining\n\n```{r}\nlibrary(cowplot)\nplot_grid(T2M_0_20,T2M_20_40,T2M_40_60,T2M_60_80,\n          T2M_MAX_0_20,T2M_MAX_20_40,T2M_MAX_40_60,T2M_MAX_60_80,\n          T2M_MIN_0_20,T2M_MIN_20_40,T2M_MIN_40_60,T2M_MIN_60_80,\n          RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          PRECTOTCORR_0_20,PRECTOTCORR_20_40,PRECTOTCORR_40_60,PRECTOTCORR_60_80,\n          RH2M_0_20,RH2M_20_40,RH2M_40_60,RH2M_60_80,\n          DPD_0_20,DPD_20_40,DPD_40_60,DPD_60_80,\n          ncol = 4)\n\nggsave(\"fig/by_period.png\", bg = \"white\", dpi = 600, width = 20, height = 14)\n```\n\n## All windows (MODIFICAR)\n\n```{r}\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)  # Combinar gráficos\n\n# Adicionar uma coluna de período em cada conjunto de dados\npred_0_30_pred$period <- \"0-30\"\npred_30_60_pred$period <- \"30-60\"\npred_60_90_pred$period <- \"60-90\"\npred_0_90_pred$period <- \"0-90\"\npred_30_90_pred$period <- \"30-90\"\npred_0_60_pred$period <- \"0-60\"\n\n# Unir todos os datasets em um único dataframe\ncombined_data <- bind_rows(\n  pred_0_30_pred,\n  pred_30_60_pred,\n  pred_60_90_pred,\n  pred_0_90_pred,\n  pred_30_90_pred,\n  pred_0_60_pred\n)\n\n# Lista de variáveis que você quer plotar\nvariaveis <- c(\"T2M\", \"RH2M\", \"T2M_MIN\", \"T2M_MAX\", \n               \"days_difference\", \"PRECTOTCORR\", \"lat\", \"lon\", \"DPD\")\n\n# Criar uma lista vazia para armazenar os gráficos\ngraficos <- list()\n\n# Loop para criar os gráficos\nfor (var in variaveis) {\n  \n  # Criar um gráfico para cada variável\n  p <- combined_data %>%\n    ggplot(aes_string(x = var, y = \"fit*100\", color = \"period\")) + # Definir a variável no eixo x e colorir por \"period\"\n    geom_smooth(se = F, size = 1.4) +\n    #scale_color_manual(values = c(\"0-30\" = \"red\", \"30-60\" = \"blue\", \n     #                             \"60-90\" = \"green\", \"0-90\" = \"purple\", \n      #                            \"30-90\" = \"orange\", \"0-60\" = \"brown\")) +\n    scale_color_viridis_d(\"Windows\", option = \"viridis\")+\n    ggthemes::theme_few() +\n    labs(x = var, y = \"Severity (%)\", color = \"Period\") +\n    theme(text = element_text(size = 14, face = \"bold\"))\n  \n  # Adicionar o gráfico à lista\n  graficos[[var]] <- p\n}\n\n# Combinar todos os gráficos usando patchwork\ngrafico_combinado <- wrap_plots(graficos, ncol = 3) + \n  plot_annotation(title = \"\")\n\n# Salvar o gráfico combinado\nggsave(\"fig/all_periods.png\", grafico_combinado, width = 15, height = 12, dpi = 600)\n\n# Visualizar o gráfico combinado\ngrafico_combinado\n\n```\n\n# REMOVER\n\n```{r}\npf_0_20$period = \"0-20\"\npf_20_40$period = \"20-40\"\npf_40_60$period = \"40-60\"\npf_60_80$period = \"60-80\"\n\npf_all = rbind(pf_0_20, pf_20_40, pf_40_60, pf_60_80)\n\npf_all %>% \n  filter(!variable %in% c(\"Latitude\",\"Longitude\",\"Days\")) %>% \n  ggplot(aes(period, effect, size = se))+\n  geom_jitter(width = .06, color = \"darkorange\", alpha = .05)+\n  geom_boxplot(fill = NA, color = \"black\", size = 1.2)+\n  scale_fill_binned()+\n  ggthemes::theme_few()+\n  facet_wrap(~variable)\n \n```\n\n## Residue\n\n```{r}\n\n# Extrair os resíduos e quantis teóricos\nresiduals <- residuals(modelo4, type = \"deviance\")\nqq_data <- data.frame(\n  theoretical = qqnorm(residuals, plot.it = FALSE)$x,\n  residuals = qqnorm(residuals, plot.it = FALSE)$y\n)\n\n# Plotar o QQ plot\nqq = qq_data %>% \n  ggplot(aes(x = theoretical, y = residuals)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  labs(x = \"Theoretical Quantiles\", y = \"Deviance Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\n# Extrair preditores lineares e resíduos\nlinear_predictors <- predict(modelo4, type = \"link\")\nresiduals_data <- data.frame(\n  linear_predictors = linear_predictors,\n  residuals = residuals\n)\n\n# Plotar resíduos vs preditores lineares\npredictors = residuals_data %>% \n  ggplot(aes(x = linear_predictors, y = residuals)) +\n  geom_point(alpha = 0.2, color = \"grey\", size = 2) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  labs(x = \"Linear Predictors\", y = \"Deviance Residuals\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n```\n\n```{r}\n# Plotar histograma dos resíduos\nres_hist= ggplot(residuals_data, aes(x = residuals)) +\n  geom_histogram(fill = \"black\", color = \"white\", bins = 20) +\n  labs(x = \"Deviance Residuals\", y = \"Frequency\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\n# Extrair valores observados e preditos\nobserved <- modelo4$y\npredicted <- predict(modelo4, type = \"response\")\nprediction_data <- data.frame(\n  observed = observed,\n  predicted = predicted\n)\n\n# Plotar valores preditos vs observados\npd_ob = prediction_data %>% \n  ggplot(aes(x = observed, y = predicted)) +\n  geom_point(alpha = 0.5, color = \"grey\", size = 2) +\n  geom_abline(intercept = 0, slope = 1, color = \"black\", linetype = \"dashed\", size = 1.4) +\n  scale_x_continuous(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7), limits = c(0.1, 0.7))+\n  scale_y_continuous(breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7), limits = c(0.1, 0.7))+\n  labs(x = \"Observed Values\", y = \"Predicted Values\") +\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 14, face = \"bold\"))\n\n```\n\n```{r}\nplot_grid(qq,predictors,res_hist,pd_ob)\n\nggsave(\"fig/residue.png\", dpi = 600, bg = \"white\", height = 6, width = 8)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"lixo.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","theme":"cosmo","title":"Untitled"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}