{"title":"Packages","markdown":{"yaml":{"title":""},"headingText":"Packages","containsRefs":false,"markdown":"\n\n\n```{r,warning = FALSE, message = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(INLA)\nlibrary(caret)\n\n```\n\n```{r}\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\n```\n\n### Precipitation\n\n```{r,eval = FALSE, echo = TRUE}\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/pr_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de precipitação para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  precip_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"pr\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de precip_data não retornar dados, retornar NULL\n  if (length(precip_data) == 0 || all(is.na(precip_data))) {\n    message(\"Nenhum dado de precipitação encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    precipitation = precip_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\n#write_xlsx(box, \"data/br_dwgd_prec.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nprec = read_xlsx(\"data/br_dwgd_prec.xlsx\")\nunique(prec$year)\n\nprec = prec %>% \n  filter(!state %in% c(\"SP\"))\n\nprec$date = as.Date(prec$date)\nprec$study = as.factor(prec$study)\nprec$planting_date = as.Date(prec$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nprec <- prec %>%\n  mutate(\n    days =as.numeric(date - planting_date))# %>%\n  #filter(days >= 0)\n\n\n```\n\n### Maximum temperature\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmax_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmax para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmax_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmax\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmax_data não retornar dados, retornar NULL\n  if (length(tmax_data) == 0 || all(is.na(tmax_data))) {\n    message(\"Nenhum dado de Tmax encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmax = tmax_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmax.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\ntmax = read_xlsx(\"data/br_dwgd_tmax.xlsx\")\n\ntmax = tmax %>% \n  filter(!state %in% c(\"SP\"))\n\ntmax$date = as.Date(tmax$date)\ntmax$study = as.factor(tmax$study)\ntmax$planting_date = as.Date(tmax$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmax <- tmax %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\n```\n\n### Minimum temperature\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmin_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmin para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmin_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmin\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmin_data não retornar dados, retornar NULL\n  if (length(tmin_data) == 0 || all(is.na(tmin_data))) {\n    message(\"Nenhum dado de Tmin encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmin = tmin_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmin.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\ntmin = read_xlsx(\"data/br_dwgd_tmin.xlsx\")\n\ntmin = tmin %>% \n  filter(!state %in% c(\"SP\"))\n\ntmin$date = as.Date(tmin$date)\ntmin$study = as.factor(tmin$study)\ntmin$planting_date = as.Date(tmin$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmin <- tmin %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n```\n\n### Relative humidity\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/RH_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de RH para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  rh_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"RH\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de rh_data não retornar dados, retornar NULL\n  if (length(rh_data) == 0 || all(is.na(rh_data))) {\n    message(\"Nenhum dado de RH encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    rh = rh_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_rh.xlsx\")\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nrh = read_xlsx(\"data/br_dwgd_rh.xlsx\")\n\nrh = rh %>% \n  filter(!state %in% c(\"SP\"))\n\nrh$date = as.Date(rh$date)\nrh$study = as.factor(rh$study)\nrh$planting_date = as.Date(rh$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nrh <- rh %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\nrh\n```\n\n# Joining\n\n```{r,eval = FALSE, echo = TRUE}\nweather_data = prec\n\nweather_data$rh = rh$rh\nweather_data$tmax = tmax$tmax\nweather_data$tmin = tmin$tmin\n\nweather_data[,3] = NULL\n\nweather_data$prec = prec$precipitation\n```\n\n```{r,eval = FALSE, echo = TRUE}\ncolnames(weather_data) = c(\"id\",\"wd90\", \"study\",\"location\",\"state\",\"year\",\"planting_date\",\"mean_sev\",\"lat\",\"lon\",\"level\",\"days\",\"RH2M\",\"T2M_MAX\",\"T2M_MIN\",\"PRECTOTCORR\")\n```\n\n```{r}\n#write_xlsx(weather_data, \"data/weather_data.xlsx\")\n\nweather_data = read_xlsx(\"data/weather_data.xlsx\")\nweather_data$mean_sev = weather_data$mean_sev/100\n#weather_data <- read_xlsx(\"data/weather_nasa.xlsx\")\n```\n\n```{r}\nweather_data = weather_data %>% \n  mutate(T2M = (T2M_MAX+T2M_MIN)/2) #%>% \n  #mutate(DPD = T2M - ((112 + 0.9*T2M)*RH2M^0.125 - 112 + 0.1*T2M))\n\n\n# Parâmetros da equação de Magnus-Tetens\na <- 17.27\nb <- 237.7\n\n# Cálculo do ponto de orvalho (Td)\nalpha <- (a * weather_data$T2M) / (b + weather_data$T2M) + log(weather_data$RH2M / 100)\nweather_data$Td <- (b * alpha) / (a - alpha)\n\n# Cálculo do DPD\nweather_data$DPD <- weather_data$T2M - weather_data$Td\n\n```\n\n\n# Windown sowing\n```{r}\nweather_data$planting_date = as.Date(weather_data$planting_date)\n\nweather_data <- weather_data %>%\n  mutate(\n    # Criando a data permitida diretamente com base no estado\n    allowed_date = case_when(\n      state == \"MT\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")), \n      state == \"MS\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")),\n      state == \"GO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-25\")),\n      state == \"PR\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-11\")),\n      state == \"TO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"DF\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"BA\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"MG\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")) \n    ),\n    # Ajustando o ano da allowed_date para casos de janeiro e fevereiro\n    allowed_date = if_else(\n      format(planting_date, \"%m\") %in% c(\"01\", \"02\"), \n      as.Date(paste0(as.numeric(format(planting_date, \"%Y\")) - 1, \"-\", format(allowed_date, \"%m-%d\"))),\n      allowed_date\n    ),\n    # Calculando a diferença em dias\n    days_difference = as.numeric(planting_date - allowed_date)\n  )\n\n\n# Visualizar resultado\nprint(weather_data)\n\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nweather_data$state1 <- as.numeric(factor(weather_data$state))\nweather_data$location1 <- as.numeric(factor(weather_data$location))\nweather_data$level1 <- as.numeric(factor(weather_data$level))\n\nweather_data %>% \n  filter(days_difference < 0)\n\nunique(weather_data$level1)\n\nweather_data %>% \n  ggplot(aes(days_difference))+\n  geom_histogram()\n```\n\n# Distribution\n\n```{r}\n\n# RH2M\n\nRH2M_day <- weather_data %>%\n  filter(!state ==\"SP\") %>% \n  filter(days >= 0 & days <= 80) %>% \n  group_by(days) %>%\n  summarise(mean_RH2M = mean(RH2M, na.rm = TRUE),\n            up_95 = quantile(RH2M, 0.975),\n            low_95 = quantile(RH2M, 0.025))\n\nRH2M_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+ ##b4e4c0\n  geom_smooth(aes(days,RH2M, group = id),se = F, color = \"darkgreen\", size = .8, size = 1.0)+\n  geom_smooth(data = RH2M_day, aes(x = days, y = mean_RH2M), color = \"black\", size = 1.4)+\n geom_smooth(data = RH2M_day, aes(x = days, y = up_95), color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = RH2M_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Humidity (%)\")\n\n\n# T2M_MAX\n\nT2M_MAX_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n            up_95 = quantile(T2M_MAX, 0.975),\n            low_95 = quantile(T2M_MAX, 0.025))\n\nT2M_MAX_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M_MAX, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = T2M_MAX_day, aes(x = days, y = mean_T2M_MAX), color = \"black\", size = 2)+\n geom_smooth(data = T2M_MAX_day, aes(x = days, y = up_95), color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_MAX_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"Max (°C)\")\n\n\n# T2M_MIN\n\nT2M_MIN_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n            up_95 = quantile(T2M_MIN, 0.975),\n            low_95 = quantile(T2M_MIN, 0.025))\n\nT2M_MIN_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M_MIN, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = T2M_MIN_day, aes(x = days, y = mean_T2M_MIN), color = \"black\", size = 2)+\n geom_smooth(data = T2M_MIN_day, aes(x = days, y = up_95), color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_MIN_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"Min (°C)\")\n\n\n# T2M\n\nT2M_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M = mean(T2M, na.rm = TRUE),\n            up_95 = quantile(T2M, 0.975),\n            low_95 = quantile(T2M, 0.025))\n\n\nT2M_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M, group = id),se = F, color = \"#ca5858\", size = .8,, size = 1.0)+\n  geom_smooth(data = T2M_day, aes(x = days, y = mean_T2M), color = \"black\", size = 1.4)+\n geom_smooth(data = T2M_day, aes(x = days, y = up_95), color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Temperature (°C)\")\n\n# Rain\n\nPRECTOTCORR_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n            up_95 = quantile(PRECTOTCORR, 0.975),\n            low_95 = quantile(PRECTOTCORR, 0.025))\n\nRAIN_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,PRECTOTCORR, group = id),se = F, color = \"#6280bc\", size = .8, size = 1.0)+\ngeom_smooth(data = PRECTOTCORR_day, aes(x = days, y = mean_PRECTOTCORR), \n            color = \"black\", size = 1.4)+\n geom_smooth(data = PRECTOTCORR_day, aes(x = days, y = up_95),\n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = PRECTOTCORR_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n    coord_cartesian(ylim = c(0, NA)) + \n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Rain (mm)\")\n\n\n# DPD\n\nDPD_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_DPD = mean(DPD, na.rm = TRUE),\n            up_95 = quantile(DPD, 0.975),\n            low_95 = quantile(DPD, 0.025))\n\nDPD_g = weather_data %>% \n  filter(days >= 0 & days <= 80) %>%\n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,DPD, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = DPD_day, aes(x = days, y = mean_DPD), color = \"black\", size = 2)+\n geom_smooth(data = DPD_day, aes(x = days, y = up_95),\n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = DPD_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n    #coord_cartesian(ylim = c(0, NA)) + \n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"DPD (°C)\")\n\n\n# Days\n\nDAYS_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  ggplot(aes(days_difference))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Frequency\")\n\n\n# Lat\n\nLAT_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot(aes(lat))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Latitude\",\n       y = \"\")\n\n\n# Lon\n\nLON_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot(aes(lon))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Longitude\",\n       y = \"\")\n\n# Season\n\nn_study = ma2 %>% \n count(year) %>% \n    mutate(year1 = row_number())\n\nstudy_g = n_study %>% \n  ggplot(aes(as.factor(year1),n))+\n  geom_bar(stat = \"identity\", fill = \"black\", color = \"white\")+\n  #geom_histogram(fill = \"black\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = )+\n  labs(x = \"Year\",\n       y = \"Number\")\n   \n\nlibrary(cowplot)\n\n\n\n#plot_grid(T2M_g , T2M_MAX_g , T2M_MIN_g , RH2M_g , RAIN_g , DPD_g,DAYS_g, LAT_g, LON_g,\n #       labels = c(\"(a)\", \"(b)\", \"(c)\", \"(d)\",\"(e)\",\"(f)\",\"(g)\",\"(h)\",\"(i)\"),label_x = -0.03, label_y =1)\n\nplot_grid(T2M_g , RH2M_g , RAIN_g ,DAYS_g, LAT_g, LON_g,\n        labels = c(\"(a)\", \"(b)\", \"(c)\", \"(d)\",\"(e)\",\"(f)\"),label_x = -0.03, label_y =1,\n        label_size = 10)\n\nggsave(\"fig/covariates.png\", dpi = 600, bg = \"white\", height = 6, width = 10)\n\n```\n\n# Framework modeling\n\n## Selecting of models\n```{r}\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_0_60 = wd_0_60 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\ninla_0_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_60)\n\n```\n\n\n```{r}\nwd_0_60 %>%\n  dplyr::group_by(epidemic) %>% \n  summarise(\n    n = n()/61\n  )\n```\n\n```{r}\nmodel_full <- inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nmodel_reduced <- inla(epidemic ~T2M +PRECTOTCORR + RH2M,\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(model_reduced)\nloglik_full = model_full$mlik\nloglik_reduced = model_reduced$mlik\nln_bf <- loglik_full - loglik_reduced\nln_bf\n```\n\n\n## By windows\n\n### 0 to 20\n```{r}\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 20)\n\n\nwd_0_20 = wd_0_20 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\ninla_0_20 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n```{r}\nwd_0_20 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n```{r}\nwd_0_20 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_0_20 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_0_20)\n\n```\n\n```{r}\ninla_0_20$summary.random\n```\n\n#### Marginal effects\n\n\n```{r}\n\nmarg_0_20_1 <- inla_0_20$marginals.fixed[[1]] # Intercept\n\n\nmarg_0_20_1 = as.data.frame(marg_0_20_1)\nmarg_0_20_1$windows = c(\"Survival\")\nmarg_0_20_1$parameter = c(\"Intercept\")\n\nggplot(marg_0_20_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_0_20_2 <- inla_0_20$marginals.fixed[[2]] # T2M\n\nmarg_0_20_2 = as.data.frame(marg_0_20_2)\nmarg_0_20_2$windows = c(\"Survival\")\nmarg_0_20_2$parameter = c(\"Temperature\")\n\nggplot(marg_0_20_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_0_20_3 <- inla_0_20$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_0_20_3 = as.data.frame(marg_0_20_3)\nmarg_0_20_3$windows = c(\"Survival\")\nmarg_0_20_3$parameter = c(\"Rain\")\n\nggplot(marg_0_20_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_0_20_4 <- inla_0_20$marginals.fixed[[4]] # RH2M\n\nmarg_0_20_4 = as.data.frame(marg_0_20_4)\nmarg_0_20_4$windows = c(\"Survival\")\nmarg_0_20_4$parameter = c(\"Humidity\")\n\nggplot(marg_0_20_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_0_20$summary.fitted.values\n\npredictions <- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\n\npred_results <- data.frame(\n  RH2M = wd_0_20$RH2M, \n  PRECTOTCORR= wd_0_20$PRECTOTCORR,\n  T2M = wd_0_20$T2M,\n  predicted = inla_0_20$summary.fitted.values$mean,  \n  lower = inla_0_20$summary.fitted.values$`0.025quant`,  \n  upper = inla_0_20$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n#b4e4c0 #ca5858#6280bc ##c20f0f\nplot_0_20 = pred_results %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n\n  labs(x = \"\", y = \"Target spot outbreak (%)\",title = \"Survival\")+\n  ggthemes::theme_few()+\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n  theme(\n    axis.title.y = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_0_20\n```\n\n### 20 to 40\n\n```{r}\nwd_20_40 = weather_data %>% \n  dplyr::filter(days >= 20 & days <= 40)\n\n\nwd_20_40 = wd_20_40 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_20_40 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_20_40,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_20_40)\n\n```\n\n```{r}\ninla_20_40$summary.random\n```\n\n#### Marginal effects\n\n```{r}\n\nmarg_20_40_1 <- inla_20_40$marginals.fixed[[1]] # Intercept\n\n\nmarg_20_40_1 = as.data.frame(marg_20_40_1)\nmarg_20_40_1$windows = c(\"Sporulation\")\nmarg_20_40_1$parameter = c(\"Intercept\")\n\nggplot(marg_20_40_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_20_40_2 <- inla_20_40$marginals.fixed[[2]] # T2M\n\nmarg_20_40_2 = as.data.frame(marg_20_40_2)\nmarg_20_40_2$windows = c(\"Sporulation\")\nmarg_20_40_2$parameter = c(\"Temperature\")\n\nggplot(marg_20_40_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_20_40_3 <- inla_20_40$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_20_40_3 = as.data.frame(marg_20_40_3)\nmarg_20_40_3$windows = c(\"Sporulation\")\nmarg_20_40_3$parameter = c(\"Rain\")\n\nggplot(marg_20_40_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_20_40_4 <- inla_20_40$marginals.fixed[[4]] # RH2M\n\nmarg_20_40_4 = as.data.frame(marg_20_40_4)\nmarg_20_40_4$windows = c(\"Sporulation\")\nmarg_20_40_4$parameter = c(\"Humidity\")\n\nggplot(marg_20_40_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_20_40$summary.fitted.values\n\npredictions <- inla_20_40$summary.fitted.values\n\nwd_20_40$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_20_40$RH2M, \n  PRECTOTCORR= wd_20_40$PRECTOTCORR,\n  T2M = wd_20_40$T2M,\n  predicted = inla_20_40$summary.fitted.values$mean,  \n  lower = inla_20_40$summary.fitted.values$`0.025quant`,  \n  upper = inla_20_40$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_20_40 = pred_results %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",,title = \"Sporulation\") +\n  ggthemes::theme_few()+\n     facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_20_40\n```\n\n### 40 to 60\n\n```{r}\nwd_40_60 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nwd_40_60 = wd_40_60 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_40_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_40_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\n```\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_40_60)\n\n```\n\n```{r}\ninla_40_60$summary.random\n```\n\n#### Marginal effects\n```{r}\n\nmarg_40_60_1 <- inla_40_60$marginals.fixed[[1]] # Intercept\n\n\nmarg_40_60_1 = as.data.frame(marg_40_60_1)\nmarg_40_60_1$windows = c(\"Infection\")\nmarg_40_60_1$parameter = c(\"Intercept\")\n\nggplot(marg_40_60_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_40_60_2 <- inla_40_60$marginals.fixed[[2]] # T2M\n\nmarg_40_60_2 = as.data.frame(marg_40_60_2)\nmarg_40_60_2$windows = c(\"Infection\")\nmarg_40_60_2$parameter = c(\"Temperature\")\n\nggplot(marg_40_60_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_40_60_3 <- inla_40_60$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_40_60_3 = as.data.frame(marg_40_60_3)\nmarg_40_60_3$windows = c(\"Infection\")\nmarg_40_60_3$parameter = c(\"Rain\")\n\nmarg_40_60_3 %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_40_60_4 <- inla_40_60$marginals.fixed[[4]] # RH2M\n\nmarg_40_60_4 = as.data.frame(marg_40_60_4)\nmarg_40_60_4$windows = c(\"Infection\")\nmarg_40_60_4$parameter = c(\"Humidity\")\n\nggplot(marg_40_60_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_40_60$summary.fitted.values\n\npredictions <- inla_40_60$summary.fitted.values\n\nwd_40_60$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_40_60$RH2M, \n  PRECTOTCORR= wd_40_60$PRECTOTCORR,\n  T2M = wd_40_60$T2M,\n  predicted = inla_40_60$summary.fitted.values$mean,  \n  lower = inla_40_60$summary.fitted.values$`0.025quant`,  \n  upper = inla_40_60$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_40_60 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",title = \"Infection\") +\n  ggthemes::theme_few()+\n   facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_40_60\n\n```\n\n### 60 to 80\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 60 & days <= 80)\n\nwd_60_80 = wd_60_80 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_60_80 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_80,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    DAYS_mean = mean(days_difference),\n    DAYS_sd = sd(days_difference),\n    DAYS_max = max(days_difference),\n    DAYS_min = min(days_difference),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    LAT_mean = mean(lat),\n    LAT_sd = sd(lat),\n    LAT_max = max(lat),\n    LAT_min = min(lat),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    LON_mean = mean(lon),\n    LON_sd = sd(lon),\n    LON_max = max(lon),\n    LON_min = min(lon),\n  )\n```\n\n```{r}\n\nsummary(inla_60_80)\n\n```\n\n```{r}\ninla_60_80$summary.random\n```\n\n#### Marginal effects\n```{r}\n\nmarg_60_80_1 <- inla_60_80$marginals.fixed[[1]] # Intercept\n\n\nmarg_60_80_1 = as.data.frame(marg_60_80_1)\nmarg_60_80_1$windows = c(\"Colonization\")\nmarg_60_80_1$parameter = c(\"Intercept\")\n\nggplot(marg_60_80_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_60_80_2 <- inla_60_80$marginals.fixed[[2]] # T2M\n\nmarg_60_80_2 = as.data.frame(marg_60_80_2)\nmarg_60_80_2$windows = c(\"Colonization\")\nmarg_60_80_2$parameter = c(\"Temperature\")\n\nggplot(marg_60_80_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_60_80_3 <- inla_60_80$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_60_80_3 = as.data.frame(marg_60_80_3)\nmarg_60_80_3$windows = c(\"Colonization\")\nmarg_60_80_3$parameter = c(\"Rain\")\n\nmarg_60_80_3 %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_60_80_4 <- inla_60_80$marginals.fixed[[4]] # RH2M\n\nmarg_60_80_4 = as.data.frame(marg_60_80_4)\nmarg_60_80_4$windows = c(\"Colonization\")\nmarg_60_80_4$parameter = c(\"Humidity\")\n\nggplot(marg_60_80_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n\n#### Prediction\n\n```{r}\n#inla_60_80$summary.fitted.values\n\npredictions <- inla_60_80$summary.fitted.values\n\nwd_60_80$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_60_80$RH2M, \n  PRECTOTCORR= wd_60_80$PRECTOTCORR,\n  T2M = wd_60_80$T2M,\n  predicted = inla_60_80$summary.fitted.values$mean,  \n  lower = inla_60_80$summary.fitted.values$`0.025quant`,  \n  upper = inla_60_80$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_60_80 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"Colonization\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_60_80\n```\n\n### Joining\n\n```{r}\nplot_grid(plot_0_20,plot_20_40,plot_40_60,plot_60_80, ncol = 4)\n\n\nggsave(\"fig/INLA_prediction.png\", dpi = 600, bg = \"white\",\n        height = 6, width = 10)\n```\n### Marginal plotting\n```{r}\n\n\nall_marginal = rbind(marg_0_20_1,marg_0_20_2,marg_0_20_3,marg_0_20_4,\n                     marg_20_40_1,marg_20_40_2,marg_20_40_3,marg_20_40_4,\n                     marg_40_60_1,marg_40_60_2,marg_40_60_3,marg_40_60_4,\n                     marg_60_80_1,marg_60_80_2,marg_60_80_3,marg_60_80_4)\n\nall_marginal %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_colour_manual(values = c(\"darkred\",\"#002f61\", \"darkgreen\",\"darkorange\"))+\n  #scale_color_viridis_d(option = \"D\")+\n  facet_wrap(~parameter, scale = \"free\")+\n  labs(x = \"Marginal effect\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        strip.text = element_text(face = \"bold\"))\n\nggsave(\"fig/marginal_effects.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 8)\n```\n\n### Random (Year)\n```{r}\nyear_0_20 = inla_0_20$summary.random\nyear_0_20 = as.data.frame(year_0_20)\n\nyear_0_20 %>% \nggplot(aes(x = as.factor(year1.ID), y = year1.mean)) +\n  geom_segment(aes(xend = as.factor(year1.ID), y = 0, yend = year1.mean, \n                   color = year1.mean > 0), size = 1, linetype = \"dashed\") +\n  geom_point(aes(color = year1.mean > 0), size = 4) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"solid\") +  \n  scale_color_manual(values = c(\"TRUE\" = \"darkred\", \"FALSE\" = \"#002f61\")) +\n  scale_y_continuous(breaks = seq(-2.5, 4.5, 0.5)) +\n  ggthemes::theme_few() +\n  labs(x = \"Year\",\n       y = \"Marginal effect\") +\n  theme(text = element_text(size = 12),\n       axis.title = element_text(face = \"bold\", size = 12),\n        strip.text = element_text(face = \"bold\", size = 12),\n        legend.position = \"none\")\n\nggsave(\"fig/marginal_effects_year.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 10)\n```\n\n### Scenarios\n\n```{r,eval = FALSE, echo = TRUE}\n\nmedian(pred_results$PRECTOTCORR)\nmedian(pred_results$RH2M)\n\npred_results2 = pred_results %>% \n  dplyr::mutate(scenarios = ifelse(RH2M>= 79, 1,0))\n\n\n\npred_results2 <- pred_results2 %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper, scenarios),  \n    names_to = \"variables\")\n\npred_results2$scenarios = as.factor(pred_results2$scenarios)\n\nplot_60_80 = pred_results2 %>% \n  filter(variables == \"T2M\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = scenarios), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  #scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n   #                               \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  #facet_wrap(~scenarios, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"right\"\n  )\nplot_60_80\n```\n\n```{r,eval = FALSE, echo = TRUE}\nplot_60_80 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n# Map\n\n```{r}\nmap = ma2 %>% \n  dplyr::select(study,year,location,state,lat,longitude,mean_sev)\n\ncolnames(map) = c(\"study\",\"year\",\"location\",\"state\",\"lat\",\"lon\",\"mean_sev\")\n\nlibrary(scales)\nlibrary(ggspatial) \nlibrary(readxl)\nlibrary(ggrepel)\nlibrary(cowplot)\nlibrary(rnaturalearth)\n\nBRA = ne_states(\n  country = \"Brazil\",\n  returnclass = \"sf\"\n)\n\n\n\nstates <- filter(BRA, \n                 name_pt == \"Paraná\"|\n                 name_pt == \"São Paulo\"|\n                 name_pt == \"Mato Grosso\"|\n                 name_pt == \"Mato Grosso do Sul\"|\n                 name_pt == \"Goiás\"|\n                 name_pt == \"Minas Gerais\"|\n                 name_pt == \"Distrito Federal\"|\n                 name_pt == \"Tocantins\"|\n                 name_pt == \"Bahia\")\n\nstates = states %>% \n  mutate(id = case_when(\n    name_pt == \"Paraná\" ~ \"PR\",\n    name_pt == \"São Paulo\" ~ \"SP\",\n    name_pt == \"Mato Grosso\" ~ \"MT\",\n    name_pt == \"Mato Grosso do Sul\" ~ \"MS\",\n    name_pt == \"Goiás\" ~ \"GO\",\n    name_pt == \"Minas Gerais\" ~ \"MG\",\n    name_pt == \"Distrito Federal\" ~ \"DF\",\n    name_pt == \"Tocantins\" ~ \"TO\",\n    name_pt == \"Bahia\" ~ \"BA\"))\n\nSUL = ne_states(\n  country = c(\"Argentina\", \"Uruguay\", \"Paraguay\", \"Colombia\", \"Bolivia\"),\n  returnclass = \"sf\")\nbr_sf <- ne_states(geounit = \"brazil\",\n                   returnclass = \"sf\")\n\nunique(map$state)\n```\n\n```{r}\nmap_plot = map %>% \nggplot()+\n  geom_sf(data = SUL, fill = \"gray95\", color = \"gray95\") +\n  geom_sf(data = BRA, fill = \"gray98\", color= \"gray60\", size =0.2) +\n  geom_sf(data = states, aes(x = longitude, y = latitude), fill = \"white\", color = \"gray40\", size = 0.2) +\n  geom_jitter(data = map, aes(as.numeric(lon), as.numeric(lat), size = mean_sev), alpha = 0.8, color = \"#002f61\") +\n  geom_text(data = states, aes(x = longitude, y = latitude,  label = id), size = 3, hjust = 0.8, fontface = \"bold\")+\n  labs(x = \"Longitude\", y = \"Latitude\", color = \"Region\", size = \"Number of Trials\") +\n  scale_size_continuous(range = c(1,5), breaks = c(1,5,12))+\n  #theme_bw()+\n  theme_minimal_grid()+\n  annotation_scale(location = \"bl\", width_hint = 0.2) +\n  coord_sf(xlim = c(-65,-40), ylim = c(-32, -9), expand = FALSE)+\n  #scale_color_calc()+\n  theme(legend.position = \"right\",\n        legend.justification = \"center\",\n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10),\n        axis.text.x =  element_text(size = 9),\n        axis.text.y = element_text(size = 9),\n        axis.title.x = element_text(size=12, face = \"bold\"),\n        axis.title.y = element_text(size=12, face = \"bold\"),\n        panel.border = element_rect(color = \"gray50\", size=.2),\n        panel.background = element_rect(fill = \"#d2eeff\")\n        )+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", pad_x = unit(0.5, \"in\"), pad_y = unit(0.5, \"in\"), style = north_arrow_orienteering(fill = c(\"gray80\", \"gray96\")), height = unit(0.9, \"cm\"), width = unit(0.8, \"cm\"))+\n  guides(size=F)\n```\n\n\n```{r}\nsev_plot = map %>% \n  ggplot(aes(mean_sev))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 15)+\n  ggthemes::theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, vjust = 0.5))\n```\n\n```{r}\nyear_plot= map %>% \ndplyr::group_by(year) %>% \n  summarise(\n    n = n()\n  ) %>% \n  ggplot(aes(as.factor(year),n))+\n  geom_bar(stat = \"identity\" ,fill = \"#002f61\")+\n  ggthemes::theme_few()+\n  labs(x = \"Year\",\n       y = \"Number of studies\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, vjust = 0.5))\n\nyear_plot\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\n(map_plot + (sev_plot / year_plot)) + \n  plot_layout(design = \"AB\n                        AB\", widths = c(2, 1)) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\") & \n  theme(plot.tag = element_text(face = \"bold\", size = 12), label_x = -0.03, label_y = 1)\n\n\nggsave(\"fig/map_sev_year.png\", dpi = 600, bg = \"white\",\n       width = 10, height = 8)\n```\n\n# Overall\n```{r,eval = FALSE, echo = TRUE}\n\nwd_60_8022 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_60_8022 = wd_60_8022 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = sum(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1),\n    year1 = mean(year1)\n    )\n\nwd_60_8022 = wd_60_8022 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0)) # 25 = 73% Acurácia\n\n\n#f(lat, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n#f(lon, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))\n\n\nsurv_fit_ONI1 = inla(epidemic ~T2M + RH2M,\n          #f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_8022,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\nsummary(surv_fit_ONI1)\n\npredictions <- surv_fit_ONI1$summary.fitted.values\n\nwd_60_8022$mean = predictions$mean\n\nwd_60_8 = wd_60_8022 %>% \n  dplyr::select(epidemic,mean) %>% \n  mutate(\n    ID = nrow(epidemic)\n  )\n\nwd_60_8 = as.data.frame(wd_60_8)\nclass(wd_60_8)\n\n#optimal.thresholds(wd_60_8)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(wd_60_8022$mean  > 0.75)),  mode= \"everything\",  reference = as.factor(wd_60_8022$epidemic))\ncm_rf_052\n\ndat_lasso <- data.frame(1, wd_60_8022$epidemic, predictions$mean)\nauc.roc.plot(dat_lasso)\nroc(wd_60_8022$epidemic,predictions$mean)\nerror.threshold.plot(dat_lasso, opt.methods = 3)\npresence.absence.summary(dat_lasso)\n```\n\n## LOOCV\n```{r,eval = FALSE, echo = TRUE}\nset.seed(123)\n\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_8022))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_8022[-i,]\n    test <- wd_60_8022[i,]\n    \n    # Fitting\n\n    modelt <- inla(epidemic ~T2M + RH2M,\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      #f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob <- modelt$summary.fitted.values\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob$mean > 0.75,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# Dialy\nEsse também foi bom com dados diários\n```{r,eval = FALSE, echo = TRUE}\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n#wd_0_20 = wd_0_20 %>% \n # filter(year == \"2013\")\n\nwd_0_20 = wd_0_20 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_0_20 = inla(epidemic ~T2M + RH2M+\n     f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_20)\n\npredictions <- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\ndat_lasso <- data.frame(1, wd_0_20$epidemic, predictions$mean)\n\noptimal.thresholds(dat_lasso)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(wd_0_20$mean  > 0.75)),  mode= \"everything\",  reference = as.factor(wd_0_20$epidemic))\ncm_rf_052\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nauc.roc.plot(dat_lasso)\n\nggsave(\"fig/ROC_plot.png\")\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\nroc(wd_0_20$epidemic,predictions$mean)\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\nerror.threshold.plot(dat_lasso, opt.methods = 3)\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\npresence.absence.summary(dat_lasso)\n```\n\n\n## LOOCV\nLOOCV com dados diários\n```{r,eval = FALSE, echo = TRUE}\nset.seed(123)\n\n\nacc <- NULL\nfor(i in 1:nrow(wd_0_20))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_0_20[-i,]\n    test <- wd_0_20[i,]\n    \n    # Fitting\n\n    modelt <- inla(epidemic ~T2M + RH2M+\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob <- modelt$summary.fitted.values\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob$mean > 0.75,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# PREDICTION WITH INLA.BRU TO FUTURE DATA\n\n```{r,eval = FALSE, echo = TRUE}\n\nwd_0_203 = wd_0_20 %>% \n  dplyr::select(-epidemic)\n\n\npredictions <- inla_0_20$summary.fitted.values\n\ninla_0_20 = bru(epidemic ~T2M + RH2M+\n                  f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\")\n\n\nsummary(inla_0_20)\nt = predict(object= inla_0_20, newdata = wd_0_203, formula = ~ c(pred = Intercept + T2M + RH2M))\n\nglimpse(t)\nplogis(t$mean)\n\nwd_0_20 %>% \n  ggplot(aes(mean_sev))+\n  geom_histogram()\n```\n\n","srcMarkdownNoYaml":"\n\n# Packages\n\n```{r,warning = FALSE, message = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(INLA)\nlibrary(caret)\n\n```\n\n```{r}\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\n```\n\n### Precipitation\n\n```{r,eval = FALSE, echo = TRUE}\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/pr_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de precipitação para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  precip_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"pr\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de precip_data não retornar dados, retornar NULL\n  if (length(precip_data) == 0 || all(is.na(precip_data))) {\n    message(\"Nenhum dado de precipitação encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    precipitation = precip_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\n#write_xlsx(box, \"data/br_dwgd_prec.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nprec = read_xlsx(\"data/br_dwgd_prec.xlsx\")\nunique(prec$year)\n\nprec = prec %>% \n  filter(!state %in% c(\"SP\"))\n\nprec$date = as.Date(prec$date)\nprec$study = as.factor(prec$study)\nprec$planting_date = as.Date(prec$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nprec <- prec %>%\n  mutate(\n    days =as.numeric(date - planting_date))# %>%\n  #filter(days >= 0)\n\n\n```\n\n### Maximum temperature\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmax_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmax para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmax_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmax\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmax_data não retornar dados, retornar NULL\n  if (length(tmax_data) == 0 || all(is.na(tmax_data))) {\n    message(\"Nenhum dado de Tmax encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmax = tmax_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmax.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\ntmax = read_xlsx(\"data/br_dwgd_tmax.xlsx\")\n\ntmax = tmax %>% \n  filter(!state %in% c(\"SP\"))\n\ntmax$date = as.Date(tmax$date)\ntmax$study = as.factor(tmax$study)\ntmax$planting_date = as.Date(tmax$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmax <- tmax %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\n```\n\n### Minimum temperature\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmin_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmin para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmin_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmin\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmin_data não retornar dados, retornar NULL\n  if (length(tmin_data) == 0 || all(is.na(tmin_data))) {\n    message(\"Nenhum dado de Tmin encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmin = tmin_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmin.xlsx\")\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\ntmin = read_xlsx(\"data/br_dwgd_tmin.xlsx\")\n\ntmin = tmin %>% \n  filter(!state %in% c(\"SP\"))\n\ntmin$date = as.Date(tmin$date)\ntmin$study = as.factor(tmin$study)\ntmin$planting_date = as.Date(tmin$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmin <- tmin %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n```\n\n### Relative humidity\n\n```{r,eval = FALSE, echo = TRUE}\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df <- as.data.frame(ma2)\nma2_df$planting_date <- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 <- ma2_df %>%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path <- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/RH_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates <- function(netcdf_path) {\n  nc_data <- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var <- ncvar_get(nc_data, \"time\")\n  time_units <- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date <- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates <- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates <- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data <- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data <- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon <- row$lon\n  lat <- row$lat\n  start_date <- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date <- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq <- seq.Date(start_date, end_date, by = \"day\")\n  date_indices <- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices <- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de RH para as coordenadas e datas específicas\n  lon_idx <- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx <- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  rh_data <- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"RH\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de rh_data não retornar dados, retornar NULL\n  if (length(rh_data) == 0 || all(is.na(rh_data))) {\n    message(\"Nenhum dado de RH encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result <- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    rh = rh_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox <- ma3 %>%\n  split(1:nrow(.)) %>%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_rh.xlsx\")\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nrh = read_xlsx(\"data/br_dwgd_rh.xlsx\")\n\nrh = rh %>% \n  filter(!state %in% c(\"SP\"))\n\nrh$date = as.Date(rh$date)\nrh$study = as.factor(rh$study)\nrh$planting_date = as.Date(rh$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nrh <- rh %>%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\nrh\n```\n\n# Joining\n\n```{r,eval = FALSE, echo = TRUE}\nweather_data = prec\n\nweather_data$rh = rh$rh\nweather_data$tmax = tmax$tmax\nweather_data$tmin = tmin$tmin\n\nweather_data[,3] = NULL\n\nweather_data$prec = prec$precipitation\n```\n\n```{r,eval = FALSE, echo = TRUE}\ncolnames(weather_data) = c(\"id\",\"wd90\", \"study\",\"location\",\"state\",\"year\",\"planting_date\",\"mean_sev\",\"lat\",\"lon\",\"level\",\"days\",\"RH2M\",\"T2M_MAX\",\"T2M_MIN\",\"PRECTOTCORR\")\n```\n\n```{r}\n#write_xlsx(weather_data, \"data/weather_data.xlsx\")\n\nweather_data = read_xlsx(\"data/weather_data.xlsx\")\nweather_data$mean_sev = weather_data$mean_sev/100\n#weather_data <- read_xlsx(\"data/weather_nasa.xlsx\")\n```\n\n```{r}\nweather_data = weather_data %>% \n  mutate(T2M = (T2M_MAX+T2M_MIN)/2) #%>% \n  #mutate(DPD = T2M - ((112 + 0.9*T2M)*RH2M^0.125 - 112 + 0.1*T2M))\n\n\n# Parâmetros da equação de Magnus-Tetens\na <- 17.27\nb <- 237.7\n\n# Cálculo do ponto de orvalho (Td)\nalpha <- (a * weather_data$T2M) / (b + weather_data$T2M) + log(weather_data$RH2M / 100)\nweather_data$Td <- (b * alpha) / (a - alpha)\n\n# Cálculo do DPD\nweather_data$DPD <- weather_data$T2M - weather_data$Td\n\n```\n\n\n# Windown sowing\n```{r}\nweather_data$planting_date = as.Date(weather_data$planting_date)\n\nweather_data <- weather_data %>%\n  mutate(\n    # Criando a data permitida diretamente com base no estado\n    allowed_date = case_when(\n      state == \"MT\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")), \n      state == \"MS\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-16\")),\n      state == \"GO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-25\")),\n      state == \"PR\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-09-11\")),\n      state == \"TO\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"DF\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"BA\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")),\n      state == \"MG\" ~ as.Date(paste0(format(planting_date, \"%Y\"), \"-10-01\")) \n    ),\n    # Ajustando o ano da allowed_date para casos de janeiro e fevereiro\n    allowed_date = if_else(\n      format(planting_date, \"%m\") %in% c(\"01\", \"02\"), \n      as.Date(paste0(as.numeric(format(planting_date, \"%Y\")) - 1, \"-\", format(allowed_date, \"%m-%d\"))),\n      allowed_date\n    ),\n    # Calculando a diferença em dias\n    days_difference = as.numeric(planting_date - allowed_date)\n  )\n\n\n# Visualizar resultado\nprint(weather_data)\n\nweather_data$year1 <- as.numeric(factor(weather_data$year))\nweather_data$state1 <- as.numeric(factor(weather_data$state))\nweather_data$location1 <- as.numeric(factor(weather_data$location))\nweather_data$level1 <- as.numeric(factor(weather_data$level))\n\nweather_data %>% \n  filter(days_difference < 0)\n\nunique(weather_data$level1)\n\nweather_data %>% \n  ggplot(aes(days_difference))+\n  geom_histogram()\n```\n\n# Distribution\n\n```{r}\n\n# RH2M\n\nRH2M_day <- weather_data %>%\n  filter(!state ==\"SP\") %>% \n  filter(days >= 0 & days <= 80) %>% \n  group_by(days) %>%\n  summarise(mean_RH2M = mean(RH2M, na.rm = TRUE),\n            up_95 = quantile(RH2M, 0.975),\n            low_95 = quantile(RH2M, 0.025))\n\nRH2M_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+ ##b4e4c0\n  geom_smooth(aes(days,RH2M, group = id),se = F, color = \"darkgreen\", size = .8, size = 1.0)+\n  geom_smooth(data = RH2M_day, aes(x = days, y = mean_RH2M), color = \"black\", size = 1.4)+\n geom_smooth(data = RH2M_day, aes(x = days, y = up_95), color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = RH2M_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Humidity (%)\")\n\n\n# T2M_MAX\n\nT2M_MAX_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M_MAX = mean(T2M_MAX, na.rm = TRUE),\n            up_95 = quantile(T2M_MAX, 0.975),\n            low_95 = quantile(T2M_MAX, 0.025))\n\nT2M_MAX_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M_MAX, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = T2M_MAX_day, aes(x = days, y = mean_T2M_MAX), color = \"black\", size = 2)+\n geom_smooth(data = T2M_MAX_day, aes(x = days, y = up_95), color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_MAX_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"Max (°C)\")\n\n\n# T2M_MIN\n\nT2M_MIN_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M_MIN = mean(T2M_MIN, na.rm = TRUE),\n            up_95 = quantile(T2M_MIN, 0.975),\n            low_95 = quantile(T2M_MIN, 0.025))\n\nT2M_MIN_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M_MIN, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = T2M_MIN_day, aes(x = days, y = mean_T2M_MIN), color = \"black\", size = 2)+\n geom_smooth(data = T2M_MIN_day, aes(x = days, y = up_95), color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_MIN_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"Min (°C)\")\n\n\n# T2M\n\nT2M_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_T2M = mean(T2M, na.rm = TRUE),\n            up_95 = quantile(T2M, 0.975),\n            low_95 = quantile(T2M, 0.025))\n\n\nT2M_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,T2M, group = id),se = F, color = \"#ca5858\", size = .8,, size = 1.0)+\n  geom_smooth(data = T2M_day, aes(x = days, y = mean_T2M), color = \"black\", size = 1.4)+\n geom_smooth(data = T2M_day, aes(x = days, y = up_95), color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = T2M_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Temperature (°C)\")\n\n# Rain\n\nPRECTOTCORR_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_PRECTOTCORR = mean(PRECTOTCORR, na.rm = TRUE),\n            up_95 = quantile(PRECTOTCORR, 0.975),\n            low_95 = quantile(PRECTOTCORR, 0.025))\n\nRAIN_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,PRECTOTCORR, group = id),se = F, color = \"#6280bc\", size = .8, size = 1.0)+\ngeom_smooth(data = PRECTOTCORR_day, aes(x = days, y = mean_PRECTOTCORR), \n            color = \"black\", size = 1.4)+\n geom_smooth(data = PRECTOTCORR_day, aes(x = days, y = up_95),\n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n geom_smooth(data = PRECTOTCORR_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.2, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n    coord_cartesian(ylim = c(0, NA)) + \n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Rain (mm)\")\n\n\n# DPD\n\nDPD_day <- weather_data %>%\n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  group_by(days) %>%\n  summarise(mean_DPD = mean(DPD, na.rm = TRUE),\n            up_95 = quantile(DPD, 0.975),\n            low_95 = quantile(DPD, 0.025))\n\nDPD_g = weather_data %>% \n  filter(days >= 0 & days <= 80) %>%\n  filter(!state ==\"SP\") %>%\n  ggplot()+\n  geom_smooth(aes(days,DPD, group = id),se = F, color = \"grey\", size = .8)+\n  geom_smooth(data = DPD_day, aes(x = days, y = mean_DPD), color = \"black\", size = 2)+\n geom_smooth(data = DPD_day, aes(x = days, y = up_95),\n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n geom_smooth(data = DPD_day, aes(x = days, y = low_95), \n             color = \"black\", size = 1.4, linetype = \"dashed\", se = F)+\n  scale_x_continuous(breaks = c(0, 20, 40, 60, 80), limits = c(0, 80))+\n    #coord_cartesian(ylim = c(0, NA)) + \n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"))+\n  labs(x = \"Days\",\n       y = \"DPD (°C)\")\n\n\n# Days\n\nDAYS_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  filter(days >= 0 & days <= 80) %>%\n  ggplot(aes(days_difference))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Days\",\n       y = \"Frequency\")\n\n\n# Lat\n\nLAT_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot(aes(lat))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Latitude\",\n       y = \"\")\n\n\n# Lon\n\nLON_g = weather_data %>% \n  filter(!state ==\"SP\") %>%\n  ggplot(aes(lon))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10),\n        axis.title = element_text(face = \"bold\", size = 12))+\n  labs(x = \"Longitude\",\n       y = \"\")\n\n# Season\n\nn_study = ma2 %>% \n count(year) %>% \n    mutate(year1 = row_number())\n\nstudy_g = n_study %>% \n  ggplot(aes(as.factor(year1),n))+\n  geom_bar(stat = \"identity\", fill = \"black\", color = \"white\")+\n  #geom_histogram(fill = \"black\", color = \"white\", bins = 12)+\n  ggthemes::theme_few()+\n  theme(text = element_text(size = 10, face = \"bold\"),\n        axis.title = )+\n  labs(x = \"Year\",\n       y = \"Number\")\n   \n\nlibrary(cowplot)\n\n\n\n#plot_grid(T2M_g , T2M_MAX_g , T2M_MIN_g , RH2M_g , RAIN_g , DPD_g,DAYS_g, LAT_g, LON_g,\n #       labels = c(\"(a)\", \"(b)\", \"(c)\", \"(d)\",\"(e)\",\"(f)\",\"(g)\",\"(h)\",\"(i)\"),label_x = -0.03, label_y =1)\n\nplot_grid(T2M_g , RH2M_g , RAIN_g ,DAYS_g, LAT_g, LON_g,\n        labels = c(\"(a)\", \"(b)\", \"(c)\", \"(d)\",\"(e)\",\"(f)\"),label_x = -0.03, label_y =1,\n        label_size = 10)\n\nggsave(\"fig/covariates.png\", dpi = 600, bg = \"white\", height = 6, width = 10)\n\n```\n\n# Framework modeling\n\n## Selecting of models\n```{r}\nwd_0_60 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_0_60 = wd_0_60 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\ninla_0_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_60)\n\n```\n\n\n```{r}\nwd_0_60 %>%\n  dplyr::group_by(epidemic) %>% \n  summarise(\n    n = n()/61\n  )\n```\n\n```{r}\nmodel_full <- inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nmodel_reduced <- inla(epidemic ~T2M +PRECTOTCORR + RH2M,\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(model_reduced)\nloglik_full = model_full$mlik\nloglik_reduced = model_reduced$mlik\nln_bf <- loglik_full - loglik_reduced\nln_bf\n```\n\n\n## By windows\n\n### 0 to 20\n```{r}\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 20)\n\n\nwd_0_20 = wd_0_20 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\ninla_0_20 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n```{r}\nwd_0_20 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n```{r}\nwd_0_20 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_0_20 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_0_20)\n\n```\n\n```{r}\ninla_0_20$summary.random\n```\n\n#### Marginal effects\n\n\n```{r}\n\nmarg_0_20_1 <- inla_0_20$marginals.fixed[[1]] # Intercept\n\n\nmarg_0_20_1 = as.data.frame(marg_0_20_1)\nmarg_0_20_1$windows = c(\"Survival\")\nmarg_0_20_1$parameter = c(\"Intercept\")\n\nggplot(marg_0_20_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_0_20_2 <- inla_0_20$marginals.fixed[[2]] # T2M\n\nmarg_0_20_2 = as.data.frame(marg_0_20_2)\nmarg_0_20_2$windows = c(\"Survival\")\nmarg_0_20_2$parameter = c(\"Temperature\")\n\nggplot(marg_0_20_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_0_20_3 <- inla_0_20$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_0_20_3 = as.data.frame(marg_0_20_3)\nmarg_0_20_3$windows = c(\"Survival\")\nmarg_0_20_3$parameter = c(\"Rain\")\n\nggplot(marg_0_20_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_0_20_4 <- inla_0_20$marginals.fixed[[4]] # RH2M\n\nmarg_0_20_4 = as.data.frame(marg_0_20_4)\nmarg_0_20_4$windows = c(\"Survival\")\nmarg_0_20_4$parameter = c(\"Humidity\")\n\nggplot(marg_0_20_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_0_20$summary.fitted.values\n\npredictions <- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\n\npred_results <- data.frame(\n  RH2M = wd_0_20$RH2M, \n  PRECTOTCORR= wd_0_20$PRECTOTCORR,\n  T2M = wd_0_20$T2M,\n  predicted = inla_0_20$summary.fitted.values$mean,  \n  lower = inla_0_20$summary.fitted.values$`0.025quant`,  \n  upper = inla_0_20$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n#b4e4c0 #ca5858#6280bc ##c20f0f\nplot_0_20 = pred_results %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n\n  labs(x = \"\", y = \"Target spot outbreak (%)\",title = \"Survival\")+\n  ggthemes::theme_few()+\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n  theme(\n    axis.title.y = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_0_20\n```\n\n### 20 to 40\n\n```{r}\nwd_20_40 = weather_data %>% \n  dplyr::filter(days >= 20 & days <= 40)\n\n\nwd_20_40 = wd_20_40 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_20_40 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_20_40,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_20_40 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_20_40)\n\n```\n\n```{r}\ninla_20_40$summary.random\n```\n\n#### Marginal effects\n\n```{r}\n\nmarg_20_40_1 <- inla_20_40$marginals.fixed[[1]] # Intercept\n\n\nmarg_20_40_1 = as.data.frame(marg_20_40_1)\nmarg_20_40_1$windows = c(\"Sporulation\")\nmarg_20_40_1$parameter = c(\"Intercept\")\n\nggplot(marg_20_40_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_20_40_2 <- inla_20_40$marginals.fixed[[2]] # T2M\n\nmarg_20_40_2 = as.data.frame(marg_20_40_2)\nmarg_20_40_2$windows = c(\"Sporulation\")\nmarg_20_40_2$parameter = c(\"Temperature\")\n\nggplot(marg_20_40_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_20_40_3 <- inla_20_40$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_20_40_3 = as.data.frame(marg_20_40_3)\nmarg_20_40_3$windows = c(\"Sporulation\")\nmarg_20_40_3$parameter = c(\"Rain\")\n\nggplot(marg_20_40_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_20_40_4 <- inla_20_40$marginals.fixed[[4]] # RH2M\n\nmarg_20_40_4 = as.data.frame(marg_20_40_4)\nmarg_20_40_4$windows = c(\"Sporulation\")\nmarg_20_40_4$parameter = c(\"Humidity\")\n\nggplot(marg_20_40_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_20_40$summary.fitted.values\n\npredictions <- inla_20_40$summary.fitted.values\n\nwd_20_40$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_20_40$RH2M, \n  PRECTOTCORR= wd_20_40$PRECTOTCORR,\n  T2M = wd_20_40$T2M,\n  predicted = inla_20_40$summary.fitted.values$mean,  \n  lower = inla_20_40$summary.fitted.values$`0.025quant`,  \n  upper = inla_20_40$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_20_40 = pred_results %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",,title = \"Sporulation\") +\n  ggthemes::theme_few()+\n     facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_20_40\n```\n\n### 40 to 60\n\n```{r}\nwd_40_60 = weather_data %>% \n  dplyr::filter(days >= 40 & days <= 60)\n\n\nwd_40_60 = wd_40_60 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_40_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_40_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\n```\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_40_60 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n\n```{r}\n\nsummary(inla_40_60)\n\n```\n\n```{r}\ninla_40_60$summary.random\n```\n\n#### Marginal effects\n```{r}\n\nmarg_40_60_1 <- inla_40_60$marginals.fixed[[1]] # Intercept\n\n\nmarg_40_60_1 = as.data.frame(marg_40_60_1)\nmarg_40_60_1$windows = c(\"Infection\")\nmarg_40_60_1$parameter = c(\"Intercept\")\n\nggplot(marg_40_60_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_40_60_2 <- inla_40_60$marginals.fixed[[2]] # T2M\n\nmarg_40_60_2 = as.data.frame(marg_40_60_2)\nmarg_40_60_2$windows = c(\"Infection\")\nmarg_40_60_2$parameter = c(\"Temperature\")\n\nggplot(marg_40_60_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_40_60_3 <- inla_40_60$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_40_60_3 = as.data.frame(marg_40_60_3)\nmarg_40_60_3$windows = c(\"Infection\")\nmarg_40_60_3$parameter = c(\"Rain\")\n\nmarg_40_60_3 %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_40_60_4 <- inla_40_60$marginals.fixed[[4]] # RH2M\n\nmarg_40_60_4 = as.data.frame(marg_40_60_4)\nmarg_40_60_4$windows = c(\"Infection\")\nmarg_40_60_4$parameter = c(\"Humidity\")\n\nggplot(marg_40_60_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n#### Prediction\n\n```{r}\n#inla_40_60$summary.fitted.values\n\npredictions <- inla_40_60$summary.fitted.values\n\nwd_40_60$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_40_60$RH2M, \n  PRECTOTCORR= wd_40_60$PRECTOTCORR,\n  T2M = wd_40_60$T2M,\n  predicted = inla_40_60$summary.fitted.values$mean,  \n  lower = inla_40_60$summary.fitted.values$`0.025quant`,  \n  upper = inla_40_60$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_40_60 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",title = \"Infection\") +\n  ggthemes::theme_few()+\n   facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_40_60\n\n```\n\n### 60 to 80\n```{r}\nwd_60_80 = weather_data %>% \n  dplyr::filter(days >= 60 & days <= 80)\n\nwd_60_80 = wd_60_80 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_60_80 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_80,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n```\n\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n```\n\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n```\n\n```{r}\nwd_60_80 %>% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    DAYS_mean = mean(days_difference),\n    DAYS_sd = sd(days_difference),\n    DAYS_max = max(days_difference),\n    DAYS_min = min(days_difference),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    LAT_mean = mean(lat),\n    LAT_sd = sd(lat),\n    LAT_max = max(lat),\n    LAT_min = min(lat),\n  )\n```\n```{r}\nweather_data %>% \n  filter(!state == \"SP\") %>% \n   summarise(\n    LON_mean = mean(lon),\n    LON_sd = sd(lon),\n    LON_max = max(lon),\n    LON_min = min(lon),\n  )\n```\n\n```{r}\n\nsummary(inla_60_80)\n\n```\n\n```{r}\ninla_60_80$summary.random\n```\n\n#### Marginal effects\n```{r}\n\nmarg_60_80_1 <- inla_60_80$marginals.fixed[[1]] # Intercept\n\n\nmarg_60_80_1 = as.data.frame(marg_60_80_1)\nmarg_60_80_1$windows = c(\"Colonization\")\nmarg_60_80_1$parameter = c(\"Intercept\")\n\nggplot(marg_60_80_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\nmarg_60_80_2 <- inla_60_80$marginals.fixed[[2]] # T2M\n\nmarg_60_80_2 = as.data.frame(marg_60_80_2)\nmarg_60_80_2$windows = c(\"Colonization\")\nmarg_60_80_2$parameter = c(\"Temperature\")\n\nggplot(marg_60_80_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_60_80_3 <- inla_60_80$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_60_80_3 = as.data.frame(marg_60_80_3)\nmarg_60_80_3$windows = c(\"Colonization\")\nmarg_60_80_3$parameter = c(\"Rain\")\n\nmarg_60_80_3 %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n```{r}\n\nmarg_60_80_4 <- inla_60_80$marginals.fixed[[4]] # RH2M\n\nmarg_60_80_4 = as.data.frame(marg_60_80_4)\nmarg_60_80_4$windows = c(\"Colonization\")\nmarg_60_80_4$parameter = c(\"Humidity\")\n\nggplot(marg_60_80_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n```\n\n\n#### Prediction\n\n```{r}\n#inla_60_80$summary.fitted.values\n\npredictions <- inla_60_80$summary.fitted.values\n\nwd_60_80$mean = predictions$mean\n\npred_results <- data.frame(\n  RH2M = wd_60_80$RH2M, \n  PRECTOTCORR= wd_60_80$PRECTOTCORR,\n  T2M = wd_60_80$T2M,\n  predicted = inla_60_80$summary.fitted.values$mean,  \n  lower = inla_60_80$summary.fitted.values$`0.025quant`,  \n  upper = inla_60_80$summary.fitted.values$`0.975quant`   \n)\n\npred_results <- pred_results %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_60_80 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"Colonization\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_60_80\n```\n\n### Joining\n\n```{r}\nplot_grid(plot_0_20,plot_20_40,plot_40_60,plot_60_80, ncol = 4)\n\n\nggsave(\"fig/INLA_prediction.png\", dpi = 600, bg = \"white\",\n        height = 6, width = 10)\n```\n### Marginal plotting\n```{r}\n\n\nall_marginal = rbind(marg_0_20_1,marg_0_20_2,marg_0_20_3,marg_0_20_4,\n                     marg_20_40_1,marg_20_40_2,marg_20_40_3,marg_20_40_4,\n                     marg_40_60_1,marg_40_60_2,marg_40_60_3,marg_40_60_4,\n                     marg_60_80_1,marg_60_80_2,marg_60_80_3,marg_60_80_4)\n\nall_marginal %>% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_colour_manual(values = c(\"darkred\",\"#002f61\", \"darkgreen\",\"darkorange\"))+\n  #scale_color_viridis_d(option = \"D\")+\n  facet_wrap(~parameter, scale = \"free\")+\n  labs(x = \"Marginal effect\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        strip.text = element_text(face = \"bold\"))\n\nggsave(\"fig/marginal_effects.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 8)\n```\n\n### Random (Year)\n```{r}\nyear_0_20 = inla_0_20$summary.random\nyear_0_20 = as.data.frame(year_0_20)\n\nyear_0_20 %>% \nggplot(aes(x = as.factor(year1.ID), y = year1.mean)) +\n  geom_segment(aes(xend = as.factor(year1.ID), y = 0, yend = year1.mean, \n                   color = year1.mean > 0), size = 1, linetype = \"dashed\") +\n  geom_point(aes(color = year1.mean > 0), size = 4) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"solid\") +  \n  scale_color_manual(values = c(\"TRUE\" = \"darkred\", \"FALSE\" = \"#002f61\")) +\n  scale_y_continuous(breaks = seq(-2.5, 4.5, 0.5)) +\n  ggthemes::theme_few() +\n  labs(x = \"Year\",\n       y = \"Marginal effect\") +\n  theme(text = element_text(size = 12),\n       axis.title = element_text(face = \"bold\", size = 12),\n        strip.text = element_text(face = \"bold\", size = 12),\n        legend.position = \"none\")\n\nggsave(\"fig/marginal_effects_year.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 10)\n```\n\n### Scenarios\n\n```{r,eval = FALSE, echo = TRUE}\n\nmedian(pred_results$PRECTOTCORR)\nmedian(pred_results$RH2M)\n\npred_results2 = pred_results %>% \n  dplyr::mutate(scenarios = ifelse(RH2M>= 79, 1,0))\n\n\n\npred_results2 <- pred_results2 %>%\n  pivot_longer(\n    cols = -c(predicted,lower,upper, scenarios),  \n    names_to = \"variables\")\n\npred_results2$scenarios = as.factor(pred_results2$scenarios)\n\nplot_60_80 = pred_results2 %>% \n  filter(variables == \"T2M\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = scenarios), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  #scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n   #                               \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  #facet_wrap(~scenarios, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"right\"\n  )\nplot_60_80\n```\n\n```{r,eval = FALSE, echo = TRUE}\nplot_60_80 = pred_results %>% \n  #filter(variables == \"PRECTOTCORR\") %>% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n# Map\n\n```{r}\nmap = ma2 %>% \n  dplyr::select(study,year,location,state,lat,longitude,mean_sev)\n\ncolnames(map) = c(\"study\",\"year\",\"location\",\"state\",\"lat\",\"lon\",\"mean_sev\")\n\nlibrary(scales)\nlibrary(ggspatial) \nlibrary(readxl)\nlibrary(ggrepel)\nlibrary(cowplot)\nlibrary(rnaturalearth)\n\nBRA = ne_states(\n  country = \"Brazil\",\n  returnclass = \"sf\"\n)\n\n\n\nstates <- filter(BRA, \n                 name_pt == \"Paraná\"|\n                 name_pt == \"São Paulo\"|\n                 name_pt == \"Mato Grosso\"|\n                 name_pt == \"Mato Grosso do Sul\"|\n                 name_pt == \"Goiás\"|\n                 name_pt == \"Minas Gerais\"|\n                 name_pt == \"Distrito Federal\"|\n                 name_pt == \"Tocantins\"|\n                 name_pt == \"Bahia\")\n\nstates = states %>% \n  mutate(id = case_when(\n    name_pt == \"Paraná\" ~ \"PR\",\n    name_pt == \"São Paulo\" ~ \"SP\",\n    name_pt == \"Mato Grosso\" ~ \"MT\",\n    name_pt == \"Mato Grosso do Sul\" ~ \"MS\",\n    name_pt == \"Goiás\" ~ \"GO\",\n    name_pt == \"Minas Gerais\" ~ \"MG\",\n    name_pt == \"Distrito Federal\" ~ \"DF\",\n    name_pt == \"Tocantins\" ~ \"TO\",\n    name_pt == \"Bahia\" ~ \"BA\"))\n\nSUL = ne_states(\n  country = c(\"Argentina\", \"Uruguay\", \"Paraguay\", \"Colombia\", \"Bolivia\"),\n  returnclass = \"sf\")\nbr_sf <- ne_states(geounit = \"brazil\",\n                   returnclass = \"sf\")\n\nunique(map$state)\n```\n\n```{r}\nmap_plot = map %>% \nggplot()+\n  geom_sf(data = SUL, fill = \"gray95\", color = \"gray95\") +\n  geom_sf(data = BRA, fill = \"gray98\", color= \"gray60\", size =0.2) +\n  geom_sf(data = states, aes(x = longitude, y = latitude), fill = \"white\", color = \"gray40\", size = 0.2) +\n  geom_jitter(data = map, aes(as.numeric(lon), as.numeric(lat), size = mean_sev), alpha = 0.8, color = \"#002f61\") +\n  geom_text(data = states, aes(x = longitude, y = latitude,  label = id), size = 3, hjust = 0.8, fontface = \"bold\")+\n  labs(x = \"Longitude\", y = \"Latitude\", color = \"Region\", size = \"Number of Trials\") +\n  scale_size_continuous(range = c(1,5), breaks = c(1,5,12))+\n  #theme_bw()+\n  theme_minimal_grid()+\n  annotation_scale(location = \"bl\", width_hint = 0.2) +\n  coord_sf(xlim = c(-65,-40), ylim = c(-32, -9), expand = FALSE)+\n  #scale_color_calc()+\n  theme(legend.position = \"right\",\n        legend.justification = \"center\",\n        legend.title.align = 0.5,\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10),\n        axis.text.x =  element_text(size = 9),\n        axis.text.y = element_text(size = 9),\n        axis.title.x = element_text(size=12, face = \"bold\"),\n        axis.title.y = element_text(size=12, face = \"bold\"),\n        panel.border = element_rect(color = \"gray50\", size=.2),\n        panel.background = element_rect(fill = \"#d2eeff\")\n        )+\n  annotation_north_arrow(location = \"bl\", which_north = \"true\", pad_x = unit(0.5, \"in\"), pad_y = unit(0.5, \"in\"), style = north_arrow_orienteering(fill = c(\"gray80\", \"gray96\")), height = unit(0.9, \"cm\"), width = unit(0.8, \"cm\"))+\n  guides(size=F)\n```\n\n\n```{r}\nsev_plot = map %>% \n  ggplot(aes(mean_sev))+\n  geom_histogram(fill = \"#002f61\", color = \"white\", bins = 15)+\n  ggthemes::theme_few()+\n  labs(x = \"Severity (%)\",\n       y = \"Frequency\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, vjust = 0.5))\n```\n\n```{r}\nyear_plot= map %>% \ndplyr::group_by(year) %>% \n  summarise(\n    n = n()\n  ) %>% \n  ggplot(aes(as.factor(year),n))+\n  geom_bar(stat = \"identity\" ,fill = \"#002f61\")+\n  ggthemes::theme_few()+\n  labs(x = \"Year\",\n       y = \"Number of studies\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        axis.text.x = element_text(angle = 45, vjust = 0.5))\n\nyear_plot\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\n(map_plot + (sev_plot / year_plot)) + \n  plot_layout(design = \"AB\n                        AB\", widths = c(2, 1)) +\n  plot_annotation(tag_levels = \"a\", tag_prefix = \"(\", tag_suffix = \")\") & \n  theme(plot.tag = element_text(face = \"bold\", size = 12), label_x = -0.03, label_y = 1)\n\n\nggsave(\"fig/map_sev_year.png\", dpi = 600, bg = \"white\",\n       width = 10, height = 8)\n```\n\n# Overall\n```{r,eval = FALSE, echo = TRUE}\n\nwd_60_8022 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n\nwd_60_8022 = wd_60_8022 %>%\n  #filter(!mean_sev >= .6) %>% \n  #filter(mean_sev > 0.05) %>% \n  group_by(id) %>% \n  dplyr::summarise(\n    RH2M = mean(RH2M),\n    T2M = mean(T2M),\n    T2M_MAX = mean(T2M_MAX),\n    T2M_MIN = mean(T2M_MIN),\n    DPD = mean(DPD),\n    PRECTOTCORR = sum(PRECTOTCORR),\n    lat = mean(lat),\n    lon = mean(lon),\n    days_difference = mean(days_difference),\n    mean_sev = mean(mean_sev),\n    level1 = mean(level1),\n    year1 = mean(year1)\n    )\n\nwd_60_8022 = wd_60_8022 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0)) # 25 = 73% Acurácia\n\n\n#f(lat, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n#f(lon, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))\n\n\nsurv_fit_ONI1 = inla(epidemic ~T2M + RH2M,\n          #f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_8022,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\nsummary(surv_fit_ONI1)\n\npredictions <- surv_fit_ONI1$summary.fitted.values\n\nwd_60_8022$mean = predictions$mean\n\nwd_60_8 = wd_60_8022 %>% \n  dplyr::select(epidemic,mean) %>% \n  mutate(\n    ID = nrow(epidemic)\n  )\n\nwd_60_8 = as.data.frame(wd_60_8)\nclass(wd_60_8)\n\n#optimal.thresholds(wd_60_8)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(wd_60_8022$mean  > 0.75)),  mode= \"everything\",  reference = as.factor(wd_60_8022$epidemic))\ncm_rf_052\n\ndat_lasso <- data.frame(1, wd_60_8022$epidemic, predictions$mean)\nauc.roc.plot(dat_lasso)\nroc(wd_60_8022$epidemic,predictions$mean)\nerror.threshold.plot(dat_lasso, opt.methods = 3)\npresence.absence.summary(dat_lasso)\n```\n\n## LOOCV\n```{r,eval = FALSE, echo = TRUE}\nset.seed(123)\n\n\nacc <- NULL\nfor(i in 1:nrow(wd_60_8022))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_60_8022[-i,]\n    test <- wd_60_8022[i,]\n    \n    # Fitting\n\n    modelt <- inla(epidemic ~T2M + RH2M,\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      #f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob <- modelt$summary.fitted.values\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob$mean > 0.75,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# Dialy\nEsse também foi bom com dados diários\n```{r,eval = FALSE, echo = TRUE}\nwd_0_20 = weather_data %>% \n  dplyr::filter(days >= 0 & days <= 60)\n\n#wd_0_20 = wd_0_20 %>% \n # filter(year == \"2013\")\n\nwd_0_20 = wd_0_20 %>% \n  dplyr::mutate(epidemic = ifelse(mean_sev >= 0.20, 1, 0))\n\n\ninla_0_20 = inla(epidemic ~T2M + RH2M+\n     f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_20)\n\npredictions <- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\ndat_lasso <- data.frame(1, wd_0_20$epidemic, predictions$mean)\n\noptimal.thresholds(dat_lasso)\ncm_rf_052 = confusionMatrix(data = as.factor(as.numeric(wd_0_20$mean  > 0.75)),  mode= \"everything\",  reference = as.factor(wd_0_20$epidemic))\ncm_rf_052\n\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\nauc.roc.plot(dat_lasso)\n\nggsave(\"fig/ROC_plot.png\")\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\nroc(wd_0_20$epidemic,predictions$mean)\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\n\nerror.threshold.plot(dat_lasso, opt.methods = 3)\n\n```\n\n```{r,eval = FALSE, echo = TRUE}\npresence.absence.summary(dat_lasso)\n```\n\n\n## LOOCV\nLOOCV com dados diários\n```{r,eval = FALSE, echo = TRUE}\nset.seed(123)\n\n\nacc <- NULL\nfor(i in 1:nrow(wd_0_20))\n{\n    # Train-test splitting\n    # 499 samples -> fitting\n    # 1 sample -> testing\n    train <- wd_0_20[-i,]\n    test <- wd_0_20[i,]\n    \n    # Fitting\n\n    modelt <- inla(epidemic ~T2M + RH2M+\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob <- modelt$summary.fitted.values\n    \n    # If prob > 0.5 then 1, else 0\n    results <- ifelse(results_prob$mean > 0.75,1,0)\n    \n    # Actual answers\n    answers <- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError <- mean(answers != results)\n    \n    # Collecting results\n    acc[i] <- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)\n```\n\n# PREDICTION WITH INLA.BRU TO FUTURE DATA\n\n```{r,eval = FALSE, echo = TRUE}\n\nwd_0_203 = wd_0_20 %>% \n  dplyr::select(-epidemic)\n\n\npredictions <- inla_0_20$summary.fitted.values\n\ninla_0_20 = bru(epidemic ~T2M + RH2M+\n                  f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\")\n\n\nsummary(inla_0_20)\nt = predict(object= inla_0_20, newdata = wd_0_203, formula = ~ c(pred = Intercept + T2M + RH2M))\n\nglimpse(t)\nplogis(t$mean)\n\nwd_0_20 %>% \n  ggplot(aes(mean_sev))+\n  geom_histogram()\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"about.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","bibliography":["crossref.bib"],"csl":"chicago-author-date.csl","theme":"flatly","toc_float":{"collapsed":false,"smooth_scroll":false},"lib_dir":"site_libs","self_contained":true,"title":""},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}