[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About\n\nThe dataset was obtained from field experiments conducted under natural infection conditions of disease, being carried out between the years of 2012 and 2023 in the states of Mato Grosso (MT), Goiás (GO), Tocantins (TO), Bahia (BA), Mato Grosso do Sul (MS), Minas Gerais (MG), São Paulo (SP), and Paraná (PR)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "library(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\n\nWarning: pacote 'purrr' foi compilado no R versão 4.4.2\n\nlibrary(gsheet)\n\nWarning: pacote 'gsheet' foi compilado no R versão 4.4.2\n\nlibrary(raster)\n\nWarning: pacote 'raster' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: sp\n\n\nWarning: pacote 'sp' foi compilado no R versão 4.4.2\n\n\n\nAnexando pacote: 'raster'\n\n\nO seguinte objeto é mascarado por 'package:dplyr':\n\n    select\n\nlibrary(ncdf4)\nlibrary(lubridate)\n\nWarning: pacote 'lubridate' foi compilado no R versão 4.4.2\n\n\n\nAnexando pacote: 'lubridate'\n\n\nOs seguintes objetos são mascarados por 'package:raster':\n\n    intersect, union\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(readxl)\nlibrary(writexl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ stringr 1.5.1\n✔ ggplot2 3.5.1     ✔ tibble  3.2.1\n✔ readr   2.1.5     ✔ tidyr   1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks raster::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ raster::select() masks dplyr::select()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(INLA)\n\nWarning: pacote 'INLA' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: Matrix\n\nAnexando pacote: 'Matrix'\n\nOs seguintes objetos são mascarados por 'package:tidyr':\n\n    expand, pack, unpack\n\nThis is INLA_24.12.11 built 2024-12-11 19:58:26 UTC.\n - See www.r-inla.org/contact-us for how to get help.\n - List available models/likelihoods/etc with inla.list.models()\n - Use inla.doc(&lt;NAME&gt;) to access documentation\n\nlibrary(caret)\n\nWarning: pacote 'caret' foi compilado no R versão 4.4.2\n\n\nCarregando pacotes exigidos: lattice\n\nAnexando pacote: 'caret'\n\nO seguinte objeto é mascarado por 'package:purrr':\n\n    lift\n\n\n\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\n\n\n\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df &lt;- as.data.frame(ma2)\nma2_df$planting_date &lt;- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 &lt;- ma2_df %&gt;%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path &lt;- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/pr_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates &lt;- function(netcdf_path) {\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var &lt;- ncvar_get(nc_data, \"time\")\n  time_units &lt;- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date &lt;- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates &lt;- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates &lt;- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data &lt;- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon &lt;- row$lon\n  lat &lt;- row$lat\n  start_date &lt;- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date &lt;- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq &lt;- seq.Date(start_date, end_date, by = \"day\")\n  date_indices &lt;- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices &lt;- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de precipitação para as coordenadas e datas específicas\n  lon_idx &lt;- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx &lt;- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  precip_data &lt;- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"pr\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de precip_data não retornar dados, retornar NULL\n  if (length(precip_data) == 0 || all(is.na(precip_data))) {\n    message(\"Nenhum dado de precipitação encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result &lt;- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    precipitation = precip_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox &lt;- ma3 %&gt;%\n  split(1:nrow(.)) %&gt;%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\n#write_xlsx(box, \"data/br_dwgd_prec.xlsx\")\n\n\nprec = read_xlsx(\"data/br_dwgd_prec.xlsx\")\nunique(prec$year)\n\nprec = prec %&gt;% \n  filter(!state %in% c(\"SP\"))\n\nprec$date = as.Date(prec$date)\nprec$study = as.factor(prec$study)\nprec$planting_date = as.Date(prec$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nprec &lt;- prec %&gt;%\n  mutate(\n    days =as.numeric(date - planting_date))# %&gt;%\n  #filter(days &gt;= 0)\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df &lt;- as.data.frame(ma2)\nma2_df$planting_date &lt;- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 &lt;- ma2_df %&gt;%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path &lt;- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmax_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates &lt;- function(netcdf_path) {\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var &lt;- ncvar_get(nc_data, \"time\")\n  time_units &lt;- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date &lt;- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates &lt;- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates &lt;- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data &lt;- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon &lt;- row$lon\n  lat &lt;- row$lat\n  start_date &lt;- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date &lt;- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq &lt;- seq.Date(start_date, end_date, by = \"day\")\n  date_indices &lt;- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices &lt;- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmax para as coordenadas e datas específicas\n  lon_idx &lt;- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx &lt;- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmax_data &lt;- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmax\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmax_data não retornar dados, retornar NULL\n  if (length(tmax_data) == 0 || all(is.na(tmax_data))) {\n    message(\"Nenhum dado de Tmax encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result &lt;- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmax = tmax_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox &lt;- ma3 %&gt;%\n  split(1:nrow(.)) %&gt;%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmax.xlsx\")\n\n\ntmax = read_xlsx(\"data/br_dwgd_tmax.xlsx\")\n\ntmax = tmax %&gt;% \n  filter(!state %in% c(\"SP\"))\n\ntmax$date = as.Date(tmax$date)\ntmax$study = as.factor(tmax$study)\ntmax$planting_date = as.Date(tmax$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmax &lt;- tmax %&gt;%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df &lt;- as.data.frame(ma2)\nma2_df$planting_date &lt;- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 &lt;- ma2_df %&gt;%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path &lt;- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/Tmin_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates &lt;- function(netcdf_path) {\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var &lt;- ncvar_get(nc_data, \"time\")\n  time_units &lt;- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date &lt;- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates &lt;- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates &lt;- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data &lt;- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon &lt;- row$lon\n  lat &lt;- row$lat\n  start_date &lt;- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date &lt;- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq &lt;- seq.Date(start_date, end_date, by = \"day\")\n  date_indices &lt;- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices &lt;- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de Tmin para as coordenadas e datas específicas\n  lon_idx &lt;- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx &lt;- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  tmin_data &lt;- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"Tmin\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de tmin_data não retornar dados, retornar NULL\n  if (length(tmin_data) == 0 || all(is.na(tmin_data))) {\n    message(\"Nenhum dado de Tmin encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result &lt;- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    tmin = tmin_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox &lt;- ma3 %&gt;%\n  split(1:nrow(.)) %&gt;%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_tmin.xlsx\")\n\n\ntmin = read_xlsx(\"data/br_dwgd_tmin.xlsx\")\n\ntmin = tmin %&gt;% \n  filter(!state %in% c(\"SP\"))\n\ntmin$date = as.Date(tmin$date)\ntmin$study = as.factor(tmin$study)\ntmin$planting_date = as.Date(tmin$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\ntmin &lt;- tmin %&gt;%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ncdf4)\nlibrary(purrr)\nlibrary(readr)\nlibrary(writexl)\n\n# 1. Lendo a planilha de municípios com data de plantio\nma2 &lt;- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1j0WZXtJsSMN1MAbmkppnCMnr5d9LnsxV/edit?usp=sharing&ouid=112586075609758894128&rtpof=true&sd=true\")\nma2_df &lt;- as.data.frame(ma2)\nma2_df$planting_date &lt;- as.Date(ma2_df$planting_date, format = \"%Y-%m-%d\")\n\n# 2. Adicionando colunas para 90 dias antes e depois da data de plantio\nma3 &lt;- ma2_df %&gt;%\n  mutate(\n    pd_minus90 = planting_date - 90,  # 90 dias antes do plantio\n    pd90 = planting_date + 90         # 90 dias após o plantio\n  )\n\n# 3. Caminho para o arquivo NetCDF\nnetcdf_path &lt;- \"C:/Users/ricar/Documents/Extract_Xavier/code/data/RH_20010101_20240320_BR-DWGD_UFES_UTEXAS_v_3.2.3.nc\"\n\n# 4. Função para verificar e interpretar as datas no NetCDF considerando \"hours since\"\nget_nc_dates &lt;- function(netcdf_path) {\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Lendo a variável de tempo e sua unidade\n  time_var &lt;- ncvar_get(nc_data, \"time\")\n  time_units &lt;- ncatt_get(nc_data, \"time\", \"units\")$value\n  print(paste(\"Unidade de tempo no NetCDF:\", time_units))\n  \n  # Extraindo a origem da unidade de tempo e verificando o formato\n  if (grepl(\"hours since\", time_units)) {\n    origin_date &lt;- as.POSIXct(sub(\"hours since \", \"\", time_units), tz = \"UTC\")\n    nc_dates &lt;- origin_date + as.difftime(time_var, units = \"hours\")\n  } else {\n    stop(\"Unidade de tempo inesperada:\", time_units)\n  }\n  \n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  return(as.Date(nc_dates))\n}\n\n# 5. Chamando a função para obter as datas\nnc_dates &lt;- get_nc_dates(netcdf_path)\n\n# 6. Função para extrair dados do NetCDF para uma linha\nget_br_dwgd_data &lt;- function(row, line_number, netcdf_path, nc_dates) {\n  # Abrindo o arquivo NetCDF\n  nc_data &lt;- nc_open(netcdf_path)\n  \n  # Extraindo variáveis de interesse\n  lon &lt;- row$lon\n  lat &lt;- row$lat\n  start_date &lt;- row$pd_minus90  # Início: 90 dias antes do plantio\n  end_date &lt;- row$pd90          # Fim: 90 dias após o plantio\n\n  # Gerando sequência de datas e comparando com o NetCDF\n  date_seq &lt;- seq.Date(start_date, end_date, by = \"day\")\n  date_indices &lt;- match(date_seq, nc_dates)\n\n  # Removendo índices de datas inexistentes\n  date_indices &lt;- date_indices[!is.na(date_indices)]\n  \n  # Caso não haja datas válidas, retornar NULL\n  if (length(date_indices) == 0) {\n    message(\"Nenhuma data correspondente encontrada para linha \", line_number, \" (\", row$location, \")\")\n    nc_close(nc_data)\n    return(NULL)\n  }\n\n  # Extraindo dados de RH para as coordenadas e datas específicas\n  lon_idx &lt;- which.min(abs(ncvar_get(nc_data, \"longitude\") - lon))\n  lat_idx &lt;- which.min(abs(ncvar_get(nc_data, \"latitude\") - lat))\n\n  rh_data &lt;- sapply(date_indices, function(i) {\n    ncvar_get(nc_data, \"RH\", start = c(lon_idx, lat_idx, i), count = c(1, 1, 1))\n  })\n\n  # Fechando o arquivo NetCDF\n  nc_close(nc_data)\n  \n  # Se a extração de rh_data não retornar dados, retornar NULL\n  if (length(rh_data) == 0 || all(is.na(rh_data))) {\n    message(\"Nenhum dado de RH encontrado para linha \", line_number, \" (\", row$location, \")\")\n    return(NULL)\n  }\n\n  # Criando um dataframe com os resultados e informações adicionais\n  result &lt;- data.frame(\n    date = date_seq[!is.na(date_indices)],\n    rh = rh_data,\n    study = row$study,\n    location = row$location,\n    state = row$state,\n    year = format(row$planting_date, \"%Y\"),\n    planting_date = row$planting_date,\n    mean_sev = row$mean_sev,\n    lat = row$lat,\n    lon = row$lon,\n    level = row$level\n  )\n  \n  return(result)\n}\n\n# 7. Iterando pelas linhas da planilha e extraindo os dados do NetCDF\nbox &lt;- ma3 %&gt;%\n  split(1:nrow(.)) %&gt;%\n  map2_dfr(1:nrow(ma3), ~ get_br_dwgd_data(.x, .y, netcdf_path, nc_dates), .id = \"id\")\n\n# 8. Visualizando o resultado final\nprint(box)\n\n# 9. Salvando o resultado em um arquivo Excel\nwrite_xlsx(box, \"data/br_dwgd_rh.xlsx\")\n\n\nrh = read_xlsx(\"data/br_dwgd_rh.xlsx\")\n\nrh = rh %&gt;% \n  filter(!state %in% c(\"SP\"))\n\nrh$date = as.Date(rh$date)\nrh$study = as.factor(rh$study)\nrh$planting_date = as.Date(rh$planting_date)\n# Suponha que seu dataframe 'ma4' já está carregado e que a coluna 'days' está corretamente calculada\nrh &lt;- rh %&gt;%\n  mutate(\n    days =as.numeric(date - planting_date)\n  )\n\nrh"
  },
  {
    "objectID": "about.html#framework-modeling",
    "href": "about.html#framework-modeling",
    "title": "About",
    "section": "Framework modeling",
    "text": "Framework modeling\n\nSelecting of models\n\nwd_0_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 60)\n\n\nwd_0_60 = wd_0_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_60)\n\nTime used:\n    Pre = 0.255, Running = 0.589, Post = 0.103, Total = 0.946 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.331 0.952     -6.147   -4.356     -2.362 -4.352   0\nT2M          0.184 0.013      0.158    0.184      0.211  0.184   0\nPRECTOTCORR  0.000 0.003     -0.007    0.000      0.006  0.000   0\nRH2M         0.030 0.003      0.024    0.030      0.035  0.030   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.162 0.088      0.043    0.146      0.379 0.113\n\nDeviance Information Criterion (DIC) ...............: 9456.67\nDeviance Information Criterion (DIC, saturated) ....: 9437.87\nEffective number of parameters .....................: 14.65\n\nWatanabe-Akaike information criterion (WAIC) ...: 9454.87\nEffective number of parameters .................: 12.83\n\nMarginal log-Likelihood:  -4786.44 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\nwd_0_60 %&gt;%\n  dplyr::group_by(epidemic) %&gt;% \n  summarise(\n    n = n()/61\n  )\n\n\n  \n\n\n\n\nmodel_full &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nmodel_reduced &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M,\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(model_reduced)\n\nTime used:\n    Pre = 0.135, Running = 0.215, Post = 0.305, Total = 0.655 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.614 0.378     -4.355   -3.614     -2.873 -3.614   0\nT2M          0.139 0.011      0.116    0.139      0.161  0.139   0\nPRECTOTCORR  0.002 0.003     -0.004    0.002      0.008  0.002   0\nRH2M         0.021 0.003      0.016    0.021      0.026  0.021   0\n\nDeviance Information Criterion (DIC) ...............: 11629.46\nDeviance Information Criterion (DIC, saturated) ....: 11610.66\nEffective number of parameters .....................: 4.00\n\nWatanabe-Akaike information criterion (WAIC) ...: 11629.48\nEffective number of parameters .................: 4.01\n\nMarginal log-Likelihood:  -5840.33 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\nloglik_full = model_full$mlik\nloglik_reduced = model_reduced$mlik\nln_bf &lt;- loglik_full - loglik_reduced\nln_bf\n\n                                          [,1]\nlog marginal-likelihood (integration) 1054.270\nlog marginal-likelihood (Gaussian)    1053.888\n\n\n\n\nBy windows\n\n0 to 20\n\nwd_0_20 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 20)\n\n\nwd_0_20 = wd_0_20 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_20 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_0_20 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_0_20)\n\nTime used:\n    Pre = 0.136, Running = 0.288, Post = 0.0668, Total = 0.491 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.390 0.974     -6.269   -4.405     -2.424 -4.402   0\nT2M          0.171 0.020      0.132    0.171      0.211  0.171   0\nPRECTOTCORR -0.007 0.006     -0.018   -0.007      0.004 -0.007   0\nRH2M         0.034 0.005      0.025    0.034      0.043  0.034   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.237 0.129      0.061    0.212      0.557 0.164\n\nDeviance Information Criterion (DIC) ...............: 3257.90\nDeviance Information Criterion (DIC, saturated) ....: 3251.43\nEffective number of parameters .....................: 14.59\n\nWatanabe-Akaike information criterion (WAIC) ...: 3256.29\nEffective number of parameters .................: 12.93\n\nMarginal log-Likelihood:  -1678.39 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_0_20$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant  0.975quant       mode\n1   1  3.3857406 1.4104486  0.9691892  3.2553448  6.58167204  3.0584720\n2   2 -1.8049505 0.7115334 -3.3211580 -1.7754028 -0.46526390 -1.7796871\n3   3 -1.9029894 0.7100121 -3.4168180 -1.8732918 -0.56638783 -1.8775749\n4   4 -2.3630546 0.7124726 -3.8820238 -2.3330721 -1.02298795 -2.3373230\n5   5 -1.0321778 0.7126943 -2.5496573 -1.0029703  0.31052060 -1.0072715\n6   6  4.2341320 1.3237743  1.9850066  4.1057494  7.24853748  3.9212002\n7   7  0.4925630 0.7313644 -1.0515174  0.5188705  1.87689474  0.5145988\n8   8 -1.5477560 0.7113387 -3.0638177 -1.5181266 -0.20864721 -1.5224087\n9   9  0.6058845 0.7317304 -0.9381584  0.6319136  1.99169185  0.6276392\n10 10  0.2839310 0.7319501 -1.2618759  0.3105037  1.66852476  0.3062429\n11 11  0.9360970 0.7332247 -0.6084859  0.9612735  2.32709557  0.9570015\n12 12 -1.2852275 0.7142955 -2.8061976 -1.2557778  0.05957507 -1.2600552\n            kld\n1  1.227549e-04\n2  4.527162e-05\n3  4.631141e-05\n4  4.498454e-05\n5  4.435787e-05\n6  1.364521e-04\n7  3.300992e-05\n8  4.545006e-05\n9  3.270726e-05\n10 3.288042e-05\n11 3.162420e-05\n12 4.356496e-05\n\n\n\nMarginal effects\n\nmarg_0_20_1 &lt;- inla_0_20$marginals.fixed[[1]] # Intercept\n\n\nmarg_0_20_1 = as.data.frame(marg_0_20_1)\nmarg_0_20_1$windows = c(\"Survival\")\nmarg_0_20_1$parameter = c(\"Intercept\")\n\nggplot(marg_0_20_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_2 &lt;- inla_0_20$marginals.fixed[[2]] # T2M\n\nmarg_0_20_2 = as.data.frame(marg_0_20_2)\nmarg_0_20_2$windows = c(\"Survival\")\nmarg_0_20_2$parameter = c(\"Temperature\")\n\nggplot(marg_0_20_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_3 &lt;- inla_0_20$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_0_20_3 = as.data.frame(marg_0_20_3)\nmarg_0_20_3$windows = c(\"Survival\")\nmarg_0_20_3$parameter = c(\"Rain\")\n\nggplot(marg_0_20_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_4 &lt;- inla_0_20$marginals.fixed[[4]] # RH2M\n\nmarg_0_20_4 = as.data.frame(marg_0_20_4)\nmarg_0_20_4$windows = c(\"Survival\")\nmarg_0_20_4$parameter = c(\"Humidity\")\n\nggplot(marg_0_20_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_0_20$summary.fitted.values\n\npredictions &lt;- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\n\npred_results &lt;- data.frame(\n  RH2M = wd_0_20$RH2M, \n  PRECTOTCORR= wd_0_20$PRECTOTCORR,\n  T2M = wd_0_20$T2M,\n  predicted = inla_0_20$summary.fitted.values$mean,  \n  lower = inla_0_20$summary.fitted.values$`0.025quant`,  \n  upper = inla_0_20$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n#b4e4c0 #ca5858#6280bc ##c20f0f\nplot_0_20 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n\n  labs(x = \"\", y = \"Target spot outbreak (%)\",title = \"Survival\")+\n  ggthemes::theme_few()+\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n  theme(\n    axis.title.y = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_0_20\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n20 to 40\n\nwd_20_40 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 20 & days &lt;= 40)\n\n\nwd_20_40 = wd_20_40 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_20_40 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_20_40,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_20_40 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_20_40)\n\nTime used:\n    Pre = 0.14, Running = 0.286, Post = 0.099, Total = 0.525 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.213 1.071     -6.285   -4.226     -2.065 -4.224   0\nT2M              0.186 0.024      0.139    0.186      0.233  0.186   0\nPRECTOTCORR     -0.011 0.006     -0.022   -0.011      0.000 -0.011   0\nRH2M             0.025 0.005      0.014    0.025      0.035  0.025   0\ndays_difference  0.002 0.002     -0.002    0.002      0.006  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.234 0.128       0.06    0.209      0.551 0.161\n\nDeviance Information Criterion (DIC) ...............: 3282.40\nDeviance Information Criterion (DIC, saturated) ....: 3275.93\nEffective number of parameters .....................: 15.60\n\nWatanabe-Akaike information criterion (WAIC) ...: 3280.99\nEffective number of parameters .................: 14.13\n\nMarginal log-Likelihood:  -1699.24 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_20_40$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant  0.975quant       mode\n1   1  3.4841428 1.4091450  1.0732497  3.3527209  6.68021566  3.1561176\n2   2 -1.8328219 0.7160197 -3.3589643 -1.8029950 -0.48474158 -1.8073007\n3   3 -1.8488351 0.7144924 -3.3723598 -1.8189522 -0.50357484 -1.8232629\n4   4 -2.3506429 0.7169628 -3.8793653 -2.3204588 -1.00195202 -2.3247369\n5   5 -1.0694973 0.7168651 -2.5962241 -1.0400583  0.28117825 -1.0443861\n6   6  4.2924309 1.3285123  2.0372633  4.1628960  7.31964736  3.9777720\n7   7  0.5902255 0.7352816 -0.9622393  0.6166024  1.98250366  0.6122912\n8   8 -1.5141552 0.7156264 -3.0394440 -1.4843897 -0.16658469 -1.4887036\n9   9  0.5688288 0.7360509 -0.9848906  0.5951505  1.96264695  0.5908450\n10 10  0.3378782 0.7362997 -1.2170898  0.3645205  1.73119134  0.3602255\n11 11  0.6540747 0.7355736 -0.8984518  0.6802671  2.04741682  0.6759552\n12 12 -1.3094017 0.7177658 -2.8383116 -1.2797393  0.04220064 -1.2840507\n            kld\n1  1.258930e-04\n2  4.594228e-05\n3  4.693167e-05\n4  4.560217e-05\n5  4.518199e-05\n6  1.399457e-04\n7  3.374617e-05\n8  4.615163e-05\n9  3.336982e-05\n10 3.341361e-05\n11 3.351842e-05\n12 4.479230e-05\n\n\n\nMarginal effects\n\nmarg_20_40_1 &lt;- inla_20_40$marginals.fixed[[1]] # Intercept\n\n\nmarg_20_40_1 = as.data.frame(marg_20_40_1)\nmarg_20_40_1$windows = c(\"Sporulation\")\nmarg_20_40_1$parameter = c(\"Intercept\")\n\nggplot(marg_20_40_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_2 &lt;- inla_20_40$marginals.fixed[[2]] # T2M\n\nmarg_20_40_2 = as.data.frame(marg_20_40_2)\nmarg_20_40_2$windows = c(\"Sporulation\")\nmarg_20_40_2$parameter = c(\"Temperature\")\n\nggplot(marg_20_40_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_3 &lt;- inla_20_40$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_20_40_3 = as.data.frame(marg_20_40_3)\nmarg_20_40_3$windows = c(\"Sporulation\")\nmarg_20_40_3$parameter = c(\"Rain\")\n\nggplot(marg_20_40_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_4 &lt;- inla_20_40$marginals.fixed[[4]] # RH2M\n\nmarg_20_40_4 = as.data.frame(marg_20_40_4)\nmarg_20_40_4$windows = c(\"Sporulation\")\nmarg_20_40_4$parameter = c(\"Humidity\")\n\nggplot(marg_20_40_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_20_40$summary.fitted.values\n\npredictions &lt;- inla_20_40$summary.fitted.values\n\nwd_20_40$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_20_40$RH2M, \n  PRECTOTCORR= wd_20_40$PRECTOTCORR,\n  T2M = wd_20_40$T2M,\n  predicted = inla_20_40$summary.fitted.values$mean,  \n  lower = inla_20_40$summary.fitted.values$`0.025quant`,  \n  upper = inla_20_40$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_20_40 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",,title = \"Sporulation\") +\n  ggthemes::theme_few()+\n     facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_20_40\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n40 to 60\n\nwd_40_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 40 & days &lt;= 60)\n\n\nwd_40_60 = wd_40_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_40_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_40_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_40_60 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_40_60)\n\nTime used:\n    Pre = 0.145, Running = 0.297, Post = 0.0557, Total = 0.497 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -6.374 1.161     -8.626   -6.384     -4.057 -6.383   0\nT2M              0.224 0.028      0.170    0.224      0.278  0.224   0\nPRECTOTCORR      0.015 0.006      0.003    0.015      0.026  0.015   0\nRH2M             0.037 0.006      0.026    0.037      0.048  0.037   0\ndays_difference  0.002 0.002     -0.002    0.002      0.005  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant mode\nPrecision for year1 0.232 0.127       0.06    0.207      0.546 0.16\n\nDeviance Information Criterion (DIC) ...............: 3253.00\nDeviance Information Criterion (DIC, saturated) ....: 3246.52\nEffective number of parameters .....................: 15.61\n\nWatanabe-Akaike information criterion (WAIC) ...: 3251.56\nEffective number of parameters .................: 14.11\n\nMarginal log-Likelihood:  -1684.25 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_40_60$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.6006489 1.4061788  1.1975872  3.4686099  6.7920475  3.2723965\n2   2 -1.8279101 0.7204858 -3.3635921 -1.7979021 -0.4711768 -1.8022090\n3   3 -1.8598481 0.7193685 -3.3936132 -1.8298000 -0.5051729 -1.8341104\n4   4 -2.3376709 0.7216087 -3.8762475 -2.3073104 -0.9800011 -2.3115891\n5   5 -1.0744840 0.7215353 -2.6111262 -1.0448627  0.2851946 -1.0491917\n6   6  4.2780481 1.3391016  2.0047048  4.1474974  7.3293131  3.9608710\n7   7  0.6251701 0.7399146 -0.9368913  0.6516247  2.0266583  0.6473036\n8   8 -1.5716793 0.7204138 -3.1072044 -1.5416872 -0.2150263 -1.5459988\n9   9  0.6072463 0.7401820 -0.9552390  0.6336783  2.0092770  0.6293597\n10 10  0.2773998 0.7408248 -1.2875180  0.3043362  1.6790920  0.3000339\n11 11  0.5418845 0.7400914 -1.0208369  0.5684742  1.9432910  0.5641574\n12 12 -1.2565732 0.7228629 -2.7959020 -1.2268362  0.1050897 -1.2311519\n            kld\n1  1.263643e-04\n2  4.584140e-05\n3  4.655703e-05\n4  4.539329e-05\n5  4.496791e-05\n6  1.399495e-04\n7  3.360720e-05\n8  4.588656e-05\n9  3.347299e-05\n10 3.343875e-05\n11 3.359574e-05\n12 4.425770e-05\n\n\n\nMarginal effects\n\nmarg_40_60_1 &lt;- inla_40_60$marginals.fixed[[1]] # Intercept\n\n\nmarg_40_60_1 = as.data.frame(marg_40_60_1)\nmarg_40_60_1$windows = c(\"Infection\")\nmarg_40_60_1$parameter = c(\"Intercept\")\n\nggplot(marg_40_60_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_2 &lt;- inla_40_60$marginals.fixed[[2]] # T2M\n\nmarg_40_60_2 = as.data.frame(marg_40_60_2)\nmarg_40_60_2$windows = c(\"Infection\")\nmarg_40_60_2$parameter = c(\"Temperature\")\n\nggplot(marg_40_60_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_3 &lt;- inla_40_60$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_40_60_3 = as.data.frame(marg_40_60_3)\nmarg_40_60_3$windows = c(\"Infection\")\nmarg_40_60_3$parameter = c(\"Rain\")\n\nmarg_40_60_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_4 &lt;- inla_40_60$marginals.fixed[[4]] # RH2M\n\nmarg_40_60_4 = as.data.frame(marg_40_60_4)\nmarg_40_60_4$windows = c(\"Infection\")\nmarg_40_60_4$parameter = c(\"Humidity\")\n\nggplot(marg_40_60_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_40_60$summary.fitted.values\n\npredictions &lt;- inla_40_60$summary.fitted.values\n\nwd_40_60$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_40_60$RH2M, \n  PRECTOTCORR= wd_40_60$PRECTOTCORR,\n  T2M = wd_40_60$T2M,\n  predicted = inla_40_60$summary.fitted.values$mean,  \n  lower = inla_40_60$summary.fitted.values$`0.025quant`,  \n  upper = inla_40_60$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_40_60 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",title = \"Infection\") +\n  ggthemes::theme_few()+\n   facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_40_60\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n60 to 80\n\nwd_60_80 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 60 & days &lt;= 80)\n\nwd_60_80 = wd_60_80 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_60_80 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_80,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_60_80 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    DAYS_mean = mean(days_difference),\n    DAYS_sd = sd(days_difference),\n    DAYS_max = max(days_difference),\n    DAYS_min = min(days_difference),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LAT_mean = mean(lat),\n    LAT_sd = sd(lat),\n    LAT_max = max(lat),\n    LAT_min = min(lat),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LON_mean = mean(lon),\n    LON_sd = sd(lon),\n    LON_max = max(lon),\n    LON_min = min(lon),\n  )\n\n\n  \n\n\n\n\nsummary(inla_60_80)\n\nTime used:\n    Pre = 0.142, Running = 0.288, Post = 0.0508, Total = 0.481 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.127 1.156     -6.368   -4.138     -1.821 -4.136   0\nT2M              0.137 0.026      0.087    0.137      0.188  0.137   0\nPRECTOTCORR      0.004 0.006     -0.008    0.004      0.015  0.004   0\nRH2M             0.036 0.006      0.024    0.036      0.049  0.036   0\ndays_difference  0.003 0.002      0.000    0.003      0.007  0.003   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.241 0.132      0.062    0.215      0.567 0.166\n\nDeviance Information Criterion (DIC) ...............: 3300.87\nDeviance Information Criterion (DIC, saturated) ....: 3294.40\nEffective number of parameters .....................: 15.61\n\nWatanabe-Akaike information criterion (WAIC) ...: 3299.58\nEffective number of parameters .................: 14.25\n\nMarginal log-Likelihood:  -1708.07 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_60_80$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.4320887 1.3974849  1.0408064  3.3018863  6.6007520  3.1067629\n2   2 -1.8640857 0.7077880 -3.3729344 -1.8344698 -0.5319148 -1.8387100\n3   3 -1.8888348 0.7060924 -3.3949703 -1.8590798 -0.5600165 -1.8633217\n4   4 -2.3188414 0.7085555 -3.8299950 -2.2888529 -0.9864130 -2.2930662\n5   5 -1.1128555 0.7084088 -2.6220858 -1.0835478  0.2212880 -1.0878085\n6   6  4.2100036 1.3190619  1.9707165  4.0814605  7.2149993  3.8975353\n7   7  0.6493273 0.7275715 -0.8865664  0.6753892  2.0269581  0.6711382\n8   8 -1.4763181 0.7071899 -2.9839501 -1.4467628 -0.1450159 -1.4510136\n9   9  0.5866518 0.7275343 -0.9492227  0.6127364  1.9641430  0.6084867\n10 10  0.4223024 0.7278893 -1.1147053  0.4485837  1.7998444  0.4443419\n11 11  0.5299473 0.7276111 -1.0061333  0.5560633  1.9074788  0.5518172\n12 12 -1.1671516 0.7088554 -2.6774800 -1.1377285  0.1674385 -1.1419817\n            kld\n1  1.236003e-04\n2  4.564313e-05\n3  4.680694e-05\n4  4.542466e-05\n5  4.507245e-05\n6  1.376663e-04\n7  3.311937e-05\n8  4.598555e-05\n9  3.314225e-05\n10 3.307888e-05\n11 3.311496e-05\n12 4.488415e-05\n\n\n\nMarginal effects\n\nmarg_60_80_1 &lt;- inla_60_80$marginals.fixed[[1]] # Intercept\n\n\nmarg_60_80_1 = as.data.frame(marg_60_80_1)\nmarg_60_80_1$windows = c(\"Colonization\")\nmarg_60_80_1$parameter = c(\"Intercept\")\n\nggplot(marg_60_80_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_2 &lt;- inla_60_80$marginals.fixed[[2]] # T2M\n\nmarg_60_80_2 = as.data.frame(marg_60_80_2)\nmarg_60_80_2$windows = c(\"Colonization\")\nmarg_60_80_2$parameter = c(\"Temperature\")\n\nggplot(marg_60_80_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_3 &lt;- inla_60_80$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_60_80_3 = as.data.frame(marg_60_80_3)\nmarg_60_80_3$windows = c(\"Colonization\")\nmarg_60_80_3$parameter = c(\"Rain\")\n\nmarg_60_80_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_4 &lt;- inla_60_80$marginals.fixed[[4]] # RH2M\n\nmarg_60_80_4 = as.data.frame(marg_60_80_4)\nmarg_60_80_4$windows = c(\"Colonization\")\nmarg_60_80_4$parameter = c(\"Humidity\")\n\nggplot(marg_60_80_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_60_80$summary.fitted.values\n\npredictions &lt;- inla_60_80$summary.fitted.values\n\nwd_60_80$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_60_80$RH2M, \n  PRECTOTCORR= wd_60_80$PRECTOTCORR,\n  T2M = wd_60_80$T2M,\n  predicted = inla_60_80$summary.fitted.values$mean,  \n  lower = inla_60_80$summary.fitted.values$`0.025quant`,  \n  upper = inla_60_80$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_60_80 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"Colonization\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_60_80\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\nJoining\n\nplot_grid(plot_0_20,plot_20_40,plot_40_60,plot_60_80, ncol = 4)\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nggsave(\"fig/INLA_prediction.png\", dpi = 600, bg = \"white\",\n        height = 6, width = 10)"
  },
  {
    "objectID": "about.html#marginal-plotting",
    "href": "about.html#marginal-plotting",
    "title": "About",
    "section": "Marginal plotting",
    "text": "Marginal plotting\n\nall_marginal = rbind(marg_0_20_1,marg_0_20_2,marg_0_20_3,marg_0_20_4,\n                     marg_20_40_1,marg_20_40_2,marg_20_40_3,marg_20_40_4,\n                     marg_40_60_1,marg_40_60_2,marg_40_60_3,marg_40_60_4,\n                     marg_60_80_1,marg_60_80_2,marg_60_80_3,marg_60_80_4)\n\nall_marginal %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_colour_manual(values = c(\"darkred\",\"#002f61\", \"darkgreen\",\"darkorange\"))+\n  #scale_color_viridis_d(option = \"D\")+\n  facet_wrap(~parameter, scale = \"free\")+\n  labs(x = \"Marginal effect\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12),\n        axis.title = element_text(face = \"bold\"),\n        strip.text = element_text(face = \"bold\"))\n\n\n\n\n\n\n\nggsave(\"fig/marginal_effects.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 8)"
  },
  {
    "objectID": "about.html#random-year",
    "href": "about.html#random-year",
    "title": "About",
    "section": "Random (Year)",
    "text": "Random (Year)\n\nyear_0_20 = inla_0_20$summary.random\nyear_0_20 = as.data.frame(year_0_20)\n\nyear_0_20 %&gt;% \nggplot(aes(x = as.factor(year1.ID), y = year1.mean)) +\n  geom_segment(aes(xend = as.factor(year1.ID), y = 0, yend = year1.mean, \n                   color = year1.mean &gt; 0), size = 1, linetype = \"dashed\") +\n  geom_point(aes(color = year1.mean &gt; 0), size = 4) +\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"solid\") +  \n  scale_color_manual(values = c(\"TRUE\" = \"darkred\", \"FALSE\" = \"#002f61\")) +\n  scale_y_continuous(breaks = seq(-2.5, 4.5, 0.5)) +\n  ggthemes::theme_few() +\n  labs(x = \"Year\",\n       y = \"Marginal effect\") +\n  theme(text = element_text(size = 12),\n       axis.title = element_text(face = \"bold\", size = 12),\n        strip.text = element_text(face = \"bold\", size = 12),\n        legend.position = \"none\")\n\n\n\n\n\n\n\nggsave(\"fig/marginal_effects_year.png\", dpi = 600, bg = \"white\",\n       height = 6, width = 10)"
  },
  {
    "objectID": "about.html#scenarios",
    "href": "about.html#scenarios",
    "title": "About",
    "section": "Scenarios",
    "text": "Scenarios\n\nmedian(pred_results$PRECTOTCORR)\nmedian(pred_results$RH2M)\n\npred_results2 = pred_results %&gt;% \n  dplyr::mutate(scenarios = ifelse(RH2M&gt;= 79, 1,0))\n\n\n\npred_results2 &lt;- pred_results2 %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper, scenarios),  \n    names_to = \"variables\")\n\npred_results2$scenarios = as.factor(pred_results2$scenarios)\n\nplot_60_80 = pred_results2 %&gt;% \n  filter(variables == \"T2M\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = scenarios), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = scenarios), se = F, linetype = 2, size = 1.2) +\n  #scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n   #                               \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  #facet_wrap(~scenarios, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"right\"\n  )\nplot_60_80\n\n\nplot_60_80 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"#c20f0f\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"60 to 80\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "about.html#loocv",
    "href": "about.html#loocv",
    "title": "About",
    "section": "LOOCV",
    "text": "LOOCV\n\nset.seed(123)\n\n\nacc &lt;- NULL\nfor(i in 1:nrow(wd_60_8022))\n{\n    # Train-test splitting\n    # 499 samples -&gt; fitting\n    # 1 sample -&gt; testing\n    train &lt;- wd_60_8022[-i,]\n    test &lt;- wd_60_8022[i,]\n    \n    # Fitting\n\n    modelt &lt;- inla(epidemic ~T2M + RH2M,\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      #f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob &lt;- modelt$summary.fitted.values\n    \n    # If prob &gt; 0.5 then 1, else 0\n    results &lt;- ifelse(results_prob$mean &gt; 0.75,1,0)\n    \n    # Actual answers\n    answers &lt;- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError &lt;- mean(answers != results)\n    \n    # Collecting results\n    acc[i] &lt;- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)"
  },
  {
    "objectID": "about.html#loocv-1",
    "href": "about.html#loocv-1",
    "title": "About",
    "section": "LOOCV",
    "text": "LOOCV\nLOOCV com dados diários\n\nset.seed(123)\n\n\nacc &lt;- NULL\nfor(i in 1:nrow(wd_0_20))\n{\n    # Train-test splitting\n    # 499 samples -&gt; fitting\n    # 1 sample -&gt; testing\n    train &lt;- wd_0_20[-i,]\n    test &lt;- wd_0_20[i,]\n    \n    # Fitting\n\n    modelt &lt;- inla(epidemic ~T2M + RH2M+\n         # f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001))))+\n      f(days_difference, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = train,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))\n\n    \n    # Predict results\n    results_prob &lt;- modelt$summary.fitted.values\n    \n    # If prob &gt; 0.5 then 1, else 0\n    results &lt;- ifelse(results_prob$mean &gt; 0.75,1,0)\n    \n    # Actual answers\n    answers &lt;- test$epidemic\n    \n    # Calculate accuracy\n    misClasificError &lt;- mean(answers != results)\n    \n    # Collecting results\n    acc[i] &lt;- 1-misClasificError\n}\n\n# Average accuracy of the model\nmean(acc)"
  },
  {
    "objectID": "about.html#selecting-of-models",
    "href": "about.html#selecting-of-models",
    "title": "About",
    "section": "Selecting of models",
    "text": "Selecting of models\n\nwd_0_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 60)\n\n\nwd_0_60 = wd_0_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(inla_0_60)\n\nTime used:\n    Pre = 0.283, Running = 1.04, Post = 0.119, Total = 1.44 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.331 0.952     -6.147   -4.356     -2.362 -4.352   0\nT2M          0.184 0.013      0.158    0.184      0.211  0.184   0\nPRECTOTCORR  0.000 0.003     -0.007    0.000      0.006  0.000   0\nRH2M         0.030 0.003      0.024    0.030      0.035  0.030   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.162 0.088      0.043    0.146      0.379 0.113\n\nDeviance Information Criterion (DIC) ...............: 9456.67\nDeviance Information Criterion (DIC, saturated) ....: 9437.87\nEffective number of parameters .....................: 14.65\n\nWatanabe-Akaike information criterion (WAIC) ...: 9454.87\nEffective number of parameters .................: 12.83\n\nMarginal log-Likelihood:  -4786.44 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\nwd_0_60 %&gt;%\n  dplyr::group_by(epidemic) %&gt;% \n  summarise(\n    n = n()/61\n  )\n\n\n  \n\n\n\n\nmodel_full &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nmodel_reduced &lt;- inla(epidemic ~T2M +PRECTOTCORR + RH2M,\n                        data = wd_0_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\nsummary(model_reduced)\n\nTime used:\n    Pre = 0.124, Running = 0.194, Post = 0.295, Total = 0.613 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -3.614 0.378     -4.355   -3.614     -2.873 -3.614   0\nT2M          0.139 0.011      0.116    0.139      0.161  0.139   0\nPRECTOTCORR  0.002 0.003     -0.004    0.002      0.008  0.002   0\nRH2M         0.021 0.003      0.016    0.021      0.026  0.021   0\n\nDeviance Information Criterion (DIC) ...............: 11629.46\nDeviance Information Criterion (DIC, saturated) ....: 11610.66\nEffective number of parameters .....................: 4.00\n\nWatanabe-Akaike information criterion (WAIC) ...: 11629.48\nEffective number of parameters .................: 4.01\n\nMarginal log-Likelihood:  -5840.33 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\nloglik_full = model_full$mlik\nloglik_reduced = model_reduced$mlik\nln_bf &lt;- loglik_full - loglik_reduced\nln_bf\n\n                                          [,1]\nlog marginal-likelihood (integration) 1054.270\nlog marginal-likelihood (Gaussian)    1053.888"
  },
  {
    "objectID": "about.html#by-windows",
    "href": "about.html#by-windows",
    "title": "About",
    "section": "By windows",
    "text": "By windows\n\n0 to 20\n\nwd_0_20 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 0 & days &lt;= 20)\n\n\nwd_0_20 = wd_0_20 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\ninla_0_20 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days_difference, model = \"rw1\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_0_20,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_0_20 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_0_20 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_0_20)\n\nTime used:\n    Pre = 0.131, Running = 0.277, Post = 0.089, Total = 0.497 \nFixed effects:\n              mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept) -4.390 0.974     -6.269   -4.405     -2.424 -4.402   0\nT2M          0.171 0.020      0.132    0.171      0.211  0.171   0\nPRECTOTCORR -0.007 0.006     -0.018   -0.007      0.004 -0.007   0\nRH2M         0.034 0.005      0.025    0.034      0.043  0.034   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.237 0.129      0.061    0.212      0.557 0.164\n\nDeviance Information Criterion (DIC) ...............: 3257.90\nDeviance Information Criterion (DIC, saturated) ....: 3251.43\nEffective number of parameters .....................: 14.59\n\nWatanabe-Akaike information criterion (WAIC) ...: 3256.29\nEffective number of parameters .................: 12.93\n\nMarginal log-Likelihood:  -1678.39 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_0_20$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant  0.975quant       mode\n1   1  3.3857403 1.4104485  0.9691892  3.2553446  6.58167176  3.0584718\n2   2 -1.8049504 0.7115333 -3.3211577 -1.7754028 -0.46526404 -1.7796871\n3   3 -1.9029893 0.7100120 -3.4168177 -1.8732917 -0.56638797 -1.8775749\n4   4 -2.3630546 0.7124725 -3.8820235 -2.3330720 -1.02298809 -2.3373229\n5   5 -1.0321777 0.7126942 -2.5496570 -1.0029703  0.31052046 -1.0072715\n6   6  4.2341317 1.3237741  1.9850066  4.1057492  7.24853705  3.9211999\n7   7  0.4925631 0.7313643 -1.0515171  0.5188705  1.87689460  0.5145988\n8   8 -1.5477559 0.7113386 -3.0638174 -1.5181266 -0.20864735 -1.5224086\n9   9  0.6058845 0.7317303 -0.9381582  0.6319137  1.99169171  0.6276393\n10 10  0.2839310 0.7319500 -1.2618756  0.3105037  1.66852462  0.3062429\n11 11  0.9360971 0.7332246 -0.6084856  0.9612736  2.32709543  0.9570016\n12 12 -1.2852274 0.7142954 -2.8061973 -1.2557777  0.05957493 -1.2600551\n            kld\n1  1.227526e-04\n2  4.527074e-05\n3  4.631053e-05\n4  4.498367e-05\n5  4.435701e-05\n6  1.364487e-04\n7  3.300922e-05\n8  4.544918e-05\n9  3.270656e-05\n10 3.287972e-05\n11 3.162351e-05\n12 4.356411e-05\n\n\n\nMarginal effects\n\nmarg_0_20_1 &lt;- inla_0_20$marginals.fixed[[1]] # Intercept\n\n\nmarg_0_20_1 = as.data.frame(marg_0_20_1)\nmarg_0_20_1$windows = c(\"Survival\")\nmarg_0_20_1$parameter = c(\"Intercept\")\n\nggplot(marg_0_20_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_2 &lt;- inla_0_20$marginals.fixed[[2]] # T2M\n\nmarg_0_20_2 = as.data.frame(marg_0_20_2)\nmarg_0_20_2$windows = c(\"Survival\")\nmarg_0_20_2$parameter = c(\"Temperature\")\n\nggplot(marg_0_20_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_3 &lt;- inla_0_20$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_0_20_3 = as.data.frame(marg_0_20_3)\nmarg_0_20_3$windows = c(\"Survival\")\nmarg_0_20_3$parameter = c(\"Rain\")\n\nggplot(marg_0_20_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_0_20_4 &lt;- inla_0_20$marginals.fixed[[4]] # RH2M\n\nmarg_0_20_4 = as.data.frame(marg_0_20_4)\nmarg_0_20_4$windows = c(\"Survival\")\nmarg_0_20_4$parameter = c(\"Humidity\")\n\nggplot(marg_0_20_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_0_20$summary.fitted.values\n\npredictions &lt;- inla_0_20$summary.fitted.values\n\nwd_0_20$mean = predictions$mean\n\n\n\npred_results &lt;- data.frame(\n  RH2M = wd_0_20$RH2M, \n  PRECTOTCORR= wd_0_20$PRECTOTCORR,\n  T2M = wd_0_20$T2M,\n  predicted = inla_0_20$summary.fitted.values$mean,  \n  lower = inla_0_20$summary.fitted.values$`0.025quant`,  \n  upper = inla_0_20$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n#b4e4c0 #ca5858#6280bc ##c20f0f\nplot_0_20 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n\n  labs(x = \"\", y = \"Target spot outbreak (%)\",title = \"Survival\")+\n  ggthemes::theme_few()+\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n  theme(\n    axis.title.y = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_0_20\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n20 to 40\n\nwd_20_40 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 20 & days &lt;= 40)\n\n\nwd_20_40 = wd_20_40 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_20_40 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_20_40,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_20_40 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_20_40 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_20_40)\n\nTime used:\n    Pre = 0.137, Running = 0.286, Post = 0.0793, Total = 0.502 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.213 1.071     -6.285   -4.226     -2.065 -4.224   0\nT2M              0.186 0.024      0.139    0.186      0.233  0.186   0\nPRECTOTCORR     -0.011 0.006     -0.022   -0.011      0.000 -0.011   0\nRH2M             0.025 0.005      0.014    0.025      0.035  0.025   0\ndays_difference  0.002 0.002     -0.002    0.002      0.006  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.234 0.128       0.06    0.209      0.551 0.161\n\nDeviance Information Criterion (DIC) ...............: 3282.40\nDeviance Information Criterion (DIC, saturated) ....: 3275.93\nEffective number of parameters .....................: 15.60\n\nWatanabe-Akaike information criterion (WAIC) ...: 3280.99\nEffective number of parameters .................: 14.13\n\nMarginal log-Likelihood:  -1699.24 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_20_40$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.4841422 1.4091447  1.0732497  3.3527204  6.6802146  3.1561172\n2   2 -1.8328218 0.7160195 -3.3589639 -1.8029949 -0.4847418 -1.8073006\n3   3 -1.8488349 0.7144923 -3.3723593 -1.8189521 -0.5035751 -1.8232628\n4   4 -2.3506428 0.7169626 -3.8793649 -2.3204587 -1.0019523 -2.3247368\n5   5 -1.0694972 0.7168649 -2.5962236 -1.0400582  0.2811780 -1.0443860\n6   6  4.2924304 1.3285121  2.0372633  4.1628955  7.3196463  3.9777715\n7   7  0.5902256 0.7352814 -0.9622388  0.6166025  1.9825034  0.6122913\n8   8 -1.5141551 0.7156262 -3.0394436 -1.4843896 -0.1665849 -1.4887035\n9   9  0.5688289 0.7360507 -0.9848901  0.5951506  1.9626467  0.5908451\n10 10  0.3378783 0.7362995 -1.2170893  0.3645206  1.7311911  0.3602255\n11 11  0.6540748 0.7355735 -0.8984514  0.6802672  2.0474166  0.6759553\n12 12 -1.3094016 0.7177656 -2.8383112 -1.2797392  0.0422004 -1.2840506\n            kld\n1  1.258929e-04\n2  4.594226e-05\n3  4.693164e-05\n4  4.560215e-05\n5  4.518196e-05\n6  1.399454e-04\n7  3.374614e-05\n8  4.615160e-05\n9  3.336979e-05\n10 3.341358e-05\n11 3.351839e-05\n12 4.479227e-05\n\n\n\nMarginal effects\n\nmarg_20_40_1 &lt;- inla_20_40$marginals.fixed[[1]] # Intercept\n\n\nmarg_20_40_1 = as.data.frame(marg_20_40_1)\nmarg_20_40_1$windows = c(\"Sporulation\")\nmarg_20_40_1$parameter = c(\"Intercept\")\n\nggplot(marg_20_40_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_2 &lt;- inla_20_40$marginals.fixed[[2]] # T2M\n\nmarg_20_40_2 = as.data.frame(marg_20_40_2)\nmarg_20_40_2$windows = c(\"Sporulation\")\nmarg_20_40_2$parameter = c(\"Temperature\")\n\nggplot(marg_20_40_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_3 &lt;- inla_20_40$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_20_40_3 = as.data.frame(marg_20_40_3)\nmarg_20_40_3$windows = c(\"Sporulation\")\nmarg_20_40_3$parameter = c(\"Rain\")\n\nggplot(marg_20_40_3, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_20_40_4 &lt;- inla_20_40$marginals.fixed[[4]] # RH2M\n\nmarg_20_40_4 = as.data.frame(marg_20_40_4)\nmarg_20_40_4$windows = c(\"Sporulation\")\nmarg_20_40_4$parameter = c(\"Humidity\")\n\nggplot(marg_20_40_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_20_40$summary.fitted.values\n\npredictions &lt;- inla_20_40$summary.fitted.values\n\nwd_20_40$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_20_40$RH2M, \n  PRECTOTCORR= wd_20_40$PRECTOTCORR,\n  T2M = wd_20_40$T2M,\n  predicted = inla_20_40$summary.fitted.values$mean,  \n  lower = inla_20_40$summary.fitted.values$`0.025quant`,  \n  upper = inla_20_40$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_20_40 = pred_results %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",,title = \"Sporulation\") +\n  ggthemes::theme_few()+\n     facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_20_40\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n40 to 60\n\nwd_40_60 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 40 & days &lt;= 60)\n\n\nwd_40_60 = wd_40_60 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_40_60 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_40_60,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_40_60 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_40_60 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nsummary(inla_40_60)\n\nTime used:\n    Pre = 0.136, Running = 0.286, Post = 0.0716, Total = 0.493 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -6.374 1.161     -8.626   -6.385     -4.058 -6.383   0\nT2M              0.224 0.028      0.170    0.224      0.278  0.224   0\nPRECTOTCORR      0.015 0.006      0.003    0.015      0.026  0.015   0\nRH2M             0.037 0.006      0.026    0.037      0.048  0.037   0\ndays_difference  0.002 0.002     -0.002    0.002      0.005  0.002   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant mode\nPrecision for year1 0.232 0.127       0.06    0.207      0.546 0.16\n\nDeviance Information Criterion (DIC) ...............: 3253.00\nDeviance Information Criterion (DIC, saturated) ....: 3246.53\nEffective number of parameters .....................: 15.62\n\nWatanabe-Akaike information criterion (WAIC) ...: 3251.56\nEffective number of parameters .................: 14.11\n\nMarginal log-Likelihood:  -1684.25 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_40_60$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.5984055 1.4049764  1.1975903  3.4664232  6.7875851  3.2704640\n2   2 -1.8274523 0.7197725 -3.3616912 -1.7974711 -0.4721450 -1.8017975\n3   3 -1.8593912 0.7186540 -3.3917114 -1.8293700 -0.5061447 -1.8337000\n4   4 -2.3372060 0.7208967 -3.8743439 -2.3068718 -0.9809607 -2.3111704\n5   5 -1.0740308 0.7208230 -2.6092295 -1.0444365  0.2842251 -1.0487844\n6   6  4.2758399 1.3379539  2.0046604  4.1453335  7.3250222  3.9589546\n7   7  0.6255944 0.7392191 -0.9350366  0.6520214  2.0257047  0.6476863\n8   8 -1.5712218 0.7197005 -3.1053036 -1.5412565 -0.2159949 -1.5455877\n9   9  0.6076705 0.7394867 -0.9533848  0.6340750  2.0083239  0.6297424\n10 10  0.2778335 0.7401305 -1.2856589  0.3047427  1.6781488  0.3004259\n11 11  0.5423113 0.7393962 -1.0189809  0.5688735  1.9423400  0.5645426\n12 12 -1.2561164 0.7221520 -2.7940049 -1.2264062  0.1041264 -1.2307408\n            kld\n1  1.274159e-04\n2  4.625580e-05\n3  4.697841e-05\n4  4.580338e-05\n5  4.537376e-05\n6  1.412139e-04\n7  3.390468e-05\n8  4.630138e-05\n9  3.376920e-05\n10 3.373462e-05\n11 3.389310e-05\n12 4.465667e-05\n\n\n\nMarginal effects\n\nmarg_40_60_1 &lt;- inla_40_60$marginals.fixed[[1]] # Intercept\n\n\nmarg_40_60_1 = as.data.frame(marg_40_60_1)\nmarg_40_60_1$windows = c(\"Infection\")\nmarg_40_60_1$parameter = c(\"Intercept\")\n\nggplot(marg_40_60_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_2 &lt;- inla_40_60$marginals.fixed[[2]] # T2M\n\nmarg_40_60_2 = as.data.frame(marg_40_60_2)\nmarg_40_60_2$windows = c(\"Infection\")\nmarg_40_60_2$parameter = c(\"Temperature\")\n\nggplot(marg_40_60_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_3 &lt;- inla_40_60$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_40_60_3 = as.data.frame(marg_40_60_3)\nmarg_40_60_3$windows = c(\"Infection\")\nmarg_40_60_3$parameter = c(\"Rain\")\n\nmarg_40_60_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_40_60_4 &lt;- inla_40_60$marginals.fixed[[4]] # RH2M\n\nmarg_40_60_4 = as.data.frame(marg_40_60_4)\nmarg_40_60_4$windows = c(\"Infection\")\nmarg_40_60_4$parameter = c(\"Humidity\")\n\nggplot(marg_40_60_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_40_60$summary.fitted.values\n\npredictions &lt;- inla_40_60$summary.fitted.values\n\nwd_40_60$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_40_60$RH2M, \n  PRECTOTCORR= wd_40_60$PRECTOTCORR,\n  T2M = wd_40_60$T2M,\n  predicted = inla_40_60$summary.fitted.values$mean,  \n  lower = inla_40_60$summary.fitted.values$`0.025quant`,  \n  upper = inla_40_60$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_40_60 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n  geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\",title = \"Infection\") +\n  ggthemes::theme_few()+\n   facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    #strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_40_60\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\n60 to 80\n\nwd_60_80 = weather_data %&gt;% \n  dplyr::filter(days &gt;= 60 & days &lt;= 80)\n\nwd_60_80 = wd_60_80 %&gt;% \n  dplyr::mutate(epidemic = ifelse(mean_sev &gt;= 0.20, 1, 0))\n\n\ninla_60_80 = inla(epidemic ~T2M +PRECTOTCORR + RH2M+ days_difference+\n          f(year1, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n      #f(days, model = \"iid\", hyper = list(prec = list(param = c(0.001,0.001)))),\n                        data = wd_60_80,\n                        family = \"binomial\",\n  control.predictor = list(compute = TRUE),\n  control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE, config = TRUE))\n\n\nwd_60_80 %&gt;% \n  summarise(\n    RAIN_mean = mean(PRECTOTCORR),\n    RAIN_sd = sd(PRECTOTCORR),\n    RAIN_max = max(PRECTOTCORR),\n    RAIN_min = min(PRECTOTCORR),\n  )\n\n\n  \n\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    HUMIDITY_mean = mean(RH2M),\n    HUMIDITY_sd = sd(RH2M),\n    HUMIDITY_max = max(RH2M),\n    HUMIDITY_min = min(RH2M),\n  )\n\n\n  \n\n\n\n\nwd_60_80 %&gt;% \n  summarise(\n    TEMPERATURE_mean = mean(T2M),\n    TEMPERATURE_sd = sd(T2M),\n    TEMPERATURE_max = max(T2M),\n    TEMPERATURE_min = min(T2M),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    DAYS_mean = mean(days_difference),\n    DAYS_sd = sd(days_difference),\n    DAYS_max = max(days_difference),\n    DAYS_min = min(days_difference),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LAT_mean = mean(lat),\n    LAT_sd = sd(lat),\n    LAT_max = max(lat),\n    LAT_min = min(lat),\n  )\n\n\n  \n\n\n\n\nweather_data %&gt;% \n  filter(!state == \"SP\") %&gt;% \n   summarise(\n    LON_mean = mean(lon),\n    LON_sd = sd(lon),\n    LON_max = max(lon),\n    LON_min = min(lon),\n  )\n\n\n  \n\n\n\n\nsummary(inla_60_80)\n\nTime used:\n    Pre = 0.138, Running = 0.283, Post = 0.114, Total = 0.535 \nFixed effects:\n                  mean    sd 0.025quant 0.5quant 0.975quant   mode kld\n(Intercept)     -4.127 1.156     -6.368   -4.138     -1.821 -4.136   0\nT2M              0.137 0.026      0.087    0.137      0.188  0.137   0\nPRECTOTCORR      0.004 0.006     -0.008    0.004      0.015  0.004   0\nRH2M             0.036 0.006      0.024    0.036      0.049  0.036   0\ndays_difference  0.003 0.002      0.000    0.003      0.007  0.003   0\n\nRandom effects:\n  Name    Model\n    year1 IID model\n\nModel hyperparameters:\n                     mean    sd 0.025quant 0.5quant 0.975quant  mode\nPrecision for year1 0.241 0.132      0.062    0.215      0.567 0.166\n\nDeviance Information Criterion (DIC) ...............: 3300.87\nDeviance Information Criterion (DIC, saturated) ....: 3294.40\nEffective number of parameters .....................: 15.61\n\nWatanabe-Akaike information criterion (WAIC) ...: 3299.58\nEffective number of parameters .................: 14.25\n\nMarginal log-Likelihood:  -1708.07 \nCPO, PIT is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\n\ninla_60_80$summary.random\n\n$year1\n   ID       mean        sd 0.025quant   0.5quant 0.975quant       mode\n1   1  3.4320897 1.3974855  1.0408064  3.3018873  6.6007540  3.1067638\n2   2 -1.8640859 0.7077884 -3.3729353 -1.8344700 -0.5319144 -1.8387102\n3   3 -1.8888350 0.7060927 -3.3949712 -1.8590800 -0.5600160 -1.8633219\n4   4 -2.3188417 0.7085558 -3.8299958 -2.2888531 -0.9864125 -2.2930664\n5   5 -1.1128557 0.7084092 -2.6220867 -1.0835480  0.2212884 -1.0878087\n6   6  4.2100046 1.3190624  1.9707165  4.0814615  7.2150013  3.8975362\n7   7  0.6493271 0.7275719 -0.8865672  0.6753891  2.0269585  0.6711380\n8   8 -1.4763183 0.7071902 -2.9839510 -1.4467630 -0.1450155 -1.4510138\n9   9  0.5866516 0.7275346 -0.9492235  0.6127362  1.9641434  0.6084865\n10 10  0.4223022 0.7278896 -1.1147061  0.4485835  1.7998448  0.4443417\n11 11  0.5299471 0.7276114 -1.0061341  0.5560631  1.9074793  0.5518170\n12 12 -1.1671518 0.7088558 -2.6774809 -1.1377287  0.1674389 -1.1419818\n            kld\n1  1.235999e-04\n2  4.564296e-05\n3  4.680676e-05\n4  4.542449e-05\n5  4.507228e-05\n6  1.376658e-04\n7  3.311925e-05\n8  4.598538e-05\n9  3.314213e-05\n10 3.307876e-05\n11 3.311484e-05\n12 4.488398e-05\n\n\n\nMarginal effects\n\nmarg_60_80_1 &lt;- inla_60_80$marginals.fixed[[1]] # Intercept\n\n\nmarg_60_80_1 = as.data.frame(marg_60_80_1)\nmarg_60_80_1$windows = c(\"Colonization\")\nmarg_60_80_1$parameter = c(\"Intercept\")\n\nggplot(marg_60_80_1, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_2 &lt;- inla_60_80$marginals.fixed[[2]] # T2M\n\nmarg_60_80_2 = as.data.frame(marg_60_80_2)\nmarg_60_80_2$windows = c(\"Colonization\")\nmarg_60_80_2$parameter = c(\"Temperature\")\n\nggplot(marg_60_80_2, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_3 &lt;- inla_60_80$marginals.fixed[[3]] # PRECTOTCORR\n\nmarg_60_80_3 = as.data.frame(marg_60_80_3)\nmarg_60_80_3$windows = c(\"Colonization\")\nmarg_60_80_3$parameter = c(\"Rain\")\n\nmarg_60_80_3 %&gt;% \nggplot(aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\nmarg_60_80_4 &lt;- inla_60_80$marginals.fixed[[4]] # RH2M\n\nmarg_60_80_4 = as.data.frame(marg_60_80_4)\nmarg_60_80_4$windows = c(\"Colonization\")\nmarg_60_80_4$parameter = c(\"Humidity\")\n\nggplot(marg_60_80_4, aes(x, y, color = windows)) +\n  geom_line(size = 2) +\n  ggthemes::theme_few()+\n  scale_color_viridis_d(option = \"E\")+\n  labs(x = \"Intercept\",\n       y = \"Frequency\",\n       color = \"Windows\")+\n  theme(text = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nPrediction\n\n#inla_60_80$summary.fitted.values\n\npredictions &lt;- inla_60_80$summary.fitted.values\n\nwd_60_80$mean = predictions$mean\n\npred_results &lt;- data.frame(\n  RH2M = wd_60_80$RH2M, \n  PRECTOTCORR= wd_60_80$PRECTOTCORR,\n  T2M = wd_60_80$T2M,\n  predicted = inla_60_80$summary.fitted.values$mean,  \n  lower = inla_60_80$summary.fitted.values$`0.025quant`,  \n  upper = inla_60_80$summary.fitted.values$`0.975quant`   \n)\n\npred_results &lt;- pred_results %&gt;%\n  pivot_longer(\n    cols = -c(predicted,lower,upper),  \n    names_to = \"variables\")\n\n\nplot_60_80 = pred_results %&gt;% \n  #filter(variables == \"PRECTOTCORR\") %&gt;% \nggplot() +\n   geom_smooth(aes(x = value, y = predicted, color = variables), se = F, size = 2)+\n  geom_smooth(aes(x =  value , y = lower, color = variables), se = F, linetype = 2, size = 1.2) +\n  geom_smooth(aes(x =  value , y = upper, color = variables), se = F, linetype = 2, size = 1.2) +\n  scale_color_manual(values = c(\"T2M\" = \"darkred\", \"RH2M\" = \"darkgreen\",\n                                  \"PRECTOTCORR\" = \"#002f61\")) +\n  labs(x = \"\", y = \"\", title = \"Colonization\") +\n  ggthemes::theme_few() +\n  facet_wrap(~variables, scales = \"free\", ncol = 1, strip.position = \"bottom\") +  \n theme(\n    plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),  \n    strip.text.x = element_blank(),\n    strip.background = element_blank(),\n    legend.position = \"none\"\n  )\n\nplot_60_80\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\n\nJoining\n\nplot_grid(plot_0_20,plot_20_40,plot_40_60,plot_60_80, ncol = 4)\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nggsave(\"fig/INLA_prediction.png\", dpi = 600, bg = \"white\",\n        height = 6, width = 10)"
  }
]